
RFID_Reader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a7c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08008b88  08008b88  00009b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c3c  08008c3c  0000a1cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008c3c  08008c3c  00009c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c44  08008c44  0000a1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c44  08008c44  00009c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c48  08008c48  00009c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  08008c4c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001398  200001cc  08008e18  0000a1cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001564  08008e18  0000a564  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e7f7  00000000  00000000  0000a1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000323b  00000000  00000000  000189ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  0001bc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c6  00000000  00000000  0001c978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a074  00000000  00000000  0001d33e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001220f  00000000  00000000  000373b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087171  00000000  00000000  000495c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0732  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038ac  00000000  00000000  000d0778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000d4024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001cc 	.word	0x200001cc
 8000128:	00000000 	.word	0x00000000
 800012c:	08008b70 	.word	0x08008b70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d0 	.word	0x200001d0
 8000148:	08008b70 	.word	0x08008b70

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b3d      	ldr	r3, [pc, #244]	@ (8000268 <MX_GPIO_Init+0x10c>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a3c      	ldr	r2, [pc, #240]	@ (8000268 <MX_GPIO_Init+0x10c>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b3a      	ldr	r3, [pc, #232]	@ (8000268 <MX_GPIO_Init+0x10c>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b37      	ldr	r3, [pc, #220]	@ (8000268 <MX_GPIO_Init+0x10c>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a36      	ldr	r2, [pc, #216]	@ (8000268 <MX_GPIO_Init+0x10c>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b34      	ldr	r3, [pc, #208]	@ (8000268 <MX_GPIO_Init+0x10c>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a0:	4b31      	ldr	r3, [pc, #196]	@ (8000268 <MX_GPIO_Init+0x10c>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a30      	ldr	r2, [pc, #192]	@ (8000268 <MX_GPIO_Init+0x10c>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b2e      	ldr	r3, [pc, #184]	@ (8000268 <MX_GPIO_Init+0x10c>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0304 	and.w	r3, r3, #4
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000268 <MX_GPIO_Init+0x10c>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a2a      	ldr	r2, [pc, #168]	@ (8000268 <MX_GPIO_Init+0x10c>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b28      	ldr	r3, [pc, #160]	@ (8000268 <MX_GPIO_Init+0x10c>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0308 	and.w	r3, r3, #8
 80001cc:	603b      	str	r3, [r7, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	2110      	movs	r1, #16
 80001d4:	4825      	ldr	r0, [pc, #148]	@ (800026c <MX_GPIO_Init+0x110>)
 80001d6:	f000 ff75 	bl	80010c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80001da:	2200      	movs	r2, #0
 80001dc:	2101      	movs	r1, #1
 80001de:	4824      	ldr	r0, [pc, #144]	@ (8000270 <MX_GPIO_Init+0x114>)
 80001e0:	f000 ff70 	bl	80010c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80001e4:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80001e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80001ea:	2303      	movs	r3, #3
 80001ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001ee:	f107 0310 	add.w	r3, r7, #16
 80001f2:	4619      	mov	r1, r3
 80001f4:	481f      	ldr	r0, [pc, #124]	@ (8000274 <MX_GPIO_Init+0x118>)
 80001f6:	f000 fde1 	bl	8000dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80001fa:	f248 730f 	movw	r3, #34575	@ 0x870f
 80001fe:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000200:	2303      	movs	r3, #3
 8000202:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000204:	f107 0310 	add.w	r3, r7, #16
 8000208:	4619      	mov	r1, r3
 800020a:	4818      	ldr	r0, [pc, #96]	@ (800026c <MX_GPIO_Init+0x110>)
 800020c:	f000 fdd6 	bl	8000dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000210:	2310      	movs	r3, #16
 8000212:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000214:	2301      	movs	r3, #1
 8000216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000218:	2300      	movs	r3, #0
 800021a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800021c:	2302      	movs	r3, #2
 800021e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	4811      	ldr	r0, [pc, #68]	@ (800026c <MX_GPIO_Init+0x110>)
 8000228:	f000 fdc8 	bl	8000dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800022c:	2301      	movs	r3, #1
 800022e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000230:	2301      	movs	r3, #1
 8000232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000234:	2300      	movs	r3, #0
 8000236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000238:	2302      	movs	r3, #2
 800023a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800023c:	f107 0310 	add.w	r3, r7, #16
 8000240:	4619      	mov	r1, r3
 8000242:	480b      	ldr	r0, [pc, #44]	@ (8000270 <MX_GPIO_Init+0x114>)
 8000244:	f000 fdba 	bl	8000dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8000248:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800024c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800024e:	2303      	movs	r3, #3
 8000250:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000252:	f107 0310 	add.w	r3, r7, #16
 8000256:	4619      	mov	r1, r3
 8000258:	4805      	ldr	r0, [pc, #20]	@ (8000270 <MX_GPIO_Init+0x114>)
 800025a:	f000 fdaf 	bl	8000dbc <HAL_GPIO_Init>

}
 800025e:	bf00      	nop
 8000260:	3720      	adds	r7, #32
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	40021000 	.word	0x40021000
 800026c:	40010800 	.word	0x40010800
 8000270:	40010c00 	.word	0x40010c00
 8000274:	40011000 	.word	0x40011000

08000278 <main>:
uint8_t status;
uint8_t str[MAX_LEN];  // UID 저장
uint8_t uidSize;

int main(void)
{
 8000278:	b590      	push	{r4, r7, lr}
 800027a:	b08f      	sub	sp, #60	@ 0x3c
 800027c:	af04      	add	r7, sp, #16
    HAL_Init();
 800027e:	f000 fc09 	bl	8000a94 <HAL_Init>
    SystemClock_Config();  // 시스템 클럭 설정 (CubeMX에서 자동 생성)
 8000282:	f000 f84f 	bl	8000324 <SystemClock_Config>
    MX_GPIO_Init();        // GPIO 초기화
 8000286:	f7ff ff69 	bl	800015c <MX_GPIO_Init>
    MX_SPI1_Init();        // SPI1 초기화 (RC522와 연결된 SPI)
 800028a:	f000 fab9 	bl	8000800 <MX_SPI1_Init>
    MX_USB_DEVICE_Init();
 800028e:	f007 fb0f 	bl	80078b0 <MX_USB_DEVICE_Init>
    MFRC522_Init();          // RC522 초기화
 8000292:	f000 f95b 	bl	800054c <MFRC522_Init>
    uint8_t uid[5];              // 현재 UID
    char uid_buf[32];            // UID 문자열 저장용

    while (1)
    {
    	status = MFRC522_Request(PICC_REQIDL, str);
 8000296:	4920      	ldr	r1, [pc, #128]	@ (8000318 <main+0xa0>)
 8000298:	2026      	movs	r0, #38	@ 0x26
 800029a:	f000 fa4e 	bl	800073a <MFRC522_Request>
 800029e:	4603      	mov	r3, r0
 80002a0:	461a      	mov	r2, r3
 80002a2:	4b1e      	ldr	r3, [pc, #120]	@ (800031c <main+0xa4>)
 80002a4:	701a      	strb	r2, [r3, #0]
    	if (status != MI_OK) {
 80002a6:	4b1d      	ldr	r3, [pc, #116]	@ (800031c <main+0xa4>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d003      	beq.n	80002b6 <main+0x3e>
    		HAL_Delay(50); // 카드가 없으면 딜레이 후 계속
 80002ae:	2032      	movs	r0, #50	@ 0x32
 80002b0:	f000 fc52 	bl	8000b58 <HAL_Delay>
    		continue;
 80002b4:	e02e      	b.n	8000314 <main+0x9c>
    	}
    	status = MFRC522_Anticoll(str);
 80002b6:	4818      	ldr	r0, [pc, #96]	@ (8000318 <main+0xa0>)
 80002b8:	f000 fa64 	bl	8000784 <MFRC522_Anticoll>
 80002bc:	4603      	mov	r3, r0
 80002be:	461a      	mov	r2, r3
 80002c0:	4b16      	ldr	r3, [pc, #88]	@ (800031c <main+0xa4>)
 80002c2:	701a      	strb	r2, [r3, #0]
    	if (status == MI_OK) {
 80002c4:	4b15      	ldr	r3, [pc, #84]	@ (800031c <main+0xa4>)
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d11f      	bne.n	800030c <main+0x94>
    		memcpy(uid, str, 4); // UID 복사
 80002cc:	4b12      	ldr	r3, [pc, #72]	@ (8000318 <main+0xa0>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	623b      	str	r3, [r7, #32]
    		// UID 문자열로 변환
    		snprintf(uid_buf, sizeof(uid_buf), "%02X%02X%02X%02X\r\n",  uid[0], uid[1], uid[2], uid[3]);
 80002d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80002d6:	461c      	mov	r4, r3
 80002d8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80002dc:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80002e0:	f897 1023 	ldrb.w	r1, [r7, #35]	@ 0x23
 80002e4:	4638      	mov	r0, r7
 80002e6:	9102      	str	r1, [sp, #8]
 80002e8:	9201      	str	r2, [sp, #4]
 80002ea:	9300      	str	r3, [sp, #0]
 80002ec:	4623      	mov	r3, r4
 80002ee:	4a0c      	ldr	r2, [pc, #48]	@ (8000320 <main+0xa8>)
 80002f0:	2120      	movs	r1, #32
 80002f2:	f007 ff79 	bl	80081e8 <sniprintf>
    		// USB CDC 전송
    		CDC_Transmit_FS((uint8_t*)uid_buf, strlen(uid_buf));
 80002f6:	463b      	mov	r3, r7
 80002f8:	4618      	mov	r0, r3
 80002fa:	f7ff ff27 	bl	800014c <strlen>
 80002fe:	4603      	mov	r3, r0
 8000300:	b29a      	uxth	r2, r3
 8000302:	463b      	mov	r3, r7
 8000304:	4611      	mov	r1, r2
 8000306:	4618      	mov	r0, r3
 8000308:	f007 fb90 	bl	8007a2c <CDC_Transmit_FS>
        }
        HAL_Delay(1000); // 폴링 주기
 800030c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000310:	f000 fc22 	bl	8000b58 <HAL_Delay>
    	status = MFRC522_Request(PICC_REQIDL, str);
 8000314:	e7bf      	b.n	8000296 <main+0x1e>
 8000316:	bf00      	nop
 8000318:	200001ec 	.word	0x200001ec
 800031c:	200001e8 	.word	0x200001e8
 8000320:	08008b88 	.word	0x08008b88

08000324 <SystemClock_Config>:
    }
}
void SystemClock_Config(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b094      	sub	sp, #80	@ 0x50
 8000328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800032e:	2228      	movs	r2, #40	@ 0x28
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f007 ff8e 	bl	8008254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000338:	f107 0314 	add.w	r3, r7, #20
 800033c:	2200      	movs	r2, #0
 800033e:	601a      	str	r2, [r3, #0]
 8000340:	605a      	str	r2, [r3, #4]
 8000342:	609a      	str	r2, [r3, #8]
 8000344:	60da      	str	r2, [r3, #12]
 8000346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000354:	2301      	movs	r3, #1
 8000356:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000358:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800035c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800035e:	2300      	movs	r3, #0
 8000360:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000362:	2301      	movs	r3, #1
 8000364:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000366:	2302      	movs	r3, #2
 8000368:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800036a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800036e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000370:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000374:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000376:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800037a:	4618      	mov	r0, r3
 800037c:	f002 fc1a 	bl	8002bb4 <HAL_RCC_OscConfig>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000386:	f000 f827 	bl	80003d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038a:	230f      	movs	r3, #15
 800038c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800038e:	2302      	movs	r3, #2
 8000390:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000396:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800039a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003a0:	f107 0314 	add.w	r3, r7, #20
 80003a4:	2102      	movs	r1, #2
 80003a6:	4618      	mov	r0, r3
 80003a8:	f002 fe86 	bl	80030b8 <HAL_RCC_ClockConfig>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80003b2:	f000 f811 	bl	80003d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80003b6:	2310      	movs	r3, #16
 80003b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80003ba:	2300      	movs	r3, #0
 80003bc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	4618      	mov	r0, r3
 80003c2:	f002 ffd5 	bl	8003370 <HAL_RCCEx_PeriphCLKConfig>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80003cc:	f000 f804 	bl	80003d8 <Error_Handler>
  }
}
 80003d0:	bf00      	nop
 80003d2:	3750      	adds	r7, #80	@ 0x50
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003dc:	b672      	cpsid	i
}
 80003de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e0:	bf00      	nop
 80003e2:	e7fd      	b.n	80003e0 <Error_Handler+0x8>

080003e4 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b086      	sub	sp, #24
 80003e8:	af02      	add	r7, sp, #8
 80003ea:	4603      	mov	r3, r0
 80003ec:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 80003ee:	f107 020f 	add.w	r2, r7, #15
 80003f2:	1df9      	adds	r1, r7, #7
 80003f4:	2364      	movs	r3, #100	@ 0x64
 80003f6:	9300      	str	r3, [sp, #0]
 80003f8:	2301      	movs	r3, #1
 80003fa:	4804      	ldr	r0, [pc, #16]	@ (800040c <RC522_SPI_Transfer+0x28>)
 80003fc:	f003 f8f2 	bl	80035e4 <HAL_SPI_TransmitReceive>

	return rx_data;
 8000400:	7bfb      	ldrb	r3, [r7, #15]
}
 8000402:	4618      	mov	r0, r3
 8000404:	3710      	adds	r7, #16
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	200001fc 	.word	0x200001fc

08000410 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	460a      	mov	r2, r1
 800041a:	71fb      	strb	r3, [r7, #7]
 800041c:	4613      	mov	r3, r2
 800041e:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	2110      	movs	r1, #16
 8000424:	480c      	ldr	r0, [pc, #48]	@ (8000458 <Write_MFRC522+0x48>)
 8000426:	f000 fe4d 	bl	80010c4 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	005b      	lsls	r3, r3, #1
 800042e:	b2db      	uxtb	r3, r3
 8000430:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8000434:	b2db      	uxtb	r3, r3
 8000436:	4618      	mov	r0, r3
 8000438:	f7ff ffd4 	bl	80003e4 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 800043c:	79bb      	ldrb	r3, [r7, #6]
 800043e:	4618      	mov	r0, r3
 8000440:	f7ff ffd0 	bl	80003e4 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000444:	2201      	movs	r2, #1
 8000446:	2110      	movs	r1, #16
 8000448:	4803      	ldr	r0, [pc, #12]	@ (8000458 <Write_MFRC522+0x48>)
 800044a:	f000 fe3b 	bl	80010c4 <HAL_GPIO_WritePin>
}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	40010800 	.word	0x40010800

0800045c <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af00      	add	r7, sp, #0
 8000462:	4603      	mov	r3, r0
 8000464:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000466:	2200      	movs	r2, #0
 8000468:	2110      	movs	r1, #16
 800046a:	4810      	ldr	r0, [pc, #64]	@ (80004ac <Read_MFRC522+0x50>)
 800046c:	f000 fe2a 	bl	80010c4 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 8000470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000474:	005b      	lsls	r3, r3, #1
 8000476:	b25b      	sxtb	r3, r3
 8000478:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800047c:	b25b      	sxtb	r3, r3
 800047e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000482:	b25b      	sxtb	r3, r3
 8000484:	b2db      	uxtb	r3, r3
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff ffac 	bl	80003e4 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 800048c:	2000      	movs	r0, #0
 800048e:	f7ff ffa9 	bl	80003e4 <RC522_SPI_Transfer>
 8000492:	4603      	mov	r3, r0
 8000494:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000496:	2201      	movs	r2, #1
 8000498:	2110      	movs	r1, #16
 800049a:	4804      	ldr	r0, [pc, #16]	@ (80004ac <Read_MFRC522+0x50>)
 800049c:	f000 fe12 	bl	80010c4 <HAL_GPIO_WritePin>

	return val;
 80004a0:	7bfb      	ldrb	r3, [r7, #15]

}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3710      	adds	r7, #16
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	40010800 	.word	0x40010800

080004b0 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b084      	sub	sp, #16
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	460a      	mov	r2, r1
 80004ba:	71fb      	strb	r3, [r7, #7]
 80004bc:	4613      	mov	r3, r2
 80004be:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	4618      	mov	r0, r3
 80004c4:	f7ff ffca 	bl	800045c <Read_MFRC522>
 80004c8:	4603      	mov	r3, r0
 80004ca:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80004cc:	7bfa      	ldrb	r2, [r7, #15]
 80004ce:	79bb      	ldrb	r3, [r7, #6]
 80004d0:	4313      	orrs	r3, r2
 80004d2:	b2da      	uxtb	r2, r3
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	4611      	mov	r1, r2
 80004d8:	4618      	mov	r0, r3
 80004da:	f7ff ff99 	bl	8000410 <Write_MFRC522>
}
 80004de:	bf00      	nop
 80004e0:	3710      	adds	r7, #16
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}

080004e6 <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	b084      	sub	sp, #16
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	4603      	mov	r3, r0
 80004ee:	460a      	mov	r2, r1
 80004f0:	71fb      	strb	r3, [r7, #7]
 80004f2:	4613      	mov	r3, r2
 80004f4:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	4618      	mov	r0, r3
 80004fa:	f7ff ffaf 	bl	800045c <Read_MFRC522>
 80004fe:	4603      	mov	r3, r0
 8000500:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000502:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000506:	43db      	mvns	r3, r3
 8000508:	b25a      	sxtb	r2, r3
 800050a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800050e:	4013      	ands	r3, r2
 8000510:	b25b      	sxtb	r3, r3
 8000512:	b2da      	uxtb	r2, r3
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	4611      	mov	r1, r2
 8000518:	4618      	mov	r0, r3
 800051a:	f7ff ff79 	bl	8000410 <Write_MFRC522>
}
 800051e:	bf00      	nop
 8000520:	3710      	adds	r7, #16
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 800052a:	2014      	movs	r0, #20
 800052c:	f7ff ff96 	bl	800045c <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8000530:	2103      	movs	r1, #3
 8000532:	2014      	movs	r0, #20
 8000534:	f7ff ffbc 	bl	80004b0 <SetBitMask>
}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}

0800053c <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8000540:	210f      	movs	r1, #15
 8000542:	2001      	movs	r0, #1
 8000544:	f7ff ff64 	bl	8000410 <Write_MFRC522>
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}

0800054c <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000550:	2201      	movs	r2, #1
 8000552:	2110      	movs	r1, #16
 8000554:	4812      	ldr	r0, [pc, #72]	@ (80005a0 <MFRC522_Init+0x54>)
 8000556:	f000 fdb5 	bl	80010c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 800055a:	2201      	movs	r2, #1
 800055c:	2101      	movs	r1, #1
 800055e:	4811      	ldr	r0, [pc, #68]	@ (80005a4 <MFRC522_Init+0x58>)
 8000560:	f000 fdb0 	bl	80010c4 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8000564:	f7ff ffea 	bl	800053c <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8000568:	218d      	movs	r1, #141	@ 0x8d
 800056a:	202a      	movs	r0, #42	@ 0x2a
 800056c:	f7ff ff50 	bl	8000410 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8000570:	213e      	movs	r1, #62	@ 0x3e
 8000572:	202b      	movs	r0, #43	@ 0x2b
 8000574:	f7ff ff4c 	bl	8000410 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 8000578:	211e      	movs	r1, #30
 800057a:	202d      	movs	r0, #45	@ 0x2d
 800057c:	f7ff ff48 	bl	8000410 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8000580:	2100      	movs	r1, #0
 8000582:	202c      	movs	r0, #44	@ 0x2c
 8000584:	f7ff ff44 	bl	8000410 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8000588:	2140      	movs	r1, #64	@ 0x40
 800058a:	2015      	movs	r0, #21
 800058c:	f7ff ff40 	bl	8000410 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8000590:	213d      	movs	r1, #61	@ 0x3d
 8000592:	2011      	movs	r0, #17
 8000594:	f7ff ff3c 	bl	8000410 <Write_MFRC522>

	AntennaOn();
 8000598:	f7ff ffc5 	bl	8000526 <AntennaOn>
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40010800 	.word	0x40010800
 80005a4:	40010c00 	.word	0x40010c00

080005a8 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 80005a8:	b590      	push	{r4, r7, lr}
 80005aa:	b089      	sub	sp, #36	@ 0x24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60b9      	str	r1, [r7, #8]
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	4603      	mov	r3, r0
 80005b4:	73fb      	strb	r3, [r7, #15]
 80005b6:	4613      	mov	r3, r2
 80005b8:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 80005ba:	2302      	movs	r3, #2
 80005bc:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 80005be:	2300      	movs	r3, #0
 80005c0:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 80005c2:	2300      	movs	r3, #0
 80005c4:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
 80005c8:	2b0c      	cmp	r3, #12
 80005ca:	d006      	beq.n	80005da <MFRC522_ToCard+0x32>
 80005cc:	2b0e      	cmp	r3, #14
 80005ce:	d109      	bne.n	80005e4 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 80005d0:	2312      	movs	r3, #18
 80005d2:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 80005d4:	2310      	movs	r3, #16
 80005d6:	777b      	strb	r3, [r7, #29]
			break;
 80005d8:	e005      	b.n	80005e6 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 80005da:	2377      	movs	r3, #119	@ 0x77
 80005dc:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 80005de:	2330      	movs	r3, #48	@ 0x30
 80005e0:	777b      	strb	r3, [r7, #29]
			break;
 80005e2:	e000      	b.n	80005e6 <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 80005e4:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 80005e6:	7fbb      	ldrb	r3, [r7, #30]
 80005e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	4619      	mov	r1, r3
 80005f0:	2002      	movs	r0, #2
 80005f2:	f7ff ff0d 	bl	8000410 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 80005f6:	2180      	movs	r1, #128	@ 0x80
 80005f8:	2004      	movs	r0, #4
 80005fa:	f7ff ff74 	bl	80004e6 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 80005fe:	2180      	movs	r1, #128	@ 0x80
 8000600:	200a      	movs	r0, #10
 8000602:	f7ff ff55 	bl	80004b0 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8000606:	2100      	movs	r1, #0
 8000608:	2001      	movs	r0, #1
 800060a:	f7ff ff01 	bl	8000410 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 800060e:	2300      	movs	r3, #0
 8000610:	61bb      	str	r3, [r7, #24]
 8000612:	e00a      	b.n	800062a <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 8000614:	68ba      	ldr	r2, [r7, #8]
 8000616:	69bb      	ldr	r3, [r7, #24]
 8000618:	4413      	add	r3, r2
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4619      	mov	r1, r3
 800061e:	2009      	movs	r0, #9
 8000620:	f7ff fef6 	bl	8000410 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8000624:	69bb      	ldr	r3, [r7, #24]
 8000626:	3301      	adds	r3, #1
 8000628:	61bb      	str	r3, [r7, #24]
 800062a:	7bbb      	ldrb	r3, [r7, #14]
 800062c:	69ba      	ldr	r2, [r7, #24]
 800062e:	429a      	cmp	r2, r3
 8000630:	d3f0      	bcc.n	8000614 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	4619      	mov	r1, r3
 8000636:	2001      	movs	r0, #1
 8000638:	f7ff feea 	bl	8000410 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	2b0c      	cmp	r3, #12
 8000640:	d103      	bne.n	800064a <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8000642:	2180      	movs	r1, #128	@ 0x80
 8000644:	200d      	movs	r0, #13
 8000646:	f7ff ff33 	bl	80004b0 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 800064a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800064e:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8000650:	2004      	movs	r0, #4
 8000652:	f7ff ff03 	bl	800045c <Read_MFRC522>
 8000656:	4603      	mov	r3, r0
 8000658:	773b      	strb	r3, [r7, #28]
        i--;
 800065a:	69bb      	ldr	r3, [r7, #24]
 800065c:	3b01      	subs	r3, #1
 800065e:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000660:	69bb      	ldr	r3, [r7, #24]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d00a      	beq.n	800067c <MFRC522_ToCard+0xd4>
 8000666:	7f3b      	ldrb	r3, [r7, #28]
 8000668:	f003 0301 	and.w	r3, r3, #1
 800066c:	2b00      	cmp	r3, #0
 800066e:	d105      	bne.n	800067c <MFRC522_ToCard+0xd4>
 8000670:	7f3a      	ldrb	r2, [r7, #28]
 8000672:	7f7b      	ldrb	r3, [r7, #29]
 8000674:	4013      	ands	r3, r2
 8000676:	b2db      	uxtb	r3, r3
 8000678:	2b00      	cmp	r3, #0
 800067a:	d0e9      	beq.n	8000650 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 800067c:	2180      	movs	r1, #128	@ 0x80
 800067e:	200d      	movs	r0, #13
 8000680:	f7ff ff31 	bl	80004e6 <ClearBitMask>

    if (i != 0)
 8000684:	69bb      	ldr	r3, [r7, #24]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d052      	beq.n	8000730 <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 800068a:	2006      	movs	r0, #6
 800068c:	f7ff fee6 	bl	800045c <Read_MFRC522>
 8000690:	4603      	mov	r3, r0
 8000692:	f003 031b 	and.w	r3, r3, #27
 8000696:	2b00      	cmp	r3, #0
 8000698:	d148      	bne.n	800072c <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 800069a:	2300      	movs	r3, #0
 800069c:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 800069e:	7f3a      	ldrb	r2, [r7, #28]
 80006a0:	7fbb      	ldrb	r3, [r7, #30]
 80006a2:	4013      	ands	r3, r2
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 80006ae:	2301      	movs	r3, #1
 80006b0:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	2b0c      	cmp	r3, #12
 80006b6:	d13b      	bne.n	8000730 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 80006b8:	200a      	movs	r0, #10
 80006ba:	f7ff fecf 	bl	800045c <Read_MFRC522>
 80006be:	4603      	mov	r3, r0
 80006c0:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 80006c2:	200c      	movs	r0, #12
 80006c4:	f7ff feca 	bl	800045c <Read_MFRC522>
 80006c8:	4603      	mov	r3, r0
 80006ca:	f003 0307 	and.w	r3, r3, #7
 80006ce:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 80006d0:	7dfb      	ldrb	r3, [r7, #23]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d008      	beq.n	80006e8 <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 80006d6:	7f3b      	ldrb	r3, [r7, #28]
 80006d8:	3b01      	subs	r3, #1
 80006da:	00da      	lsls	r2, r3, #3
 80006dc:	7dfb      	ldrb	r3, [r7, #23]
 80006de:	4413      	add	r3, r2
 80006e0:	461a      	mov	r2, r3
 80006e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	e004      	b.n	80006f2 <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 80006e8:	7f3b      	ldrb	r3, [r7, #28]
 80006ea:	00db      	lsls	r3, r3, #3
 80006ec:	461a      	mov	r2, r3
 80006ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006f0:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 80006f2:	7f3b      	ldrb	r3, [r7, #28]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d101      	bne.n	80006fc <MFRC522_ToCard+0x154>
                {
					n = 1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 80006fc:	7f3b      	ldrb	r3, [r7, #28]
 80006fe:	2b10      	cmp	r3, #16
 8000700:	d901      	bls.n	8000706 <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 8000702:	2310      	movs	r3, #16
 8000704:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 8000706:	2300      	movs	r3, #0
 8000708:	61bb      	str	r3, [r7, #24]
 800070a:	e00a      	b.n	8000722 <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	69bb      	ldr	r3, [r7, #24]
 8000710:	18d4      	adds	r4, r2, r3
 8000712:	2009      	movs	r0, #9
 8000714:	f7ff fea2 	bl	800045c <Read_MFRC522>
 8000718:	4603      	mov	r3, r0
 800071a:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	3301      	adds	r3, #1
 8000720:	61bb      	str	r3, [r7, #24]
 8000722:	7f3b      	ldrb	r3, [r7, #28]
 8000724:	69ba      	ldr	r2, [r7, #24]
 8000726:	429a      	cmp	r2, r3
 8000728:	d3f0      	bcc.n	800070c <MFRC522_ToCard+0x164>
 800072a:	e001      	b.n	8000730 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 800072c:	2302      	movs	r3, #2
 800072e:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 8000730:	7ffb      	ldrb	r3, [r7, #31]
}
 8000732:	4618      	mov	r0, r3
 8000734:	3724      	adds	r7, #36	@ 0x24
 8000736:	46bd      	mov	sp, r7
 8000738:	bd90      	pop	{r4, r7, pc}

0800073a <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	b086      	sub	sp, #24
 800073e:	af02      	add	r7, sp, #8
 8000740:	4603      	mov	r3, r0
 8000742:	6039      	str	r1, [r7, #0]
 8000744:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 8000746:	2107      	movs	r1, #7
 8000748:	200d      	movs	r0, #13
 800074a:	f7ff fe61 	bl	8000410 <Write_MFRC522>

	TagType[0] = reqMode;
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	79fa      	ldrb	r2, [r7, #7]
 8000752:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000754:	f107 0308 	add.w	r3, r7, #8
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	2201      	movs	r2, #1
 800075e:	6839      	ldr	r1, [r7, #0]
 8000760:	200c      	movs	r0, #12
 8000762:	f7ff ff21 	bl	80005a8 <MFRC522_ToCard>
 8000766:	4603      	mov	r3, r0
 8000768:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d102      	bne.n	8000776 <MFRC522_Request+0x3c>
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	2b10      	cmp	r3, #16
 8000774:	d001      	beq.n	800077a <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 8000776:	2302      	movs	r3, #2
 8000778:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800077a:	7bfb      	ldrb	r3, [r7, #15]
}
 800077c:	4618      	mov	r0, r3
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af02      	add	r7, sp, #8
 800078a:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 800078c:	2300      	movs	r3, #0
 800078e:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8000790:	2100      	movs	r1, #0
 8000792:	200d      	movs	r0, #13
 8000794:	f7ff fe3c 	bl	8000410 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2293      	movs	r2, #147	@ 0x93
 800079c:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	3301      	adds	r3, #1
 80007a2:	2220      	movs	r2, #32
 80007a4:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80007a6:	f107 0308 	add.w	r3, r7, #8
 80007aa:	9300      	str	r3, [sp, #0]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2202      	movs	r2, #2
 80007b0:	6879      	ldr	r1, [r7, #4]
 80007b2:	200c      	movs	r0, #12
 80007b4:	f7ff fef8 	bl	80005a8 <MFRC522_ToCard>
 80007b8:	4603      	mov	r3, r0
 80007ba:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d118      	bne.n	80007f4 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 80007c2:	2300      	movs	r3, #0
 80007c4:	73bb      	strb	r3, [r7, #14]
 80007c6:	e009      	b.n	80007dc <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 80007c8:	7bbb      	ldrb	r3, [r7, #14]
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	4413      	add	r3, r2
 80007ce:	781a      	ldrb	r2, [r3, #0]
 80007d0:	7b7b      	ldrb	r3, [r7, #13]
 80007d2:	4053      	eors	r3, r2
 80007d4:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 80007d6:	7bbb      	ldrb	r3, [r7, #14]
 80007d8:	3301      	adds	r3, #1
 80007da:	73bb      	strb	r3, [r7, #14]
 80007dc:	7bbb      	ldrb	r3, [r7, #14]
 80007de:	2b03      	cmp	r3, #3
 80007e0:	d9f2      	bls.n	80007c8 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 80007e2:	7bbb      	ldrb	r3, [r7, #14]
 80007e4:	687a      	ldr	r2, [r7, #4]
 80007e6:	4413      	add	r3, r2
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	7b7a      	ldrb	r2, [r7, #13]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d001      	beq.n	80007f4 <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 80007f0:	2302      	movs	r3, #2
 80007f2:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 80007f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000804:	4b17      	ldr	r3, [pc, #92]	@ (8000864 <MX_SPI1_Init+0x64>)
 8000806:	4a18      	ldr	r2, [pc, #96]	@ (8000868 <MX_SPI1_Init+0x68>)
 8000808:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800080a:	4b16      	ldr	r3, [pc, #88]	@ (8000864 <MX_SPI1_Init+0x64>)
 800080c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000810:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000812:	4b14      	ldr	r3, [pc, #80]	@ (8000864 <MX_SPI1_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000818:	4b12      	ldr	r3, [pc, #72]	@ (8000864 <MX_SPI1_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800081e:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <MX_SPI1_Init+0x64>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000824:	4b0f      	ldr	r3, [pc, #60]	@ (8000864 <MX_SPI1_Init+0x64>)
 8000826:	2200      	movs	r2, #0
 8000828:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800082a:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <MX_SPI1_Init+0x64>)
 800082c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000830:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000832:	4b0c      	ldr	r3, [pc, #48]	@ (8000864 <MX_SPI1_Init+0x64>)
 8000834:	2218      	movs	r2, #24
 8000836:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000838:	4b0a      	ldr	r3, [pc, #40]	@ (8000864 <MX_SPI1_Init+0x64>)
 800083a:	2200      	movs	r2, #0
 800083c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800083e:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <MX_SPI1_Init+0x64>)
 8000840:	2200      	movs	r2, #0
 8000842:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000844:	4b07      	ldr	r3, [pc, #28]	@ (8000864 <MX_SPI1_Init+0x64>)
 8000846:	2200      	movs	r2, #0
 8000848:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800084a:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <MX_SPI1_Init+0x64>)
 800084c:	220a      	movs	r2, #10
 800084e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000850:	4804      	ldr	r0, [pc, #16]	@ (8000864 <MX_SPI1_Init+0x64>)
 8000852:	f002 fe43 	bl	80034dc <HAL_SPI_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800085c:	f7ff fdbc 	bl	80003d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	200001fc 	.word	0x200001fc
 8000868:	40013000 	.word	0x40013000

0800086c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 0310 	add.w	r3, r7, #16
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a1b      	ldr	r2, [pc, #108]	@ (80008f4 <HAL_SPI_MspInit+0x88>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d12f      	bne.n	80008ec <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800088c:	4b1a      	ldr	r3, [pc, #104]	@ (80008f8 <HAL_SPI_MspInit+0x8c>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	4a19      	ldr	r2, [pc, #100]	@ (80008f8 <HAL_SPI_MspInit+0x8c>)
 8000892:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	4b17      	ldr	r3, [pc, #92]	@ (80008f8 <HAL_SPI_MspInit+0x8c>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a4:	4b14      	ldr	r3, [pc, #80]	@ (80008f8 <HAL_SPI_MspInit+0x8c>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	4a13      	ldr	r2, [pc, #76]	@ (80008f8 <HAL_SPI_MspInit+0x8c>)
 80008aa:	f043 0304 	orr.w	r3, r3, #4
 80008ae:	6193      	str	r3, [r2, #24]
 80008b0:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <HAL_SPI_MspInit+0x8c>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	f003 0304 	and.w	r3, r3, #4
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80008bc:	23a0      	movs	r3, #160	@ 0xa0
 80008be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c4:	2303      	movs	r3, #3
 80008c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	f107 0310 	add.w	r3, r7, #16
 80008cc:	4619      	mov	r1, r3
 80008ce:	480b      	ldr	r0, [pc, #44]	@ (80008fc <HAL_SPI_MspInit+0x90>)
 80008d0:	f000 fa74 	bl	8000dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008d4:	2340      	movs	r3, #64	@ 0x40
 80008d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	4619      	mov	r1, r3
 80008e6:	4805      	ldr	r0, [pc, #20]	@ (80008fc <HAL_SPI_MspInit+0x90>)
 80008e8:	f000 fa68 	bl	8000dbc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80008ec:	bf00      	nop
 80008ee:	3720      	adds	r7, #32
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40013000 	.word	0x40013000
 80008f8:	40021000 	.word	0x40021000
 80008fc:	40010800 	.word	0x40010800

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000906:	4b15      	ldr	r3, [pc, #84]	@ (800095c <HAL_MspInit+0x5c>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	4a14      	ldr	r2, [pc, #80]	@ (800095c <HAL_MspInit+0x5c>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6193      	str	r3, [r2, #24]
 8000912:	4b12      	ldr	r3, [pc, #72]	@ (800095c <HAL_MspInit+0x5c>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <HAL_MspInit+0x5c>)
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	4a0e      	ldr	r2, [pc, #56]	@ (800095c <HAL_MspInit+0x5c>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000928:	61d3      	str	r3, [r2, #28]
 800092a:	4b0c      	ldr	r3, [pc, #48]	@ (800095c <HAL_MspInit+0x5c>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000936:	4b0a      	ldr	r3, [pc, #40]	@ (8000960 <HAL_MspInit+0x60>)
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	4a04      	ldr	r2, [pc, #16]	@ (8000960 <HAL_MspInit+0x60>)
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	3714      	adds	r7, #20
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr
 800095c:	40021000 	.word	0x40021000
 8000960:	40010000 	.word	0x40010000

08000964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <NMI_Handler+0x4>

0800096c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <HardFault_Handler+0x4>

08000974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <MemManage_Handler+0x4>

0800097c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <BusFault_Handler+0x4>

08000984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <UsageFault_Handler+0x4>

0800098c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr

08000998 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr

080009a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr

080009b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b4:	f000 f8b4 	bl	8000b20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}

080009bc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80009c0:	4802      	ldr	r0, [pc, #8]	@ (80009cc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80009c2:	f000 fcb3 	bl	800132c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000f24 	.word	0x20000f24

080009d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009d8:	4a14      	ldr	r2, [pc, #80]	@ (8000a2c <_sbrk+0x5c>)
 80009da:	4b15      	ldr	r3, [pc, #84]	@ (8000a30 <_sbrk+0x60>)
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009e4:	4b13      	ldr	r3, [pc, #76]	@ (8000a34 <_sbrk+0x64>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d102      	bne.n	80009f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009ec:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <_sbrk+0x64>)
 80009ee:	4a12      	ldr	r2, [pc, #72]	@ (8000a38 <_sbrk+0x68>)
 80009f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009f2:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <_sbrk+0x64>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4413      	add	r3, r2
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d207      	bcs.n	8000a10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a00:	f007 fc30 	bl	8008264 <__errno>
 8000a04:	4603      	mov	r3, r0
 8000a06:	220c      	movs	r2, #12
 8000a08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0e:	e009      	b.n	8000a24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a10:	4b08      	ldr	r3, [pc, #32]	@ (8000a34 <_sbrk+0x64>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a16:	4b07      	ldr	r3, [pc, #28]	@ (8000a34 <_sbrk+0x64>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	4a05      	ldr	r2, [pc, #20]	@ (8000a34 <_sbrk+0x64>)
 8000a20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a22:	68fb      	ldr	r3, [r7, #12]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3718      	adds	r7, #24
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20005000 	.word	0x20005000
 8000a30:	00000400 	.word	0x00000400
 8000a34:	20000254 	.word	0x20000254
 8000a38:	20001568 	.word	0x20001568

08000a3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr

08000a48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a48:	f7ff fff8 	bl	8000a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a4c:	480b      	ldr	r0, [pc, #44]	@ (8000a7c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a4e:	490c      	ldr	r1, [pc, #48]	@ (8000a80 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a50:	4a0c      	ldr	r2, [pc, #48]	@ (8000a84 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a54:	e002      	b.n	8000a5c <LoopCopyDataInit>

08000a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5a:	3304      	adds	r3, #4

08000a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a60:	d3f9      	bcc.n	8000a56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a62:	4a09      	ldr	r2, [pc, #36]	@ (8000a88 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a64:	4c09      	ldr	r4, [pc, #36]	@ (8000a8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a68:	e001      	b.n	8000a6e <LoopFillZerobss>

08000a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a6c:	3204      	adds	r2, #4

08000a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a70:	d3fb      	bcc.n	8000a6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a72:	f007 fbfd 	bl	8008270 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a76:	f7ff fbff 	bl	8000278 <main>
  bx lr
 8000a7a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a80:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8000a84:	08008c4c 	.word	0x08008c4c
  ldr r2, =_sbss
 8000a88:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8000a8c:	20001564 	.word	0x20001564

08000a90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a90:	e7fe      	b.n	8000a90 <ADC1_2_IRQHandler>
	...

08000a94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a98:	4b08      	ldr	r3, [pc, #32]	@ (8000abc <HAL_Init+0x28>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a07      	ldr	r2, [pc, #28]	@ (8000abc <HAL_Init+0x28>)
 8000a9e:	f043 0310 	orr.w	r3, r3, #16
 8000aa2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa4:	2003      	movs	r0, #3
 8000aa6:	f000 f947 	bl	8000d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aaa:	200f      	movs	r0, #15
 8000aac:	f000 f808 	bl	8000ac0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab0:	f7ff ff26 	bl	8000900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40022000 	.word	0x40022000

08000ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac8:	4b12      	ldr	r3, [pc, #72]	@ (8000b14 <HAL_InitTick+0x54>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <HAL_InitTick+0x58>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 f95f 	bl	8000da2 <HAL_SYSTICK_Config>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e00e      	b.n	8000b0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2b0f      	cmp	r3, #15
 8000af2:	d80a      	bhi.n	8000b0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af4:	2200      	movs	r2, #0
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	f000 f927 	bl	8000d4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b00:	4a06      	ldr	r2, [pc, #24]	@ (8000b1c <HAL_InitTick+0x5c>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b06:	2300      	movs	r3, #0
 8000b08:	e000      	b.n	8000b0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000000 	.word	0x20000000
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	20000004 	.word	0x20000004

08000b20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b24:	4b05      	ldr	r3, [pc, #20]	@ (8000b3c <HAL_IncTick+0x1c>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b05      	ldr	r3, [pc, #20]	@ (8000b40 <HAL_IncTick+0x20>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4413      	add	r3, r2
 8000b30:	4a03      	ldr	r2, [pc, #12]	@ (8000b40 <HAL_IncTick+0x20>)
 8000b32:	6013      	str	r3, [r2, #0]
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	20000258 	.word	0x20000258

08000b44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return uwTick;
 8000b48:	4b02      	ldr	r3, [pc, #8]	@ (8000b54 <HAL_GetTick+0x10>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	20000258 	.word	0x20000258

08000b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b60:	f7ff fff0 	bl	8000b44 <HAL_GetTick>
 8000b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b70:	d005      	beq.n	8000b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b72:	4b0a      	ldr	r3, [pc, #40]	@ (8000b9c <HAL_Delay+0x44>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	461a      	mov	r2, r3
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b7e:	bf00      	nop
 8000b80:	f7ff ffe0 	bl	8000b44 <HAL_GetTick>
 8000b84:	4602      	mov	r2, r0
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d8f7      	bhi.n	8000b80 <HAL_Delay+0x28>
  {
  }
}
 8000b90:	bf00      	nop
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000008 	.word	0x20000008

08000ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd2:	4a04      	ldr	r2, [pc, #16]	@ (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	60d3      	str	r3, [r2, #12]
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bec:	4b04      	ldr	r3, [pc, #16]	@ (8000c00 <__NVIC_GetPriorityGrouping+0x18>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	0a1b      	lsrs	r3, r3, #8
 8000bf2:	f003 0307 	and.w	r3, r3, #7
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	db0b      	blt.n	8000c2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	f003 021f 	and.w	r2, r3, #31
 8000c1c:	4906      	ldr	r1, [pc, #24]	@ (8000c38 <__NVIC_EnableIRQ+0x34>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	095b      	lsrs	r3, r3, #5
 8000c24:	2001      	movs	r0, #1
 8000c26:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr
 8000c38:	e000e100 	.word	0xe000e100

08000c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	6039      	str	r1, [r7, #0]
 8000c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	db0a      	blt.n	8000c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	490c      	ldr	r1, [pc, #48]	@ (8000c88 <__NVIC_SetPriority+0x4c>)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	0112      	lsls	r2, r2, #4
 8000c5c:	b2d2      	uxtb	r2, r2
 8000c5e:	440b      	add	r3, r1
 8000c60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c64:	e00a      	b.n	8000c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4908      	ldr	r1, [pc, #32]	@ (8000c8c <__NVIC_SetPriority+0x50>)
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	f003 030f 	and.w	r3, r3, #15
 8000c72:	3b04      	subs	r3, #4
 8000c74:	0112      	lsls	r2, r2, #4
 8000c76:	b2d2      	uxtb	r2, r2
 8000c78:	440b      	add	r3, r1
 8000c7a:	761a      	strb	r2, [r3, #24]
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000e100 	.word	0xe000e100
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b089      	sub	sp, #36	@ 0x24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	f1c3 0307 	rsb	r3, r3, #7
 8000caa:	2b04      	cmp	r3, #4
 8000cac:	bf28      	it	cs
 8000cae:	2304      	movcs	r3, #4
 8000cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	3304      	adds	r3, #4
 8000cb6:	2b06      	cmp	r3, #6
 8000cb8:	d902      	bls.n	8000cc0 <NVIC_EncodePriority+0x30>
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3b03      	subs	r3, #3
 8000cbe:	e000      	b.n	8000cc2 <NVIC_EncodePriority+0x32>
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43da      	mvns	r2, r3
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	401a      	ands	r2, r3
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce2:	43d9      	mvns	r1, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce8:	4313      	orrs	r3, r2
         );
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3724      	adds	r7, #36	@ 0x24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr

08000cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d04:	d301      	bcc.n	8000d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d06:	2301      	movs	r3, #1
 8000d08:	e00f      	b.n	8000d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d34 <SysTick_Config+0x40>)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d12:	210f      	movs	r1, #15
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295
 8000d18:	f7ff ff90 	bl	8000c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d1c:	4b05      	ldr	r3, [pc, #20]	@ (8000d34 <SysTick_Config+0x40>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d22:	4b04      	ldr	r3, [pc, #16]	@ (8000d34 <SysTick_Config+0x40>)
 8000d24:	2207      	movs	r2, #7
 8000d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	e000e010 	.word	0xe000e010

08000d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f7ff ff2d 	bl	8000ba0 <__NVIC_SetPriorityGrouping>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b086      	sub	sp, #24
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	4603      	mov	r3, r0
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
 8000d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d60:	f7ff ff42 	bl	8000be8 <__NVIC_GetPriorityGrouping>
 8000d64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	68b9      	ldr	r1, [r7, #8]
 8000d6a:	6978      	ldr	r0, [r7, #20]
 8000d6c:	f7ff ff90 	bl	8000c90 <NVIC_EncodePriority>
 8000d70:	4602      	mov	r2, r0
 8000d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d76:	4611      	mov	r1, r2
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff ff5f 	bl	8000c3c <__NVIC_SetPriority>
}
 8000d7e:	bf00      	nop
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff35 	bl	8000c04 <__NVIC_EnableIRQ>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff ffa2 	bl	8000cf4 <SysTick_Config>
 8000db0:	4603      	mov	r3, r0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b08b      	sub	sp, #44	@ 0x2c
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dce:	e169      	b.n	80010a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	69fa      	ldr	r2, [r7, #28]
 8000de0:	4013      	ands	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	f040 8158 	bne.w	800109e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	4a9a      	ldr	r2, [pc, #616]	@ (800105c <HAL_GPIO_Init+0x2a0>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d05e      	beq.n	8000eb6 <HAL_GPIO_Init+0xfa>
 8000df8:	4a98      	ldr	r2, [pc, #608]	@ (800105c <HAL_GPIO_Init+0x2a0>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d875      	bhi.n	8000eea <HAL_GPIO_Init+0x12e>
 8000dfe:	4a98      	ldr	r2, [pc, #608]	@ (8001060 <HAL_GPIO_Init+0x2a4>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d058      	beq.n	8000eb6 <HAL_GPIO_Init+0xfa>
 8000e04:	4a96      	ldr	r2, [pc, #600]	@ (8001060 <HAL_GPIO_Init+0x2a4>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d86f      	bhi.n	8000eea <HAL_GPIO_Init+0x12e>
 8000e0a:	4a96      	ldr	r2, [pc, #600]	@ (8001064 <HAL_GPIO_Init+0x2a8>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d052      	beq.n	8000eb6 <HAL_GPIO_Init+0xfa>
 8000e10:	4a94      	ldr	r2, [pc, #592]	@ (8001064 <HAL_GPIO_Init+0x2a8>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d869      	bhi.n	8000eea <HAL_GPIO_Init+0x12e>
 8000e16:	4a94      	ldr	r2, [pc, #592]	@ (8001068 <HAL_GPIO_Init+0x2ac>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d04c      	beq.n	8000eb6 <HAL_GPIO_Init+0xfa>
 8000e1c:	4a92      	ldr	r2, [pc, #584]	@ (8001068 <HAL_GPIO_Init+0x2ac>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d863      	bhi.n	8000eea <HAL_GPIO_Init+0x12e>
 8000e22:	4a92      	ldr	r2, [pc, #584]	@ (800106c <HAL_GPIO_Init+0x2b0>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d046      	beq.n	8000eb6 <HAL_GPIO_Init+0xfa>
 8000e28:	4a90      	ldr	r2, [pc, #576]	@ (800106c <HAL_GPIO_Init+0x2b0>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d85d      	bhi.n	8000eea <HAL_GPIO_Init+0x12e>
 8000e2e:	2b12      	cmp	r3, #18
 8000e30:	d82a      	bhi.n	8000e88 <HAL_GPIO_Init+0xcc>
 8000e32:	2b12      	cmp	r3, #18
 8000e34:	d859      	bhi.n	8000eea <HAL_GPIO_Init+0x12e>
 8000e36:	a201      	add	r2, pc, #4	@ (adr r2, 8000e3c <HAL_GPIO_Init+0x80>)
 8000e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e3c:	08000eb7 	.word	0x08000eb7
 8000e40:	08000e91 	.word	0x08000e91
 8000e44:	08000ea3 	.word	0x08000ea3
 8000e48:	08000ee5 	.word	0x08000ee5
 8000e4c:	08000eeb 	.word	0x08000eeb
 8000e50:	08000eeb 	.word	0x08000eeb
 8000e54:	08000eeb 	.word	0x08000eeb
 8000e58:	08000eeb 	.word	0x08000eeb
 8000e5c:	08000eeb 	.word	0x08000eeb
 8000e60:	08000eeb 	.word	0x08000eeb
 8000e64:	08000eeb 	.word	0x08000eeb
 8000e68:	08000eeb 	.word	0x08000eeb
 8000e6c:	08000eeb 	.word	0x08000eeb
 8000e70:	08000eeb 	.word	0x08000eeb
 8000e74:	08000eeb 	.word	0x08000eeb
 8000e78:	08000eeb 	.word	0x08000eeb
 8000e7c:	08000eeb 	.word	0x08000eeb
 8000e80:	08000e99 	.word	0x08000e99
 8000e84:	08000ead 	.word	0x08000ead
 8000e88:	4a79      	ldr	r2, [pc, #484]	@ (8001070 <HAL_GPIO_Init+0x2b4>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d013      	beq.n	8000eb6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e8e:	e02c      	b.n	8000eea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	623b      	str	r3, [r7, #32]
          break;
 8000e96:	e029      	b.n	8000eec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	623b      	str	r3, [r7, #32]
          break;
 8000ea0:	e024      	b.n	8000eec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	3308      	adds	r3, #8
 8000ea8:	623b      	str	r3, [r7, #32]
          break;
 8000eaa:	e01f      	b.n	8000eec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	330c      	adds	r3, #12
 8000eb2:	623b      	str	r3, [r7, #32]
          break;
 8000eb4:	e01a      	b.n	8000eec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d102      	bne.n	8000ec4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	623b      	str	r3, [r7, #32]
          break;
 8000ec2:	e013      	b.n	8000eec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d105      	bne.n	8000ed8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ecc:	2308      	movs	r3, #8
 8000ece:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	69fa      	ldr	r2, [r7, #28]
 8000ed4:	611a      	str	r2, [r3, #16]
          break;
 8000ed6:	e009      	b.n	8000eec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ed8:	2308      	movs	r3, #8
 8000eda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	69fa      	ldr	r2, [r7, #28]
 8000ee0:	615a      	str	r2, [r3, #20]
          break;
 8000ee2:	e003      	b.n	8000eec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	623b      	str	r3, [r7, #32]
          break;
 8000ee8:	e000      	b.n	8000eec <HAL_GPIO_Init+0x130>
          break;
 8000eea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	2bff      	cmp	r3, #255	@ 0xff
 8000ef0:	d801      	bhi.n	8000ef6 <HAL_GPIO_Init+0x13a>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	e001      	b.n	8000efa <HAL_GPIO_Init+0x13e>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3304      	adds	r3, #4
 8000efa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	2bff      	cmp	r3, #255	@ 0xff
 8000f00:	d802      	bhi.n	8000f08 <HAL_GPIO_Init+0x14c>
 8000f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	e002      	b.n	8000f0e <HAL_GPIO_Init+0x152>
 8000f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f0a:	3b08      	subs	r3, #8
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	210f      	movs	r1, #15
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	401a      	ands	r2, r3
 8000f20:	6a39      	ldr	r1, [r7, #32]
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	fa01 f303 	lsl.w	r3, r1, r3
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f000 80b1 	beq.w	800109e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f3c:	4b4d      	ldr	r3, [pc, #308]	@ (8001074 <HAL_GPIO_Init+0x2b8>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	4a4c      	ldr	r2, [pc, #304]	@ (8001074 <HAL_GPIO_Init+0x2b8>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	6193      	str	r3, [r2, #24]
 8000f48:	4b4a      	ldr	r3, [pc, #296]	@ (8001074 <HAL_GPIO_Init+0x2b8>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f54:	4a48      	ldr	r2, [pc, #288]	@ (8001078 <HAL_GPIO_Init+0x2bc>)
 8000f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f58:	089b      	lsrs	r3, r3, #2
 8000f5a:	3302      	adds	r3, #2
 8000f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	220f      	movs	r2, #15
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	4013      	ands	r3, r2
 8000f76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a40      	ldr	r2, [pc, #256]	@ (800107c <HAL_GPIO_Init+0x2c0>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d013      	beq.n	8000fa8 <HAL_GPIO_Init+0x1ec>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a3f      	ldr	r2, [pc, #252]	@ (8001080 <HAL_GPIO_Init+0x2c4>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d00d      	beq.n	8000fa4 <HAL_GPIO_Init+0x1e8>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a3e      	ldr	r2, [pc, #248]	@ (8001084 <HAL_GPIO_Init+0x2c8>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d007      	beq.n	8000fa0 <HAL_GPIO_Init+0x1e4>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a3d      	ldr	r2, [pc, #244]	@ (8001088 <HAL_GPIO_Init+0x2cc>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d101      	bne.n	8000f9c <HAL_GPIO_Init+0x1e0>
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e006      	b.n	8000faa <HAL_GPIO_Init+0x1ee>
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	e004      	b.n	8000faa <HAL_GPIO_Init+0x1ee>
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	e002      	b.n	8000faa <HAL_GPIO_Init+0x1ee>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e000      	b.n	8000faa <HAL_GPIO_Init+0x1ee>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fac:	f002 0203 	and.w	r2, r2, #3
 8000fb0:	0092      	lsls	r2, r2, #2
 8000fb2:	4093      	lsls	r3, r2
 8000fb4:	68fa      	ldr	r2, [r7, #12]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fba:	492f      	ldr	r1, [pc, #188]	@ (8001078 <HAL_GPIO_Init+0x2bc>)
 8000fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fbe:	089b      	lsrs	r3, r3, #2
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d006      	beq.n	8000fe2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fd4:	4b2d      	ldr	r3, [pc, #180]	@ (800108c <HAL_GPIO_Init+0x2d0>)
 8000fd6:	689a      	ldr	r2, [r3, #8]
 8000fd8:	492c      	ldr	r1, [pc, #176]	@ (800108c <HAL_GPIO_Init+0x2d0>)
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	608b      	str	r3, [r1, #8]
 8000fe0:	e006      	b.n	8000ff0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fe2:	4b2a      	ldr	r3, [pc, #168]	@ (800108c <HAL_GPIO_Init+0x2d0>)
 8000fe4:	689a      	ldr	r2, [r3, #8]
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	4928      	ldr	r1, [pc, #160]	@ (800108c <HAL_GPIO_Init+0x2d0>)
 8000fec:	4013      	ands	r3, r2
 8000fee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d006      	beq.n	800100a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ffc:	4b23      	ldr	r3, [pc, #140]	@ (800108c <HAL_GPIO_Init+0x2d0>)
 8000ffe:	68da      	ldr	r2, [r3, #12]
 8001000:	4922      	ldr	r1, [pc, #136]	@ (800108c <HAL_GPIO_Init+0x2d0>)
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	4313      	orrs	r3, r2
 8001006:	60cb      	str	r3, [r1, #12]
 8001008:	e006      	b.n	8001018 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800100a:	4b20      	ldr	r3, [pc, #128]	@ (800108c <HAL_GPIO_Init+0x2d0>)
 800100c:	68da      	ldr	r2, [r3, #12]
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	43db      	mvns	r3, r3
 8001012:	491e      	ldr	r1, [pc, #120]	@ (800108c <HAL_GPIO_Init+0x2d0>)
 8001014:	4013      	ands	r3, r2
 8001016:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d006      	beq.n	8001032 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001024:	4b19      	ldr	r3, [pc, #100]	@ (800108c <HAL_GPIO_Init+0x2d0>)
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	4918      	ldr	r1, [pc, #96]	@ (800108c <HAL_GPIO_Init+0x2d0>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	4313      	orrs	r3, r2
 800102e:	604b      	str	r3, [r1, #4]
 8001030:	e006      	b.n	8001040 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001032:	4b16      	ldr	r3, [pc, #88]	@ (800108c <HAL_GPIO_Init+0x2d0>)
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	43db      	mvns	r3, r3
 800103a:	4914      	ldr	r1, [pc, #80]	@ (800108c <HAL_GPIO_Init+0x2d0>)
 800103c:	4013      	ands	r3, r2
 800103e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d021      	beq.n	8001090 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800104c:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <HAL_GPIO_Init+0x2d0>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	490e      	ldr	r1, [pc, #56]	@ (800108c <HAL_GPIO_Init+0x2d0>)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	600b      	str	r3, [r1, #0]
 8001058:	e021      	b.n	800109e <HAL_GPIO_Init+0x2e2>
 800105a:	bf00      	nop
 800105c:	10320000 	.word	0x10320000
 8001060:	10310000 	.word	0x10310000
 8001064:	10220000 	.word	0x10220000
 8001068:	10210000 	.word	0x10210000
 800106c:	10120000 	.word	0x10120000
 8001070:	10110000 	.word	0x10110000
 8001074:	40021000 	.word	0x40021000
 8001078:	40010000 	.word	0x40010000
 800107c:	40010800 	.word	0x40010800
 8001080:	40010c00 	.word	0x40010c00
 8001084:	40011000 	.word	0x40011000
 8001088:	40011400 	.word	0x40011400
 800108c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001090:	4b0b      	ldr	r3, [pc, #44]	@ (80010c0 <HAL_GPIO_Init+0x304>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	43db      	mvns	r3, r3
 8001098:	4909      	ldr	r1, [pc, #36]	@ (80010c0 <HAL_GPIO_Init+0x304>)
 800109a:	4013      	ands	r3, r2
 800109c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800109e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a0:	3301      	adds	r3, #1
 80010a2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010aa:	fa22 f303 	lsr.w	r3, r2, r3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f47f ae8e 	bne.w	8000dd0 <HAL_GPIO_Init+0x14>
  }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	372c      	adds	r7, #44	@ 0x2c
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	40010400 	.word	0x40010400

080010c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	807b      	strh	r3, [r7, #2]
 80010d0:	4613      	mov	r3, r2
 80010d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010d4:	787b      	ldrb	r3, [r7, #1]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010da:	887a      	ldrh	r2, [r7, #2]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010e0:	e003      	b.n	80010ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010e2:	887b      	ldrh	r3, [r7, #2]
 80010e4:	041a      	lsls	r2, r3, #16
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	611a      	str	r2, [r3, #16]
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr

080010f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d101      	bne.n	8001106 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e0e8      	b.n	80012d8 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	d106      	bne.n	8001120 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f006 fdba 	bl	8007c94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2203      	movs	r2, #3
 8001124:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4618      	mov	r0, r3
 8001134:	f002 fcdc 	bl	8003af0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6818      	ldr	r0, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3304      	adds	r3, #4
 8001140:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001142:	f002 fcb2 	bl	8003aaa <USB_CoreInit>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d005      	beq.n	8001158 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2202      	movs	r2, #2
 8001150:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e0bf      	b.n	80012d8 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f002 fce0 	bl	8003b24 <USB_SetCurrentMode>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d005      	beq.n	8001176 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2202      	movs	r2, #2
 800116e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e0b0      	b.n	80012d8 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001176:	2300      	movs	r3, #0
 8001178:	73fb      	strb	r3, [r7, #15]
 800117a:	e03e      	b.n	80011fa <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800117c:	7bfa      	ldrb	r2, [r7, #15]
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	4613      	mov	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	440b      	add	r3, r1
 800118a:	3311      	adds	r3, #17
 800118c:	2201      	movs	r2, #1
 800118e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001190:	7bfa      	ldrb	r2, [r7, #15]
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	4613      	mov	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4413      	add	r3, r2
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	440b      	add	r3, r1
 800119e:	3310      	adds	r3, #16
 80011a0:	7bfa      	ldrb	r2, [r7, #15]
 80011a2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011a4:	7bfa      	ldrb	r2, [r7, #15]
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	440b      	add	r3, r1
 80011b2:	3313      	adds	r3, #19
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011b8:	7bfa      	ldrb	r2, [r7, #15]
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	4613      	mov	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	440b      	add	r3, r1
 80011c6:	3320      	adds	r3, #32
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011cc:	7bfa      	ldrb	r2, [r7, #15]
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	4613      	mov	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	440b      	add	r3, r1
 80011da:	3324      	adds	r3, #36	@ 0x24
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	1c5a      	adds	r2, r3, #1
 80011e6:	4613      	mov	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	440b      	add	r3, r1
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	3301      	adds	r3, #1
 80011f8:	73fb      	strb	r3, [r7, #15]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	791b      	ldrb	r3, [r3, #4]
 80011fe:	7bfa      	ldrb	r2, [r7, #15]
 8001200:	429a      	cmp	r2, r3
 8001202:	d3bb      	bcc.n	800117c <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001204:	2300      	movs	r3, #0
 8001206:	73fb      	strb	r3, [r7, #15]
 8001208:	e044      	b.n	8001294 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800120a:	7bfa      	ldrb	r2, [r7, #15]
 800120c:	6879      	ldr	r1, [r7, #4]
 800120e:	4613      	mov	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	440b      	add	r3, r1
 8001218:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800121c:	2200      	movs	r2, #0
 800121e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001220:	7bfa      	ldrb	r2, [r7, #15]
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	4613      	mov	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	440b      	add	r3, r1
 800122e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001232:	7bfa      	ldrb	r2, [r7, #15]
 8001234:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001236:	7bfa      	ldrb	r2, [r7, #15]
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	4613      	mov	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	440b      	add	r3, r1
 8001244:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800124c:	7bfa      	ldrb	r2, [r7, #15]
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	4613      	mov	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	440b      	add	r3, r1
 800125a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001262:	7bfa      	ldrb	r2, [r7, #15]
 8001264:	6879      	ldr	r1, [r7, #4]
 8001266:	4613      	mov	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	440b      	add	r3, r1
 8001270:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001278:	7bfa      	ldrb	r2, [r7, #15]
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	440b      	add	r3, r1
 8001286:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800128e:	7bfb      	ldrb	r3, [r7, #15]
 8001290:	3301      	adds	r3, #1
 8001292:	73fb      	strb	r3, [r7, #15]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	791b      	ldrb	r3, [r3, #4]
 8001298:	7bfa      	ldrb	r2, [r7, #15]
 800129a:	429a      	cmp	r2, r3
 800129c:	d3b5      	bcc.n	800120a <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6818      	ldr	r0, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3304      	adds	r3, #4
 80012a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012a8:	f002 fc48 	bl	8003b3c <USB_DevInit>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d005      	beq.n	80012be <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2202      	movs	r2, #2
 80012b6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00c      	b.n	80012d8 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2201      	movs	r2, #1
 80012c8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f004 fec8 	bl	8006066 <USB_DevDisconnect>

  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d101      	bne.n	80012f6 <HAL_PCD_Start+0x16>
 80012f2:	2302      	movs	r3, #2
 80012f4:	e016      	b.n	8001324 <HAL_PCD_Start+0x44>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2201      	movs	r2, #1
 80012fa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f002 fbde 	bl	8003ac4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001308:	2101      	movs	r1, #1
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f006 ff35 	bl	800817a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f004 fe9c 	bl	8006052 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f004 fe9e 	bl	800607a <USB_ReadInterrupts>
 800133e:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f000 fb1a 	bl	8001984 <PCD_EP_ISR_Handler>

    return;
 8001350:	e119      	b.n	8001586 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001358:	2b00      	cmp	r3, #0
 800135a:	d013      	beq.n	8001384 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001364:	b29a      	uxth	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800136e:	b292      	uxth	r2, r2
 8001370:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f006 fd08 	bl	8007d8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800137a:	2100      	movs	r1, #0
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 f905 	bl	800158c <HAL_PCD_SetAddress>

    return;
 8001382:	e100      	b.n	8001586 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00c      	beq.n	80013a8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001396:	b29a      	uxth	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80013a0:	b292      	uxth	r2, r2
 80013a2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80013a6:	e0ee      	b.n	8001586 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00c      	beq.n	80013cc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80013c4:	b292      	uxth	r2, r2
 80013c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80013ca:	e0dc      	b.n	8001586 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d027      	beq.n	8001426 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80013de:	b29a      	uxth	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f022 0204 	bic.w	r2, r2, #4
 80013e8:	b292      	uxth	r2, r2
 80013ea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 0208 	bic.w	r2, r2, #8
 8001400:	b292      	uxth	r2, r2
 8001402:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f006 fcf8 	bl	8007dfc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001414:	b29a      	uxth	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800141e:	b292      	uxth	r2, r2
 8001420:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001424:	e0af      	b.n	8001586 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800142c:	2b00      	cmp	r3, #0
 800142e:	f000 8083 	beq.w	8001538 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001432:	2300      	movs	r3, #0
 8001434:	77fb      	strb	r3, [r7, #31]
 8001436:	e010      	b.n	800145a <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	7ffb      	ldrb	r3, [r7, #31]
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	441a      	add	r2, r3
 8001444:	7ffb      	ldrb	r3, [r7, #31]
 8001446:	8812      	ldrh	r2, [r2, #0]
 8001448:	b292      	uxth	r2, r2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	3320      	adds	r3, #32
 800144e:	443b      	add	r3, r7
 8001450:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001454:	7ffb      	ldrb	r3, [r7, #31]
 8001456:	3301      	adds	r3, #1
 8001458:	77fb      	strb	r3, [r7, #31]
 800145a:	7ffb      	ldrb	r3, [r7, #31]
 800145c:	2b07      	cmp	r3, #7
 800145e:	d9eb      	bls.n	8001438 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001468:	b29a      	uxth	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f042 0201 	orr.w	r2, r2, #1
 8001472:	b292      	uxth	r2, r2
 8001474:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001480:	b29a      	uxth	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 0201 	bic.w	r2, r2, #1
 800148a:	b292      	uxth	r2, r2
 800148c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001490:	bf00      	nop
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800149a:	b29b      	uxth	r3, r3
 800149c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f6      	beq.n	8001492 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80014b6:	b292      	uxth	r2, r2
 80014b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80014bc:	2300      	movs	r3, #0
 80014be:	77fb      	strb	r3, [r7, #31]
 80014c0:	e00f      	b.n	80014e2 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80014c2:	7ffb      	ldrb	r3, [r7, #31]
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	6812      	ldr	r2, [r2, #0]
 80014c8:	4611      	mov	r1, r2
 80014ca:	7ffa      	ldrb	r2, [r7, #31]
 80014cc:	0092      	lsls	r2, r2, #2
 80014ce:	440a      	add	r2, r1
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	3320      	adds	r3, #32
 80014d4:	443b      	add	r3, r7
 80014d6:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80014da:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80014dc:	7ffb      	ldrb	r3, [r7, #31]
 80014de:	3301      	adds	r3, #1
 80014e0:	77fb      	strb	r3, [r7, #31]
 80014e2:	7ffb      	ldrb	r3, [r7, #31]
 80014e4:	2b07      	cmp	r3, #7
 80014e6:	d9ec      	bls.n	80014c2 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f042 0208 	orr.w	r2, r2, #8
 80014fa:	b292      	uxth	r2, r2
 80014fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001508:	b29a      	uxth	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001512:	b292      	uxth	r2, r2
 8001514:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001520:	b29a      	uxth	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f042 0204 	orr.w	r2, r2, #4
 800152a:	b292      	uxth	r2, r2
 800152c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f006 fc49 	bl	8007dc8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001536:	e026      	b.n	8001586 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800153e:	2b00      	cmp	r3, #0
 8001540:	d00f      	beq.n	8001562 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800154a:	b29a      	uxth	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001554:	b292      	uxth	r2, r2
 8001556:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f006 fc07 	bl	8007d6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001560:	e011      	b.n	8001586 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001568:	2b00      	cmp	r3, #0
 800156a:	d00c      	beq.n	8001586 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001574:	b29a      	uxth	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800157e:	b292      	uxth	r2, r2
 8001580:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001584:	bf00      	nop
  }
}
 8001586:	3720      	adds	r7, #32
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d101      	bne.n	80015a6 <HAL_PCD_SetAddress+0x1a>
 80015a2:	2302      	movs	r3, #2
 80015a4:	e012      	b.n	80015cc <HAL_PCD_SetAddress+0x40>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	78fa      	ldrb	r2, [r7, #3]
 80015b2:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	78fa      	ldrb	r2, [r7, #3]
 80015ba:	4611      	mov	r1, r2
 80015bc:	4618      	mov	r0, r3
 80015be:	f004 fd35 	bl	800602c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	4608      	mov	r0, r1
 80015de:	4611      	mov	r1, r2
 80015e0:	461a      	mov	r2, r3
 80015e2:	4603      	mov	r3, r0
 80015e4:	70fb      	strb	r3, [r7, #3]
 80015e6:	460b      	mov	r3, r1
 80015e8:	803b      	strh	r3, [r7, #0]
 80015ea:	4613      	mov	r3, r2
 80015ec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80015ee:	2300      	movs	r3, #0
 80015f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80015f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	da0e      	bge.n	8001618 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015fa:	78fb      	ldrb	r3, [r7, #3]
 80015fc:	f003 0207 	and.w	r2, r3, #7
 8001600:	4613      	mov	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	3310      	adds	r3, #16
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	4413      	add	r3, r2
 800160e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2201      	movs	r2, #1
 8001614:	705a      	strb	r2, [r3, #1]
 8001616:	e00e      	b.n	8001636 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001618:	78fb      	ldrb	r3, [r7, #3]
 800161a:	f003 0207 	and.w	r2, r3, #7
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2200      	movs	r2, #0
 8001634:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001636:	78fb      	ldrb	r3, [r7, #3]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	b2da      	uxtb	r2, r3
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001642:	883a      	ldrh	r2, [r7, #0]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	78ba      	ldrb	r2, [r7, #2]
 800164c:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800164e:	78bb      	ldrb	r3, [r7, #2]
 8001650:	2b02      	cmp	r3, #2
 8001652:	d102      	bne.n	800165a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2200      	movs	r2, #0
 8001658:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001660:	2b01      	cmp	r3, #1
 8001662:	d101      	bne.n	8001668 <HAL_PCD_EP_Open+0x94>
 8001664:	2302      	movs	r3, #2
 8001666:	e00e      	b.n	8001686 <HAL_PCD_EP_Open+0xb2>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68f9      	ldr	r1, [r7, #12]
 8001676:	4618      	mov	r0, r3
 8001678:	f002 fa7e 	bl	8003b78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001684:	7afb      	ldrb	r3, [r7, #11]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b084      	sub	sp, #16
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	460b      	mov	r3, r1
 8001698:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800169a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	da0e      	bge.n	80016c0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016a2:	78fb      	ldrb	r3, [r7, #3]
 80016a4:	f003 0207 	and.w	r2, r3, #7
 80016a8:	4613      	mov	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	3310      	adds	r3, #16
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2201      	movs	r2, #1
 80016bc:	705a      	strb	r2, [r3, #1]
 80016be:	e00e      	b.n	80016de <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016c0:	78fb      	ldrb	r3, [r7, #3]
 80016c2:	f003 0207 	and.w	r2, r3, #7
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2200      	movs	r2, #0
 80016dc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80016de:	78fb      	ldrb	r3, [r7, #3]
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d101      	bne.n	80016f8 <HAL_PCD_EP_Close+0x6a>
 80016f4:	2302      	movs	r3, #2
 80016f6:	e00e      	b.n	8001716 <HAL_PCD_EP_Close+0x88>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68f9      	ldr	r1, [r7, #12]
 8001706:	4618      	mov	r0, r3
 8001708:	f002 fdf6 	bl	80042f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b086      	sub	sp, #24
 8001722:	af00      	add	r7, sp, #0
 8001724:	60f8      	str	r0, [r7, #12]
 8001726:	607a      	str	r2, [r7, #4]
 8001728:	603b      	str	r3, [r7, #0]
 800172a:	460b      	mov	r3, r1
 800172c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800172e:	7afb      	ldrb	r3, [r7, #11]
 8001730:	f003 0207 	and.w	r2, r3, #7
 8001734:	4613      	mov	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	4413      	add	r3, r2
 8001744:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	2200      	movs	r2, #0
 8001756:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	2200      	movs	r2, #0
 800175c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800175e:	7afb      	ldrb	r3, [r7, #11]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	b2da      	uxtb	r2, r3
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6979      	ldr	r1, [r7, #20]
 8001770:	4618      	mov	r0, r3
 8001772:	f002 ffad 	bl	80046d0 <USB_EPStartXfer>

  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800178c:	78fb      	ldrb	r3, [r7, #3]
 800178e:	f003 0207 	and.w	r2, r3, #7
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	440b      	add	r3, r1
 800179e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80017a2:	681b      	ldr	r3, [r3, #0]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr

080017ae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b086      	sub	sp, #24
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	60f8      	str	r0, [r7, #12]
 80017b6:	607a      	str	r2, [r7, #4]
 80017b8:	603b      	str	r3, [r7, #0]
 80017ba:	460b      	mov	r3, r1
 80017bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017be:	7afb      	ldrb	r3, [r7, #11]
 80017c0:	f003 0207 	and.w	r2, r3, #7
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	3310      	adds	r3, #16
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	4413      	add	r3, r2
 80017d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	2200      	movs	r2, #0
 80017f2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	2201      	movs	r2, #1
 80017f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017fa:	7afb      	ldrb	r3, [r7, #11]
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	b2da      	uxtb	r2, r3
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6979      	ldr	r1, [r7, #20]
 800180c:	4618      	mov	r0, r3
 800180e:	f002 ff5f 	bl	80046d0 <USB_EPStartXfer>

  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001828:	78fb      	ldrb	r3, [r7, #3]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	7912      	ldrb	r2, [r2, #4]
 8001832:	4293      	cmp	r3, r2
 8001834:	d901      	bls.n	800183a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e04c      	b.n	80018d4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800183a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800183e:	2b00      	cmp	r3, #0
 8001840:	da0e      	bge.n	8001860 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001842:	78fb      	ldrb	r3, [r7, #3]
 8001844:	f003 0207 	and.w	r2, r3, #7
 8001848:	4613      	mov	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	3310      	adds	r3, #16
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2201      	movs	r2, #1
 800185c:	705a      	strb	r2, [r3, #1]
 800185e:	e00c      	b.n	800187a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001860:	78fa      	ldrb	r2, [r7, #3]
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2200      	movs	r2, #0
 8001878:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2201      	movs	r2, #1
 800187e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001880:	78fb      	ldrb	r3, [r7, #3]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	b2da      	uxtb	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001892:	2b01      	cmp	r3, #1
 8001894:	d101      	bne.n	800189a <HAL_PCD_EP_SetStall+0x7e>
 8001896:	2302      	movs	r3, #2
 8001898:	e01c      	b.n	80018d4 <HAL_PCD_EP_SetStall+0xb8>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68f9      	ldr	r1, [r7, #12]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f004 fac2 	bl	8005e32 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018ae:	78fb      	ldrb	r3, [r7, #3]
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d108      	bne.n	80018ca <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80018c2:	4619      	mov	r1, r3
 80018c4:	4610      	mov	r0, r2
 80018c6:	f004 fbe7 	bl	8006098 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	7912      	ldrb	r2, [r2, #4]
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d901      	bls.n	80018fa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e040      	b.n	800197c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80018fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	da0e      	bge.n	8001920 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001902:	78fb      	ldrb	r3, [r7, #3]
 8001904:	f003 0207 	and.w	r2, r3, #7
 8001908:	4613      	mov	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	3310      	adds	r3, #16
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2201      	movs	r2, #1
 800191c:	705a      	strb	r2, [r3, #1]
 800191e:	e00e      	b.n	800193e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001920:	78fb      	ldrb	r3, [r7, #3]
 8001922:	f003 0207 	and.w	r2, r3, #7
 8001926:	4613      	mov	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	4413      	add	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2200      	movs	r2, #0
 800193c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2200      	movs	r2, #0
 8001942:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001944:	78fb      	ldrb	r3, [r7, #3]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	b2da      	uxtb	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001956:	2b01      	cmp	r3, #1
 8001958:	d101      	bne.n	800195e <HAL_PCD_EP_ClrStall+0x82>
 800195a:	2302      	movs	r3, #2
 800195c:	e00e      	b.n	800197c <HAL_PCD_EP_ClrStall+0xa0>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68f9      	ldr	r1, [r7, #12]
 800196c:	4618      	mov	r0, r3
 800196e:	f004 fab0 	bl	8005ed2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b096      	sub	sp, #88	@ 0x58
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800198c:	e3bb      	b.n	8002106 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001996:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800199a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	f003 030f 	and.w	r3, r3, #15
 80019a4:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80019a8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f040 8175 	bne.w	8001c9c <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80019b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80019b6:	f003 0310 	and.w	r3, r3, #16
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d14e      	bne.n	8001a5c <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	881b      	ldrh	r3, [r3, #0]
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80019ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80019ce:	81fb      	strh	r3, [r7, #14]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	89fb      	ldrh	r3, [r7, #14]
 80019d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019de:	b29b      	uxth	r3, r3
 80019e0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3310      	adds	r3, #16
 80019e6:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	461a      	mov	r2, r3
 80019f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	4413      	add	r3, r2
 80019fc:	3302      	adds	r3, #2
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	4413      	add	r3, r2
 8001a06:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a12:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001a14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a16:	695a      	ldr	r2, [r3, #20]
 8001a18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	441a      	add	r2, r3
 8001a1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a20:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001a22:	2100      	movs	r1, #0
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f006 f988 	bl	8007d3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	7b5b      	ldrb	r3, [r3, #13]
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 8368 	beq.w	8002106 <PCD_EP_ISR_Handler+0x782>
 8001a36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f040 8363 	bne.w	8002106 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	7b5b      	ldrb	r3, [r3, #13]
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	735a      	strb	r2, [r3, #13]
 8001a5a:	e354      	b.n	8002106 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001a62:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001a6e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001a72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d034      	beq.n	8001ae4 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	461a      	mov	r2, r3
 8001a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	3306      	adds	r3, #6
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6812      	ldr	r2, [r2, #0]
 8001a96:	4413      	add	r3, r2
 8001a98:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aa4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001ab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ab2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ab4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ab6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	f004 fb3e 	bl	800613a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001aca:	4013      	ands	r3, r2
 8001acc:	823b      	strh	r3, [r7, #16]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	8a3a      	ldrh	r2, [r7, #16]
 8001ad4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ad8:	b292      	uxth	r2, r2
 8001ada:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f006 f8ff 	bl	8007ce0 <HAL_PCD_SetupStageCallback>
 8001ae2:	e310      	b.n	8002106 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ae4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f280 830c 	bge.w	8002106 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001afa:	4013      	ands	r3, r2
 8001afc:	83fb      	strh	r3, [r7, #30]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	8bfa      	ldrh	r2, [r7, #30]
 8001b04:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b08:	b292      	uxth	r2, r2
 8001b0a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	461a      	mov	r2, r3
 8001b18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	4413      	add	r3, r2
 8001b20:	3306      	adds	r3, #6
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	4413      	add	r3, r2
 8001b2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001b2e:	881b      	ldrh	r3, [r3, #0]
 8001b30:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b36:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001b38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d019      	beq.n	8001b74 <PCD_EP_ISR_Handler+0x1f0>
 8001b40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d015      	beq.n	8001b74 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6818      	ldr	r0, [r3, #0]
 8001b4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b4e:	6959      	ldr	r1, [r3, #20]
 8001b50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b52:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b56:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	f004 faee 	bl	800613a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001b5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b60:	695a      	ldr	r2, [r3, #20]
 8001b62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	441a      	add	r2, r3
 8001b68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b6a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f006 f8c8 	bl	8007d04 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001b7e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001b82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f040 82bd 	bne.w	8002106 <PCD_EP_ISR_Handler+0x782>
 8001b8c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001b90:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001b94:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001b98:	f000 82b5 	beq.w	8002106 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	61bb      	str	r3, [r7, #24]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	461a      	mov	r2, r3
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	801a      	strh	r2, [r3, #0]
 8001bcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	2b3e      	cmp	r3, #62	@ 0x3e
 8001bd2:	d91d      	bls.n	8001c10 <PCD_EP_ISR_Handler+0x28c>
 8001bd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	095b      	lsrs	r3, r3, #5
 8001bda:	647b      	str	r3, [r7, #68]	@ 0x44
 8001bdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	f003 031f 	and.w	r3, r3, #31
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d102      	bne.n	8001bee <PCD_EP_ISR_Handler+0x26a>
 8001be8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bea:	3b01      	subs	r3, #1
 8001bec:	647b      	str	r3, [r7, #68]	@ 0x44
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	029b      	lsls	r3, r3, #10
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	801a      	strh	r2, [r3, #0]
 8001c0e:	e026      	b.n	8001c5e <PCD_EP_ISR_Handler+0x2da>
 8001c10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d10a      	bne.n	8001c2e <PCD_EP_ISR_Handler+0x2aa>
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	801a      	strh	r2, [r3, #0]
 8001c2c:	e017      	b.n	8001c5e <PCD_EP_ISR_Handler+0x2da>
 8001c2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	085b      	lsrs	r3, r3, #1
 8001c34:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d002      	beq.n	8001c48 <PCD_EP_ISR_Handler+0x2c4>
 8001c42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c44:	3301      	adds	r3, #1
 8001c46:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	029b      	lsls	r3, r3, #10
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	4313      	orrs	r3, r2
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c6e:	827b      	strh	r3, [r7, #18]
 8001c70:	8a7b      	ldrh	r3, [r7, #18]
 8001c72:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001c76:	827b      	strh	r3, [r7, #18]
 8001c78:	8a7b      	ldrh	r3, [r7, #18]
 8001c7a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001c7e:	827b      	strh	r3, [r7, #18]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	8a7b      	ldrh	r3, [r7, #18]
 8001c86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001c8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001c8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	8013      	strh	r3, [r2, #0]
 8001c9a:	e234      	b.n	8002106 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001cb0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f280 80fc 	bge.w	8001eb2 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	881b      	ldrh	r3, [r3, #0]
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001ce8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001cec:	b292      	uxth	r2, r2
 8001cee:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001cf0:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	4413      	add	r3, r2
 8001d04:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001d06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d08:	7b1b      	ldrb	r3, [r3, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d125      	bne.n	8001d5a <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	461a      	mov	r2, r3
 8001d1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4413      	add	r3, r2
 8001d22:	3306      	adds	r3, #6
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6812      	ldr	r2, [r2, #0]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d30:	881b      	ldrh	r3, [r3, #0]
 8001d32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d36:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001d3a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f000 8092 	beq.w	8001e68 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6818      	ldr	r0, [r3, #0]
 8001d48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d4a:	6959      	ldr	r1, [r3, #20]
 8001d4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d4e:	88da      	ldrh	r2, [r3, #6]
 8001d50:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001d54:	f004 f9f1 	bl	800613a <USB_ReadPMA>
 8001d58:	e086      	b.n	8001e68 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001d5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d5c:	78db      	ldrb	r3, [r3, #3]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d10a      	bne.n	8001d78 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001d62:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001d66:	461a      	mov	r2, r3
 8001d68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f9d9 	bl	8002122 <HAL_PCD_EP_DB_Receive>
 8001d70:	4603      	mov	r3, r0
 8001d72:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001d76:	e077      	b.n	8001e68 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001d8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d92:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	441a      	add	r2, r3
 8001da4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001da8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001dac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001db0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001db4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d024      	beq.n	8001e20 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	461a      	mov	r2, r3
 8001de2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4413      	add	r3, r2
 8001dea:	3302      	adds	r3, #2
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6812      	ldr	r2, [r2, #0]
 8001df2:	4413      	add	r3, r2
 8001df4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dfe:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001e02:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d02e      	beq.n	8001e68 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6818      	ldr	r0, [r3, #0]
 8001e0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e10:	6959      	ldr	r1, [r3, #20]
 8001e12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e14:	891a      	ldrh	r2, [r3, #8]
 8001e16:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001e1a:	f004 f98e 	bl	800613a <USB_ReadPMA>
 8001e1e:	e023      	b.n	8001e68 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	4413      	add	r3, r2
 8001e34:	3306      	adds	r3, #6
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6812      	ldr	r2, [r2, #0]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e48:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001e4c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d009      	beq.n	8001e68 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6818      	ldr	r0, [r3, #0]
 8001e58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e5a:	6959      	ldr	r1, [r3, #20]
 8001e5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e5e:	895a      	ldrh	r2, [r3, #10]
 8001e60:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001e64:	f004 f969 	bl	800613a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001e68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e6a:	69da      	ldr	r2, [r3, #28]
 8001e6c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001e70:	441a      	add	r2, r3
 8001e72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e74:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001e76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e78:	695a      	ldr	r2, [r3, #20]
 8001e7a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001e7e:	441a      	add	r2, r3
 8001e80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e82:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001e84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <PCD_EP_ISR_Handler+0x514>
 8001e8c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001e90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d206      	bcs.n	8001ea6 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001e98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f005 ff30 	bl	8007d04 <HAL_PCD_DataOutStageCallback>
 8001ea4:	e005      	b.n	8001eb2 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001eac:	4618      	mov	r0, r3
 8001eae:	f002 fc0f 	bl	80046d0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001eb2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 8123 	beq.w	8002106 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8001ec0:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	3310      	adds	r3, #16
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001eea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001eee:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	441a      	add	r2, r3
 8001f00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001f04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001f10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f12:	78db      	ldrb	r3, [r3, #3]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	f040 80a2 	bne.w	800205e <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8001f1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001f20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f22:	7b1b      	ldrb	r3, [r3, #12]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 8093 	beq.w	8002050 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f2a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d046      	beq.n	8001fc4 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f38:	785b      	ldrb	r3, [r3, #1]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d126      	bne.n	8001f8c <PCD_EP_ISR_Handler+0x608>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	461a      	mov	r2, r3
 8001f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f52:	4413      	add	r3, r2
 8001f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	011a      	lsls	r2, r3, #4
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5e:	4413      	add	r3, r2
 8001f60:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001f64:	623b      	str	r3, [r7, #32]
 8001f66:	6a3b      	ldr	r3, [r7, #32]
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	6a3b      	ldr	r3, [r7, #32]
 8001f74:	801a      	strh	r2, [r3, #0]
 8001f76:	6a3b      	ldr	r3, [r7, #32]
 8001f78:	881b      	ldrh	r3, [r3, #0]
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	6a3b      	ldr	r3, [r7, #32]
 8001f88:	801a      	strh	r2, [r3, #0]
 8001f8a:	e061      	b.n	8002050 <PCD_EP_ISR_Handler+0x6cc>
 8001f8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f8e:	785b      	ldrb	r3, [r3, #1]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d15d      	bne.n	8002050 <PCD_EP_ISR_Handler+0x6cc>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fa8:	4413      	add	r3, r2
 8001faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	011a      	lsls	r2, r3, #4
 8001fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001fba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	801a      	strh	r2, [r3, #0]
 8001fc2:	e045      	b.n	8002050 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fcc:	785b      	ldrb	r3, [r3, #1]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d126      	bne.n	8002020 <PCD_EP_ISR_Handler+0x69c>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fe6:	4413      	add	r3, r2
 8001fe8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001fea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	011a      	lsls	r2, r3, #4
 8001ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001ff8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002004:	b29a      	uxth	r2, r3
 8002006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002008:	801a      	strh	r2, [r3, #0]
 800200a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	b29b      	uxth	r3, r3
 8002010:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002014:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002018:	b29a      	uxth	r2, r3
 800201a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800201c:	801a      	strh	r2, [r3, #0]
 800201e:	e017      	b.n	8002050 <PCD_EP_ISR_Handler+0x6cc>
 8002020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002022:	785b      	ldrb	r3, [r3, #1]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d113      	bne.n	8002050 <PCD_EP_ISR_Handler+0x6cc>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002030:	b29b      	uxth	r3, r3
 8002032:	461a      	mov	r2, r3
 8002034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002036:	4413      	add	r3, r2
 8002038:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800203a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	011a      	lsls	r2, r3, #4
 8002040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002042:	4413      	add	r3, r2
 8002044:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002048:	63bb      	str	r3, [r7, #56]	@ 0x38
 800204a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800204c:	2200      	movs	r2, #0
 800204e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	4619      	mov	r1, r3
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f005 fe6f 	bl	8007d3a <HAL_PCD_DataInStageCallback>
 800205c:	e053      	b.n	8002106 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800205e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002066:	2b00      	cmp	r3, #0
 8002068:	d146      	bne.n	80020f8 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002072:	b29b      	uxth	r3, r3
 8002074:	461a      	mov	r2, r3
 8002076:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4413      	add	r3, r2
 800207e:	3302      	adds	r3, #2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6812      	ldr	r2, [r2, #0]
 8002086:	4413      	add	r3, r2
 8002088:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002092:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002098:	699a      	ldr	r2, [r3, #24]
 800209a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800209e:	429a      	cmp	r2, r3
 80020a0:	d907      	bls.n	80020b2 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80020a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020a4:	699a      	ldr	r2, [r3, #24]
 80020a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80020aa:	1ad2      	subs	r2, r2, r3
 80020ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020ae:	619a      	str	r2, [r3, #24]
 80020b0:	e002      	b.n	80020b8 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80020b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020b4:	2200      	movs	r2, #0
 80020b6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80020b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d106      	bne.n	80020ce <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	4619      	mov	r1, r3
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f005 fe37 	bl	8007d3a <HAL_PCD_DataInStageCallback>
 80020cc:	e01b      	b.n	8002106 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80020ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020d0:	695a      	ldr	r2, [r3, #20]
 80020d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80020d6:	441a      	add	r2, r3
 80020d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020da:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80020dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020de:	69da      	ldr	r2, [r3, #28]
 80020e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80020e4:	441a      	add	r2, r3
 80020e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020e8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80020f0:	4618      	mov	r0, r3
 80020f2:	f002 faed 	bl	80046d0 <USB_EPStartXfer>
 80020f6:	e006      	b.n	8002106 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80020f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80020fc:	461a      	mov	r2, r3
 80020fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 f91b 	bl	800233c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800210e:	b29b      	uxth	r3, r3
 8002110:	b21b      	sxth	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	f6ff ac3b 	blt.w	800198e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3758      	adds	r7, #88	@ 0x58
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b088      	sub	sp, #32
 8002126:	af00      	add	r7, sp, #0
 8002128:	60f8      	str	r0, [r7, #12]
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	4613      	mov	r3, r2
 800212e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002130:	88fb      	ldrh	r3, [r7, #6]
 8002132:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d07e      	beq.n	8002238 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002142:	b29b      	uxth	r3, r3
 8002144:	461a      	mov	r2, r3
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4413      	add	r3, r2
 800214e:	3302      	adds	r3, #2
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	6812      	ldr	r2, [r2, #0]
 8002156:	4413      	add	r3, r2
 8002158:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002162:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	699a      	ldr	r2, [r3, #24]
 8002168:	8b7b      	ldrh	r3, [r7, #26]
 800216a:	429a      	cmp	r2, r3
 800216c:	d306      	bcc.n	800217c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	699a      	ldr	r2, [r3, #24]
 8002172:	8b7b      	ldrh	r3, [r7, #26]
 8002174:	1ad2      	subs	r2, r2, r3
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	619a      	str	r2, [r3, #24]
 800217a:	e002      	b.n	8002182 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2200      	movs	r2, #0
 8002180:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d123      	bne.n	80021d2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	b29b      	uxth	r3, r3
 800219c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80021a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021a4:	833b      	strh	r3, [r7, #24]
 80021a6:	8b3b      	ldrh	r3, [r7, #24]
 80021a8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80021ac:	833b      	strh	r3, [r7, #24]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	441a      	add	r2, r3
 80021bc:	8b3b      	ldrh	r3, [r7, #24]
 80021be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80021c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80021c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80021d2:	88fb      	ldrh	r3, [r7, #6]
 80021d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d01f      	beq.n	800221c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	461a      	mov	r2, r3
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	881b      	ldrh	r3, [r3, #0]
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80021f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021f6:	82fb      	strh	r3, [r7, #22]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	441a      	add	r2, r3
 8002206:	8afb      	ldrh	r3, [r7, #22]
 8002208:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800220c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002210:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002214:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002218:	b29b      	uxth	r3, r3
 800221a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800221c:	8b7b      	ldrh	r3, [r7, #26]
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 8087 	beq.w	8002332 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6818      	ldr	r0, [r3, #0]
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	6959      	ldr	r1, [r3, #20]
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	891a      	ldrh	r2, [r3, #8]
 8002230:	8b7b      	ldrh	r3, [r7, #26]
 8002232:	f003 ff82 	bl	800613a <USB_ReadPMA>
 8002236:	e07c      	b.n	8002332 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002240:	b29b      	uxth	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	4413      	add	r3, r2
 800224c:	3306      	adds	r3, #6
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	6812      	ldr	r2, [r2, #0]
 8002254:	4413      	add	r3, r2
 8002256:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002260:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	699a      	ldr	r2, [r3, #24]
 8002266:	8b7b      	ldrh	r3, [r7, #26]
 8002268:	429a      	cmp	r2, r3
 800226a:	d306      	bcc.n	800227a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	699a      	ldr	r2, [r3, #24]
 8002270:	8b7b      	ldrh	r3, [r7, #26]
 8002272:	1ad2      	subs	r2, r2, r3
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	619a      	str	r2, [r3, #24]
 8002278:	e002      	b.n	8002280 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	2200      	movs	r2, #0
 800227e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d123      	bne.n	80022d0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	461a      	mov	r2, r3
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	b29b      	uxth	r3, r3
 800229a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800229e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022a2:	83fb      	strh	r3, [r7, #30]
 80022a4:	8bfb      	ldrh	r3, [r7, #30]
 80022a6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80022aa:	83fb      	strh	r3, [r7, #30]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	461a      	mov	r2, r3
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	441a      	add	r2, r3
 80022ba:	8bfb      	ldrh	r3, [r7, #30]
 80022bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80022c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80022d0:	88fb      	ldrh	r3, [r7, #6]
 80022d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d11f      	bne.n	800231a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	461a      	mov	r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80022f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022f4:	83bb      	strh	r3, [r7, #28]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	461a      	mov	r2, r3
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	441a      	add	r2, r3
 8002304:	8bbb      	ldrh	r3, [r7, #28]
 8002306:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800230a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800230e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002312:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002316:	b29b      	uxth	r3, r3
 8002318:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800231a:	8b7b      	ldrh	r3, [r7, #26]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d008      	beq.n	8002332 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6818      	ldr	r0, [r3, #0]
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	6959      	ldr	r1, [r3, #20]
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	895a      	ldrh	r2, [r3, #10]
 800232c:	8b7b      	ldrh	r3, [r7, #26]
 800232e:	f003 ff04 	bl	800613a <USB_ReadPMA>
    }
  }

  return count;
 8002332:	8b7b      	ldrh	r3, [r7, #26]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3720      	adds	r7, #32
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b0a4      	sub	sp, #144	@ 0x90
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	4613      	mov	r3, r2
 8002348:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800234a:	88fb      	ldrh	r3, [r7, #6]
 800234c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 81dd 	beq.w	8002710 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800235e:	b29b      	uxth	r3, r3
 8002360:	461a      	mov	r2, r3
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4413      	add	r3, r2
 800236a:	3302      	adds	r3, #2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	4413      	add	r3, r2
 8002374:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800237e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	699a      	ldr	r2, [r3, #24]
 8002386:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800238a:	429a      	cmp	r2, r3
 800238c:	d907      	bls.n	800239e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	699a      	ldr	r2, [r3, #24]
 8002392:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002396:	1ad2      	subs	r2, r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	619a      	str	r2, [r3, #24]
 800239c:	e002      	b.n	80023a4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2200      	movs	r2, #0
 80023a2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f040 80b9 	bne.w	8002520 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	785b      	ldrb	r3, [r3, #1]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d126      	bne.n	8002404 <HAL_PCD_EP_DB_Transmit+0xc8>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	461a      	mov	r2, r3
 80023c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ca:	4413      	add	r3, r2
 80023cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	011a      	lsls	r2, r3, #4
 80023d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023d6:	4413      	add	r3, r2
 80023d8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80023dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ec:	801a      	strh	r2, [r3, #0]
 80023ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002400:	801a      	strh	r2, [r3, #0]
 8002402:	e01a      	b.n	800243a <HAL_PCD_EP_DB_Transmit+0xfe>
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	785b      	ldrb	r3, [r3, #1]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d116      	bne.n	800243a <HAL_PCD_EP_DB_Transmit+0xfe>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	637b      	str	r3, [r7, #52]	@ 0x34
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800241a:	b29b      	uxth	r3, r3
 800241c:	461a      	mov	r2, r3
 800241e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002420:	4413      	add	r3, r2
 8002422:	637b      	str	r3, [r7, #52]	@ 0x34
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	011a      	lsls	r2, r3, #4
 800242a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800242c:	4413      	add	r3, r2
 800242e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002432:	633b      	str	r3, [r7, #48]	@ 0x30
 8002434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002436:	2200      	movs	r2, #0
 8002438:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	785b      	ldrb	r3, [r3, #1]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d126      	bne.n	8002496 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	61fb      	str	r3, [r7, #28]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002456:	b29b      	uxth	r3, r3
 8002458:	461a      	mov	r2, r3
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	4413      	add	r3, r2
 800245e:	61fb      	str	r3, [r7, #28]
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	011a      	lsls	r2, r3, #4
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	4413      	add	r3, r2
 800246a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800246e:	61bb      	str	r3, [r7, #24]
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	b29b      	uxth	r3, r3
 8002476:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800247a:	b29a      	uxth	r2, r3
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	801a      	strh	r2, [r3, #0]
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	b29b      	uxth	r3, r3
 8002486:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800248a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800248e:	b29a      	uxth	r2, r3
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	801a      	strh	r2, [r3, #0]
 8002494:	e017      	b.n	80024c6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	785b      	ldrb	r3, [r3, #1]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d113      	bne.n	80024c6 <HAL_PCD_EP_DB_Transmit+0x18a>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	461a      	mov	r2, r3
 80024aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ac:	4413      	add	r3, r2
 80024ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	011a      	lsls	r2, r3, #4
 80024b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b8:	4413      	add	r3, r2
 80024ba:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80024be:	623b      	str	r3, [r7, #32]
 80024c0:	6a3b      	ldr	r3, [r7, #32]
 80024c2:	2200      	movs	r2, #0
 80024c4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	4619      	mov	r1, r3
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f005 fc34 	bl	8007d3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024d2:	88fb      	ldrh	r3, [r7, #6]
 80024d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 82fc 	beq.w	8002ad6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80024f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024f8:	82fb      	strh	r3, [r7, #22]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	441a      	add	r2, r3
 8002508:	8afb      	ldrh	r3, [r7, #22]
 800250a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800250e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002512:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002516:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800251a:	b29b      	uxth	r3, r3
 800251c:	8013      	strh	r3, [r2, #0]
 800251e:	e2da      	b.n	8002ad6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002520:	88fb      	ldrh	r3, [r7, #6]
 8002522:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d021      	beq.n	800256e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	461a      	mov	r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	b29b      	uxth	r3, r3
 800253c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002540:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002544:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	461a      	mov	r2, r3
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	441a      	add	r2, r3
 8002556:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800255a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800255e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002562:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002566:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800256a:	b29b      	uxth	r3, r3
 800256c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002574:	2b01      	cmp	r3, #1
 8002576:	f040 82ae 	bne.w	8002ad6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	695a      	ldr	r2, [r3, #20]
 800257e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002582:	441a      	add	r2, r3
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	69da      	ldr	r2, [r3, #28]
 800258c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002590:	441a      	add	r2, r3
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	6a1a      	ldr	r2, [r3, #32]
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d30b      	bcc.n	80025ba <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	6a1a      	ldr	r2, [r3, #32]
 80025ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025b2:	1ad2      	subs	r2, r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	621a      	str	r2, [r3, #32]
 80025b8:	e017      	b.n	80025ea <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d108      	bne.n	80025d4 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80025c2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80025c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80025d2:	e00a      	b.n	80025ea <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2200      	movs	r2, #0
 80025e8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	785b      	ldrb	r3, [r3, #1]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d165      	bne.n	80026be <HAL_PCD_EP_DB_Transmit+0x382>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002600:	b29b      	uxth	r3, r3
 8002602:	461a      	mov	r2, r3
 8002604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002606:	4413      	add	r3, r2
 8002608:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	011a      	lsls	r2, r3, #4
 8002610:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002612:	4413      	add	r3, r2
 8002614:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002618:	63bb      	str	r3, [r7, #56]	@ 0x38
 800261a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	b29b      	uxth	r3, r3
 8002620:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002624:	b29a      	uxth	r2, r3
 8002626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002628:	801a      	strh	r2, [r3, #0]
 800262a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800262e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002630:	d91d      	bls.n	800266e <HAL_PCD_EP_DB_Transmit+0x332>
 8002632:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002636:	095b      	lsrs	r3, r3, #5
 8002638:	64bb      	str	r3, [r7, #72]	@ 0x48
 800263a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800263e:	f003 031f 	and.w	r3, r3, #31
 8002642:	2b00      	cmp	r3, #0
 8002644:	d102      	bne.n	800264c <HAL_PCD_EP_DB_Transmit+0x310>
 8002646:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002648:	3b01      	subs	r3, #1
 800264a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800264c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	b29a      	uxth	r2, r3
 8002652:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002654:	b29b      	uxth	r3, r3
 8002656:	029b      	lsls	r3, r3, #10
 8002658:	b29b      	uxth	r3, r3
 800265a:	4313      	orrs	r3, r2
 800265c:	b29b      	uxth	r3, r3
 800265e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002666:	b29a      	uxth	r2, r3
 8002668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800266a:	801a      	strh	r2, [r3, #0]
 800266c:	e044      	b.n	80026f8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800266e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10a      	bne.n	800268c <HAL_PCD_EP_DB_Transmit+0x350>
 8002676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	b29b      	uxth	r3, r3
 800267c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002684:	b29a      	uxth	r2, r3
 8002686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002688:	801a      	strh	r2, [r3, #0]
 800268a:	e035      	b.n	80026f8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800268c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002690:	085b      	lsrs	r3, r3, #1
 8002692:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002694:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <HAL_PCD_EP_DB_Transmit+0x36a>
 80026a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026a2:	3301      	adds	r3, #1
 80026a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	029b      	lsls	r3, r3, #10
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	4313      	orrs	r3, r2
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ba:	801a      	strh	r2, [r3, #0]
 80026bc:	e01c      	b.n	80026f8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	785b      	ldrb	r3, [r3, #1]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d118      	bne.n	80026f8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	461a      	mov	r2, r3
 80026d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026da:	4413      	add	r3, r2
 80026dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	011a      	lsls	r2, r3, #4
 80026e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026e6:	4413      	add	r3, r2
 80026e8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80026ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80026ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026f6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	6959      	ldr	r1, [r3, #20]
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	891a      	ldrh	r2, [r3, #8]
 8002704:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002708:	b29b      	uxth	r3, r3
 800270a:	f003 fcd0 	bl	80060ae <USB_WritePMA>
 800270e:	e1e2      	b.n	8002ad6 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002718:	b29b      	uxth	r3, r3
 800271a:	461a      	mov	r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	4413      	add	r3, r2
 8002724:	3306      	adds	r3, #6
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	6812      	ldr	r2, [r2, #0]
 800272c:	4413      	add	r3, r2
 800272e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002738:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	699a      	ldr	r2, [r3, #24]
 8002740:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002744:	429a      	cmp	r2, r3
 8002746:	d307      	bcc.n	8002758 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	699a      	ldr	r2, [r3, #24]
 800274c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002750:	1ad2      	subs	r2, r2, r3
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	619a      	str	r2, [r3, #24]
 8002756:	e002      	b.n	800275e <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2200      	movs	r2, #0
 800275c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	2b00      	cmp	r3, #0
 8002764:	f040 80c0 	bne.w	80028e8 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	785b      	ldrb	r3, [r3, #1]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d126      	bne.n	80027be <HAL_PCD_EP_DB_Transmit+0x482>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800277e:	b29b      	uxth	r3, r3
 8002780:	461a      	mov	r2, r3
 8002782:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002784:	4413      	add	r3, r2
 8002786:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	011a      	lsls	r2, r3, #4
 800278e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002790:	4413      	add	r3, r2
 8002792:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002796:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002798:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	b29b      	uxth	r3, r3
 800279e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027a6:	801a      	strh	r2, [r3, #0]
 80027a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027ba:	801a      	strh	r2, [r3, #0]
 80027bc:	e01a      	b.n	80027f4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	785b      	ldrb	r3, [r3, #1]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d116      	bne.n	80027f4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	461a      	mov	r2, r3
 80027d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027da:	4413      	add	r3, r2
 80027dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	011a      	lsls	r2, r3, #4
 80027e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027e6:	4413      	add	r3, r2
 80027e8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80027ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80027ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027f0:	2200      	movs	r2, #0
 80027f2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	677b      	str	r3, [r7, #116]	@ 0x74
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	785b      	ldrb	r3, [r3, #1]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d12b      	bne.n	800285a <HAL_PCD_EP_DB_Transmit+0x51e>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002810:	b29b      	uxth	r3, r3
 8002812:	461a      	mov	r2, r3
 8002814:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002816:	4413      	add	r3, r2
 8002818:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	011a      	lsls	r2, r3, #4
 8002820:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002822:	4413      	add	r3, r2
 8002824:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002828:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800282c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002830:	881b      	ldrh	r3, [r3, #0]
 8002832:	b29b      	uxth	r3, r3
 8002834:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002838:	b29a      	uxth	r2, r3
 800283a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800283e:	801a      	strh	r2, [r3, #0]
 8002840:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	b29b      	uxth	r3, r3
 8002848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800284c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002850:	b29a      	uxth	r2, r3
 8002852:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002856:	801a      	strh	r2, [r3, #0]
 8002858:	e017      	b.n	800288a <HAL_PCD_EP_DB_Transmit+0x54e>
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	785b      	ldrb	r3, [r3, #1]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d113      	bne.n	800288a <HAL_PCD_EP_DB_Transmit+0x54e>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800286a:	b29b      	uxth	r3, r3
 800286c:	461a      	mov	r2, r3
 800286e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002870:	4413      	add	r3, r2
 8002872:	677b      	str	r3, [r7, #116]	@ 0x74
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	011a      	lsls	r2, r3, #4
 800287a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800287c:	4413      	add	r3, r2
 800287e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002882:	673b      	str	r3, [r7, #112]	@ 0x70
 8002884:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002886:	2200      	movs	r2, #0
 8002888:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	4619      	mov	r1, r3
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f005 fa52 	bl	8007d3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002896:	88fb      	ldrh	r3, [r7, #6]
 8002898:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800289c:	2b00      	cmp	r3, #0
 800289e:	f040 811a 	bne.w	8002ad6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028bc:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	461a      	mov	r2, r3
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	441a      	add	r2, r3
 80028ce:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80028d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80028d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80028da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	8013      	strh	r3, [r2, #0]
 80028e6:	e0f6      	b.n	8002ad6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80028e8:	88fb      	ldrh	r3, [r7, #6]
 80028ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d121      	bne.n	8002936 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	881b      	ldrh	r3, [r3, #0]
 8002902:	b29b      	uxth	r3, r3
 8002904:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002908:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800290c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	461a      	mov	r2, r3
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	441a      	add	r2, r3
 800291e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002922:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002926:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800292a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800292e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002932:	b29b      	uxth	r3, r3
 8002934:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800293c:	2b01      	cmp	r3, #1
 800293e:	f040 80ca 	bne.w	8002ad6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800294a:	441a      	add	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	69da      	ldr	r2, [r3, #28]
 8002954:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002958:	441a      	add	r2, r3
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	6a1a      	ldr	r2, [r3, #32]
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	429a      	cmp	r2, r3
 8002968:	d30b      	bcc.n	8002982 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	6a1a      	ldr	r2, [r3, #32]
 8002976:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800297a:	1ad2      	subs	r2, r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	621a      	str	r2, [r3, #32]
 8002980:	e017      	b.n	80029b2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d108      	bne.n	800299c <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800298a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800298e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800299a:	e00a      	b.n	80029b2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2200      	movs	r2, #0
 80029a8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	785b      	ldrb	r3, [r3, #1]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d165      	bne.n	8002a8c <HAL_PCD_EP_DB_Transmit+0x750>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	461a      	mov	r2, r3
 80029d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029d4:	4413      	add	r3, r2
 80029d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	011a      	lsls	r2, r3, #4
 80029de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029e0:	4413      	add	r3, r2
 80029e2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80029e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80029e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029f6:	801a      	strh	r2, [r3, #0]
 80029f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80029fe:	d91d      	bls.n	8002a3c <HAL_PCD_EP_DB_Transmit+0x700>
 8002a00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a04:	095b      	lsrs	r3, r3, #5
 8002a06:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d102      	bne.n	8002a1a <HAL_PCD_EP_DB_Transmit+0x6de>
 8002a14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a16:	3b01      	subs	r3, #1
 8002a18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	029b      	lsls	r3, r3, #10
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a38:	801a      	strh	r2, [r3, #0]
 8002a3a:	e041      	b.n	8002ac0 <HAL_PCD_EP_DB_Transmit+0x784>
 8002a3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10a      	bne.n	8002a5a <HAL_PCD_EP_DB_Transmit+0x71e>
 8002a44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a56:	801a      	strh	r2, [r3, #0]
 8002a58:	e032      	b.n	8002ac0 <HAL_PCD_EP_DB_Transmit+0x784>
 8002a5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a5e:	085b      	lsrs	r3, r3, #1
 8002a60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d002      	beq.n	8002a74 <HAL_PCD_EP_DB_Transmit+0x738>
 8002a6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a70:	3301      	adds	r3, #1
 8002a72:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a76:	881b      	ldrh	r3, [r3, #0]
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	029b      	lsls	r3, r3, #10
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	4313      	orrs	r3, r2
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a88:	801a      	strh	r2, [r3, #0]
 8002a8a:	e019      	b.n	8002ac0 <HAL_PCD_EP_DB_Transmit+0x784>
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	785b      	ldrb	r3, [r3, #1]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d115      	bne.n	8002ac0 <HAL_PCD_EP_DB_Transmit+0x784>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aa2:	4413      	add	r3, r2
 8002aa4:	657b      	str	r3, [r7, #84]	@ 0x54
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	011a      	lsls	r2, r3, #4
 8002aac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aae:	4413      	add	r3, r2
 8002ab0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002ab4:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002abe:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6818      	ldr	r0, [r3, #0]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	6959      	ldr	r1, [r3, #20]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	895a      	ldrh	r2, [r3, #10]
 8002acc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	f003 faec 	bl	80060ae <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002aec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002af0:	82bb      	strh	r3, [r7, #20]
 8002af2:	8abb      	ldrh	r3, [r7, #20]
 8002af4:	f083 0310 	eor.w	r3, r3, #16
 8002af8:	82bb      	strh	r3, [r7, #20]
 8002afa:	8abb      	ldrh	r3, [r7, #20]
 8002afc:	f083 0320 	eor.w	r3, r3, #32
 8002b00:	82bb      	strh	r3, [r7, #20]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	441a      	add	r2, r3
 8002b10:	8abb      	ldrh	r3, [r7, #20]
 8002b12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3790      	adds	r7, #144	@ 0x90
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	607b      	str	r3, [r7, #4]
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	817b      	strh	r3, [r7, #10]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002b42:	897b      	ldrh	r3, [r7, #10]
 8002b44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00b      	beq.n	8002b66 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b4e:	897b      	ldrh	r3, [r7, #10]
 8002b50:	f003 0207 	and.w	r2, r3, #7
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	3310      	adds	r3, #16
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	4413      	add	r3, r2
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	e009      	b.n	8002b7a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b66:	897a      	ldrh	r2, [r7, #10]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4413      	add	r3, r2
 8002b78:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002b7a:	893b      	ldrh	r3, [r7, #8]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d107      	bne.n	8002b90 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	2200      	movs	r2, #0
 8002b84:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	80da      	strh	r2, [r3, #6]
 8002b8e:	e00b      	b.n	8002ba8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	2201      	movs	r2, #1
 8002b94:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	0c1b      	lsrs	r3, r3, #16
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	371c      	adds	r7, #28
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e272      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 8087 	beq.w	8002ce2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bd4:	4b92      	ldr	r3, [pc, #584]	@ (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 030c 	and.w	r3, r3, #12
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d00c      	beq.n	8002bfa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002be0:	4b8f      	ldr	r3, [pc, #572]	@ (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 030c 	and.w	r3, r3, #12
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d112      	bne.n	8002c12 <HAL_RCC_OscConfig+0x5e>
 8002bec:	4b8c      	ldr	r3, [pc, #560]	@ (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bf8:	d10b      	bne.n	8002c12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bfa:	4b89      	ldr	r3, [pc, #548]	@ (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d06c      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x12c>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d168      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e24c      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c1a:	d106      	bne.n	8002c2a <HAL_RCC_OscConfig+0x76>
 8002c1c:	4b80      	ldr	r3, [pc, #512]	@ (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a7f      	ldr	r2, [pc, #508]	@ (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c26:	6013      	str	r3, [r2, #0]
 8002c28:	e02e      	b.n	8002c88 <HAL_RCC_OscConfig+0xd4>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10c      	bne.n	8002c4c <HAL_RCC_OscConfig+0x98>
 8002c32:	4b7b      	ldr	r3, [pc, #492]	@ (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a7a      	ldr	r2, [pc, #488]	@ (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	4b78      	ldr	r3, [pc, #480]	@ (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a77      	ldr	r2, [pc, #476]	@ (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	e01d      	b.n	8002c88 <HAL_RCC_OscConfig+0xd4>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c54:	d10c      	bne.n	8002c70 <HAL_RCC_OscConfig+0xbc>
 8002c56:	4b72      	ldr	r3, [pc, #456]	@ (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a71      	ldr	r2, [pc, #452]	@ (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	4b6f      	ldr	r3, [pc, #444]	@ (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a6e      	ldr	r2, [pc, #440]	@ (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	e00b      	b.n	8002c88 <HAL_RCC_OscConfig+0xd4>
 8002c70:	4b6b      	ldr	r3, [pc, #428]	@ (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a6a      	ldr	r2, [pc, #424]	@ (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	4b68      	ldr	r3, [pc, #416]	@ (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a67      	ldr	r2, [pc, #412]	@ (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d013      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c90:	f7fd ff58 	bl	8000b44 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c98:	f7fd ff54 	bl	8000b44 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b64      	cmp	r3, #100	@ 0x64
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e200      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002caa:	4b5d      	ldr	r3, [pc, #372]	@ (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0f0      	beq.n	8002c98 <HAL_RCC_OscConfig+0xe4>
 8002cb6:	e014      	b.n	8002ce2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb8:	f7fd ff44 	bl	8000b44 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc0:	f7fd ff40 	bl	8000b44 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b64      	cmp	r3, #100	@ 0x64
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e1ec      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cd2:	4b53      	ldr	r3, [pc, #332]	@ (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x10c>
 8002cde:	e000      	b.n	8002ce2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d063      	beq.n	8002db6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cee:	4b4c      	ldr	r3, [pc, #304]	@ (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f003 030c 	and.w	r3, r3, #12
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00b      	beq.n	8002d12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cfa:	4b49      	ldr	r3, [pc, #292]	@ (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d11c      	bne.n	8002d40 <HAL_RCC_OscConfig+0x18c>
 8002d06:	4b46      	ldr	r3, [pc, #280]	@ (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d116      	bne.n	8002d40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d12:	4b43      	ldr	r3, [pc, #268]	@ (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d005      	beq.n	8002d2a <HAL_RCC_OscConfig+0x176>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d001      	beq.n	8002d2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e1c0      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d2a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	4939      	ldr	r1, [pc, #228]	@ (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d3e:	e03a      	b.n	8002db6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d020      	beq.n	8002d8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d48:	4b36      	ldr	r3, [pc, #216]	@ (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4e:	f7fd fef9 	bl	8000b44 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d56:	f7fd fef5 	bl	8000b44 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e1a1      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d68:	4b2d      	ldr	r3, [pc, #180]	@ (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0f0      	beq.n	8002d56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d74:	4b2a      	ldr	r3, [pc, #168]	@ (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	4927      	ldr	r1, [pc, #156]	@ (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	600b      	str	r3, [r1, #0]
 8002d88:	e015      	b.n	8002db6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d8a:	4b26      	ldr	r3, [pc, #152]	@ (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d90:	f7fd fed8 	bl	8000b44 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d98:	f7fd fed4 	bl	8000b44 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e180      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002daa:	4b1d      	ldr	r3, [pc, #116]	@ (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f0      	bne.n	8002d98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d03a      	beq.n	8002e38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d019      	beq.n	8002dfe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dca:	4b17      	ldr	r3, [pc, #92]	@ (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002dcc:	2201      	movs	r2, #1
 8002dce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd0:	f7fd feb8 	bl	8000b44 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd8:	f7fd feb4 	bl	8000b44 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e160      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dea:	4b0d      	ldr	r3, [pc, #52]	@ (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0f0      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002df6:	2001      	movs	r0, #1
 8002df8:	f000 fa9c 	bl	8003334 <RCC_Delay>
 8002dfc:	e01c      	b.n	8002e38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e04:	f7fd fe9e 	bl	8000b44 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e0a:	e00f      	b.n	8002e2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e0c:	f7fd fe9a 	bl	8000b44 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d908      	bls.n	8002e2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e146      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
 8002e1e:	bf00      	nop
 8002e20:	40021000 	.word	0x40021000
 8002e24:	42420000 	.word	0x42420000
 8002e28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e2c:	4b92      	ldr	r3, [pc, #584]	@ (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1e9      	bne.n	8002e0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 80a6 	beq.w	8002f92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e46:	2300      	movs	r3, #0
 8002e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e4a:	4b8b      	ldr	r3, [pc, #556]	@ (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10d      	bne.n	8002e72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e56:	4b88      	ldr	r3, [pc, #544]	@ (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	4a87      	ldr	r2, [pc, #540]	@ (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002e5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e60:	61d3      	str	r3, [r2, #28]
 8002e62:	4b85      	ldr	r3, [pc, #532]	@ (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e72:	4b82      	ldr	r3, [pc, #520]	@ (800307c <HAL_RCC_OscConfig+0x4c8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d118      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e7e:	4b7f      	ldr	r3, [pc, #508]	@ (800307c <HAL_RCC_OscConfig+0x4c8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a7e      	ldr	r2, [pc, #504]	@ (800307c <HAL_RCC_OscConfig+0x4c8>)
 8002e84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e8a:	f7fd fe5b 	bl	8000b44 <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e92:	f7fd fe57 	bl	8000b44 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b64      	cmp	r3, #100	@ 0x64
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e103      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea4:	4b75      	ldr	r3, [pc, #468]	@ (800307c <HAL_RCC_OscConfig+0x4c8>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0f0      	beq.n	8002e92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d106      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x312>
 8002eb8:	4b6f      	ldr	r3, [pc, #444]	@ (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	4a6e      	ldr	r2, [pc, #440]	@ (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	6213      	str	r3, [r2, #32]
 8002ec4:	e02d      	b.n	8002f22 <HAL_RCC_OscConfig+0x36e>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10c      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x334>
 8002ece:	4b6a      	ldr	r3, [pc, #424]	@ (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	4a69      	ldr	r2, [pc, #420]	@ (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002ed4:	f023 0301 	bic.w	r3, r3, #1
 8002ed8:	6213      	str	r3, [r2, #32]
 8002eda:	4b67      	ldr	r3, [pc, #412]	@ (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	4a66      	ldr	r2, [pc, #408]	@ (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002ee0:	f023 0304 	bic.w	r3, r3, #4
 8002ee4:	6213      	str	r3, [r2, #32]
 8002ee6:	e01c      	b.n	8002f22 <HAL_RCC_OscConfig+0x36e>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	2b05      	cmp	r3, #5
 8002eee:	d10c      	bne.n	8002f0a <HAL_RCC_OscConfig+0x356>
 8002ef0:	4b61      	ldr	r3, [pc, #388]	@ (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	4a60      	ldr	r2, [pc, #384]	@ (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002ef6:	f043 0304 	orr.w	r3, r3, #4
 8002efa:	6213      	str	r3, [r2, #32]
 8002efc:	4b5e      	ldr	r3, [pc, #376]	@ (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	4a5d      	ldr	r2, [pc, #372]	@ (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002f02:	f043 0301 	orr.w	r3, r3, #1
 8002f06:	6213      	str	r3, [r2, #32]
 8002f08:	e00b      	b.n	8002f22 <HAL_RCC_OscConfig+0x36e>
 8002f0a:	4b5b      	ldr	r3, [pc, #364]	@ (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	4a5a      	ldr	r2, [pc, #360]	@ (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002f10:	f023 0301 	bic.w	r3, r3, #1
 8002f14:	6213      	str	r3, [r2, #32]
 8002f16:	4b58      	ldr	r3, [pc, #352]	@ (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	4a57      	ldr	r2, [pc, #348]	@ (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002f1c:	f023 0304 	bic.w	r3, r3, #4
 8002f20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d015      	beq.n	8002f56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2a:	f7fd fe0b 	bl	8000b44 <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f30:	e00a      	b.n	8002f48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f32:	f7fd fe07 	bl	8000b44 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e0b1      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f48:	4b4b      	ldr	r3, [pc, #300]	@ (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0ee      	beq.n	8002f32 <HAL_RCC_OscConfig+0x37e>
 8002f54:	e014      	b.n	8002f80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f56:	f7fd fdf5 	bl	8000b44 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f5c:	e00a      	b.n	8002f74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f5e:	f7fd fdf1 	bl	8000b44 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e09b      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f74:	4b40      	ldr	r3, [pc, #256]	@ (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1ee      	bne.n	8002f5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f80:	7dfb      	ldrb	r3, [r7, #23]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d105      	bne.n	8002f92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f86:	4b3c      	ldr	r3, [pc, #240]	@ (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	4a3b      	ldr	r2, [pc, #236]	@ (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002f8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 8087 	beq.w	80030aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f9c:	4b36      	ldr	r3, [pc, #216]	@ (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 030c 	and.w	r3, r3, #12
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d061      	beq.n	800306c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d146      	bne.n	800303e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb0:	4b33      	ldr	r3, [pc, #204]	@ (8003080 <HAL_RCC_OscConfig+0x4cc>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb6:	f7fd fdc5 	bl	8000b44 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fbe:	f7fd fdc1 	bl	8000b44 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e06d      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fd0:	4b29      	ldr	r3, [pc, #164]	@ (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1f0      	bne.n	8002fbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fe4:	d108      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fe6:	4b24      	ldr	r3, [pc, #144]	@ (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	4921      	ldr	r1, [pc, #132]	@ (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a19      	ldr	r1, [r3, #32]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003008:	430b      	orrs	r3, r1
 800300a:	491b      	ldr	r1, [pc, #108]	@ (8003078 <HAL_RCC_OscConfig+0x4c4>)
 800300c:	4313      	orrs	r3, r2
 800300e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003010:	4b1b      	ldr	r3, [pc, #108]	@ (8003080 <HAL_RCC_OscConfig+0x4cc>)
 8003012:	2201      	movs	r2, #1
 8003014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003016:	f7fd fd95 	bl	8000b44 <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800301e:	f7fd fd91 	bl	8000b44 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e03d      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003030:	4b11      	ldr	r3, [pc, #68]	@ (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0f0      	beq.n	800301e <HAL_RCC_OscConfig+0x46a>
 800303c:	e035      	b.n	80030aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800303e:	4b10      	ldr	r3, [pc, #64]	@ (8003080 <HAL_RCC_OscConfig+0x4cc>)
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003044:	f7fd fd7e 	bl	8000b44 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800304c:	f7fd fd7a 	bl	8000b44 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e026      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800305e:	4b06      	ldr	r3, [pc, #24]	@ (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1f0      	bne.n	800304c <HAL_RCC_OscConfig+0x498>
 800306a:	e01e      	b.n	80030aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d107      	bne.n	8003084 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e019      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
 8003078:	40021000 	.word	0x40021000
 800307c:	40007000 	.word	0x40007000
 8003080:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003084:	4b0b      	ldr	r3, [pc, #44]	@ (80030b4 <HAL_RCC_OscConfig+0x500>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	429a      	cmp	r2, r3
 8003096:	d106      	bne.n	80030a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d001      	beq.n	80030aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40021000 	.word	0x40021000

080030b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0d0      	b.n	800326e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030cc:	4b6a      	ldr	r3, [pc, #424]	@ (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d910      	bls.n	80030fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030da:	4b67      	ldr	r3, [pc, #412]	@ (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 0207 	bic.w	r2, r3, #7
 80030e2:	4965      	ldr	r1, [pc, #404]	@ (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ea:	4b63      	ldr	r3, [pc, #396]	@ (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d001      	beq.n	80030fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0b8      	b.n	800326e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d020      	beq.n	800314a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003114:	4b59      	ldr	r3, [pc, #356]	@ (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	4a58      	ldr	r2, [pc, #352]	@ (800327c <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800311e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800312c:	4b53      	ldr	r3, [pc, #332]	@ (800327c <HAL_RCC_ClockConfig+0x1c4>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	4a52      	ldr	r2, [pc, #328]	@ (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003132:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003136:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003138:	4b50      	ldr	r3, [pc, #320]	@ (800327c <HAL_RCC_ClockConfig+0x1c4>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	494d      	ldr	r1, [pc, #308]	@ (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003146:	4313      	orrs	r3, r2
 8003148:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d040      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d107      	bne.n	800316e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315e:	4b47      	ldr	r3, [pc, #284]	@ (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d115      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e07f      	b.n	800326e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d107      	bne.n	8003186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003176:	4b41      	ldr	r3, [pc, #260]	@ (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e073      	b.n	800326e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003186:	4b3d      	ldr	r3, [pc, #244]	@ (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e06b      	b.n	800326e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003196:	4b39      	ldr	r3, [pc, #228]	@ (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f023 0203 	bic.w	r2, r3, #3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	4936      	ldr	r1, [pc, #216]	@ (800327c <HAL_RCC_ClockConfig+0x1c4>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031a8:	f7fd fccc 	bl	8000b44 <HAL_GetTick>
 80031ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ae:	e00a      	b.n	80031c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b0:	f7fd fcc8 	bl	8000b44 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031be:	4293      	cmp	r3, r2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e053      	b.n	800326e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c6:	4b2d      	ldr	r3, [pc, #180]	@ (800327c <HAL_RCC_ClockConfig+0x1c4>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 020c 	and.w	r2, r3, #12
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d1eb      	bne.n	80031b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031d8:	4b27      	ldr	r3, [pc, #156]	@ (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d210      	bcs.n	8003208 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e6:	4b24      	ldr	r3, [pc, #144]	@ (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f023 0207 	bic.w	r2, r3, #7
 80031ee:	4922      	ldr	r1, [pc, #136]	@ (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f6:	4b20      	ldr	r3, [pc, #128]	@ (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	d001      	beq.n	8003208 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e032      	b.n	800326e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d008      	beq.n	8003226 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003214:	4b19      	ldr	r3, [pc, #100]	@ (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	4916      	ldr	r1, [pc, #88]	@ (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003222:	4313      	orrs	r3, r2
 8003224:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d009      	beq.n	8003246 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003232:	4b12      	ldr	r3, [pc, #72]	@ (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	490e      	ldr	r1, [pc, #56]	@ (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003242:	4313      	orrs	r3, r2
 8003244:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003246:	f000 f821 	bl	800328c <HAL_RCC_GetSysClockFreq>
 800324a:	4602      	mov	r2, r0
 800324c:	4b0b      	ldr	r3, [pc, #44]	@ (800327c <HAL_RCC_ClockConfig+0x1c4>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	091b      	lsrs	r3, r3, #4
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	490a      	ldr	r1, [pc, #40]	@ (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 8003258:	5ccb      	ldrb	r3, [r1, r3]
 800325a:	fa22 f303 	lsr.w	r3, r2, r3
 800325e:	4a09      	ldr	r2, [pc, #36]	@ (8003284 <HAL_RCC_ClockConfig+0x1cc>)
 8003260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003262:	4b09      	ldr	r3, [pc, #36]	@ (8003288 <HAL_RCC_ClockConfig+0x1d0>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7fd fc2a 	bl	8000ac0 <HAL_InitTick>

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40022000 	.word	0x40022000
 800327c:	40021000 	.word	0x40021000
 8003280:	08008be4 	.word	0x08008be4
 8003284:	20000000 	.word	0x20000000
 8003288:	20000004 	.word	0x20000004

0800328c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800328c:	b480      	push	{r7}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	2300      	movs	r3, #0
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	2300      	movs	r3, #0
 800329c:	617b      	str	r3, [r7, #20]
 800329e:	2300      	movs	r3, #0
 80032a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003320 <HAL_RCC_GetSysClockFreq+0x94>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f003 030c 	and.w	r3, r3, #12
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d002      	beq.n	80032bc <HAL_RCC_GetSysClockFreq+0x30>
 80032b6:	2b08      	cmp	r3, #8
 80032b8:	d003      	beq.n	80032c2 <HAL_RCC_GetSysClockFreq+0x36>
 80032ba:	e027      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032bc:	4b19      	ldr	r3, [pc, #100]	@ (8003324 <HAL_RCC_GetSysClockFreq+0x98>)
 80032be:	613b      	str	r3, [r7, #16]
      break;
 80032c0:	e027      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	0c9b      	lsrs	r3, r3, #18
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	4a17      	ldr	r2, [pc, #92]	@ (8003328 <HAL_RCC_GetSysClockFreq+0x9c>)
 80032cc:	5cd3      	ldrb	r3, [r2, r3]
 80032ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d010      	beq.n	80032fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032da:	4b11      	ldr	r3, [pc, #68]	@ (8003320 <HAL_RCC_GetSysClockFreq+0x94>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	0c5b      	lsrs	r3, r3, #17
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	4a11      	ldr	r2, [pc, #68]	@ (800332c <HAL_RCC_GetSysClockFreq+0xa0>)
 80032e6:	5cd3      	ldrb	r3, [r2, r3]
 80032e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003324 <HAL_RCC_GetSysClockFreq+0x98>)
 80032ee:	fb03 f202 	mul.w	r2, r3, r2
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f8:	617b      	str	r3, [r7, #20]
 80032fa:	e004      	b.n	8003306 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a0c      	ldr	r2, [pc, #48]	@ (8003330 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003300:	fb02 f303 	mul.w	r3, r2, r3
 8003304:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	613b      	str	r3, [r7, #16]
      break;
 800330a:	e002      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800330c:	4b05      	ldr	r3, [pc, #20]	@ (8003324 <HAL_RCC_GetSysClockFreq+0x98>)
 800330e:	613b      	str	r3, [r7, #16]
      break;
 8003310:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003312:	693b      	ldr	r3, [r7, #16]
}
 8003314:	4618      	mov	r0, r3
 8003316:	371c      	adds	r7, #28
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40021000 	.word	0x40021000
 8003324:	007a1200 	.word	0x007a1200
 8003328:	08008bf4 	.word	0x08008bf4
 800332c:	08008c04 	.word	0x08008c04
 8003330:	003d0900 	.word	0x003d0900

08003334 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800333c:	4b0a      	ldr	r3, [pc, #40]	@ (8003368 <RCC_Delay+0x34>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a0a      	ldr	r2, [pc, #40]	@ (800336c <RCC_Delay+0x38>)
 8003342:	fba2 2303 	umull	r2, r3, r2, r3
 8003346:	0a5b      	lsrs	r3, r3, #9
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	fb02 f303 	mul.w	r3, r2, r3
 800334e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003350:	bf00      	nop
  }
  while (Delay --);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1e5a      	subs	r2, r3, #1
 8003356:	60fa      	str	r2, [r7, #12]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1f9      	bne.n	8003350 <RCC_Delay+0x1c>
}
 800335c:	bf00      	nop
 800335e:	bf00      	nop
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	bc80      	pop	{r7}
 8003366:	4770      	bx	lr
 8003368:	20000000 	.word	0x20000000
 800336c:	10624dd3 	.word	0x10624dd3

08003370 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	613b      	str	r3, [r7, #16]
 800337c:	2300      	movs	r3, #0
 800337e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b00      	cmp	r3, #0
 800338a:	d07d      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800338c:	2300      	movs	r3, #0
 800338e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003390:	4b4f      	ldr	r3, [pc, #316]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10d      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800339c:	4b4c      	ldr	r3, [pc, #304]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	4a4b      	ldr	r2, [pc, #300]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033a6:	61d3      	str	r3, [r2, #28]
 80033a8:	4b49      	ldr	r3, [pc, #292]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033b0:	60bb      	str	r3, [r7, #8]
 80033b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033b4:	2301      	movs	r3, #1
 80033b6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b8:	4b46      	ldr	r3, [pc, #280]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d118      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033c4:	4b43      	ldr	r3, [pc, #268]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a42      	ldr	r2, [pc, #264]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033d0:	f7fd fbb8 	bl	8000b44 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d6:	e008      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d8:	f7fd fbb4 	bl	8000b44 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b64      	cmp	r3, #100	@ 0x64
 80033e4:	d901      	bls.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e06d      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ea:	4b3a      	ldr	r3, [pc, #232]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033f6:	4b36      	ldr	r3, [pc, #216]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033fe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d02e      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	429a      	cmp	r2, r3
 8003412:	d027      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003414:	4b2e      	ldr	r3, [pc, #184]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800341c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800341e:	4b2e      	ldr	r3, [pc, #184]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003420:	2201      	movs	r2, #1
 8003422:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003424:	4b2c      	ldr	r3, [pc, #176]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800342a:	4a29      	ldr	r2, [pc, #164]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d014      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343a:	f7fd fb83 	bl	8000b44 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003440:	e00a      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003442:	f7fd fb7f 	bl	8000b44 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003450:	4293      	cmp	r3, r2
 8003452:	d901      	bls.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e036      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003458:	4b1d      	ldr	r3, [pc, #116]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0ee      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003464:	4b1a      	ldr	r3, [pc, #104]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	4917      	ldr	r1, [pc, #92]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003472:	4313      	orrs	r3, r2
 8003474:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003476:	7dfb      	ldrb	r3, [r7, #23]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d105      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800347c:	4b14      	ldr	r3, [pc, #80]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	4a13      	ldr	r2, [pc, #76]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003482:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003486:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d008      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003494:	4b0e      	ldr	r3, [pc, #56]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	490b      	ldr	r1, [pc, #44]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0310 	and.w	r3, r3, #16
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d008      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034b2:	4b07      	ldr	r3, [pc, #28]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	4904      	ldr	r1, [pc, #16]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40021000 	.word	0x40021000
 80034d4:	40007000 	.word	0x40007000
 80034d8:	42420440 	.word	0x42420440

080034dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e076      	b.n	80035dc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d108      	bne.n	8003508 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034fe:	d009      	beq.n	8003514 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	61da      	str	r2, [r3, #28]
 8003506:	e005      	b.n	8003514 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d106      	bne.n	8003534 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7fd f99c 	bl	800086c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2202      	movs	r2, #2
 8003538:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800354a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800355c:	431a      	orrs	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	431a      	orrs	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003584:	431a      	orrs	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003598:	ea42 0103 	orr.w	r1, r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	0c1a      	lsrs	r2, r3, #16
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f002 0204 	and.w	r2, r2, #4
 80035ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	69da      	ldr	r2, [r3, #28]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b08a      	sub	sp, #40	@ 0x28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
 80035f0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80035f2:	2301      	movs	r3, #1
 80035f4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035f6:	f7fd faa5 	bl	8000b44 <HAL_GetTick>
 80035fa:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003602:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800360a:	887b      	ldrh	r3, [r7, #2]
 800360c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800360e:	7ffb      	ldrb	r3, [r7, #31]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d00c      	beq.n	800362e <HAL_SPI_TransmitReceive+0x4a>
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800361a:	d106      	bne.n	800362a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d102      	bne.n	800362a <HAL_SPI_TransmitReceive+0x46>
 8003624:	7ffb      	ldrb	r3, [r7, #31]
 8003626:	2b04      	cmp	r3, #4
 8003628:	d001      	beq.n	800362e <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800362a:	2302      	movs	r3, #2
 800362c:	e17f      	b.n	800392e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d005      	beq.n	8003640 <HAL_SPI_TransmitReceive+0x5c>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <HAL_SPI_TransmitReceive+0x5c>
 800363a:	887b      	ldrh	r3, [r7, #2]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e174      	b.n	800392e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_SPI_TransmitReceive+0x6e>
 800364e:	2302      	movs	r3, #2
 8003650:	e16d      	b.n	800392e <HAL_SPI_TransmitReceive+0x34a>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b04      	cmp	r3, #4
 8003664:	d003      	beq.n	800366e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2205      	movs	r2, #5
 800366a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	887a      	ldrh	r2, [r7, #2]
 800367e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	887a      	ldrh	r2, [r7, #2]
 8003684:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	887a      	ldrh	r2, [r7, #2]
 8003690:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	887a      	ldrh	r2, [r7, #2]
 8003696:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ae:	2b40      	cmp	r3, #64	@ 0x40
 80036b0:	d007      	beq.n	80036c2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036ca:	d17e      	bne.n	80037ca <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d002      	beq.n	80036da <HAL_SPI_TransmitReceive+0xf6>
 80036d4:	8afb      	ldrh	r3, [r7, #22]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d16c      	bne.n	80037b4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036de:	881a      	ldrh	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ea:	1c9a      	adds	r2, r3, #2
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	3b01      	subs	r3, #1
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036fe:	e059      	b.n	80037b4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b02      	cmp	r3, #2
 800370c:	d11b      	bne.n	8003746 <HAL_SPI_TransmitReceive+0x162>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d016      	beq.n	8003746 <HAL_SPI_TransmitReceive+0x162>
 8003718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371a:	2b01      	cmp	r3, #1
 800371c:	d113      	bne.n	8003746 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003722:	881a      	ldrh	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372e:	1c9a      	adds	r2, r3, #2
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003738:	b29b      	uxth	r3, r3
 800373a:	3b01      	subs	r3, #1
 800373c:	b29a      	uxth	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003742:	2300      	movs	r3, #0
 8003744:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b01      	cmp	r3, #1
 8003752:	d119      	bne.n	8003788 <HAL_SPI_TransmitReceive+0x1a4>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003758:	b29b      	uxth	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d014      	beq.n	8003788 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68da      	ldr	r2, [r3, #12]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003768:	b292      	uxth	r2, r2
 800376a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003770:	1c9a      	adds	r2, r3, #2
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800377a:	b29b      	uxth	r3, r3
 800377c:	3b01      	subs	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003784:	2301      	movs	r3, #1
 8003786:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003788:	f7fd f9dc 	bl	8000b44 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003794:	429a      	cmp	r2, r3
 8003796:	d80d      	bhi.n	80037b4 <HAL_SPI_TransmitReceive+0x1d0>
 8003798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800379a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379e:	d009      	beq.n	80037b4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e0bc      	b.n	800392e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1a0      	bne.n	8003700 <HAL_SPI_TransmitReceive+0x11c>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d19b      	bne.n	8003700 <HAL_SPI_TransmitReceive+0x11c>
 80037c8:	e082      	b.n	80038d0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <HAL_SPI_TransmitReceive+0x1f4>
 80037d2:	8afb      	ldrh	r3, [r7, #22]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d171      	bne.n	80038bc <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	330c      	adds	r3, #12
 80037e2:	7812      	ldrb	r2, [r2, #0]
 80037e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ea:	1c5a      	adds	r2, r3, #1
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	3b01      	subs	r3, #1
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037fe:	e05d      	b.n	80038bc <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b02      	cmp	r3, #2
 800380c:	d11c      	bne.n	8003848 <HAL_SPI_TransmitReceive+0x264>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003812:	b29b      	uxth	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d017      	beq.n	8003848 <HAL_SPI_TransmitReceive+0x264>
 8003818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381a:	2b01      	cmp	r3, #1
 800381c:	d114      	bne.n	8003848 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	330c      	adds	r3, #12
 8003828:	7812      	ldrb	r2, [r2, #0]
 800382a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003830:	1c5a      	adds	r2, r3, #1
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800383a:	b29b      	uxth	r3, r3
 800383c:	3b01      	subs	r3, #1
 800383e:	b29a      	uxth	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b01      	cmp	r3, #1
 8003854:	d119      	bne.n	800388a <HAL_SPI_TransmitReceive+0x2a6>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800385a:	b29b      	uxth	r3, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	d014      	beq.n	800388a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003872:	1c5a      	adds	r2, r3, #1
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800387c:	b29b      	uxth	r3, r3
 800387e:	3b01      	subs	r3, #1
 8003880:	b29a      	uxth	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003886:	2301      	movs	r3, #1
 8003888:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800388a:	f7fd f95b 	bl	8000b44 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003896:	429a      	cmp	r2, r3
 8003898:	d803      	bhi.n	80038a2 <HAL_SPI_TransmitReceive+0x2be>
 800389a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a0:	d102      	bne.n	80038a8 <HAL_SPI_TransmitReceive+0x2c4>
 80038a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d109      	bne.n	80038bc <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e038      	b.n	800392e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d19c      	bne.n	8003800 <HAL_SPI_TransmitReceive+0x21c>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d197      	bne.n	8003800 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038d0:	6a3a      	ldr	r2, [r7, #32]
 80038d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 f8b7 	bl	8003a48 <SPI_EndRxTxTransaction>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d008      	beq.n	80038f2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2220      	movs	r2, #32
 80038e4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e01d      	b.n	800392e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10a      	bne.n	8003910 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038fa:	2300      	movs	r3, #0
 80038fc:	613b      	str	r3, [r7, #16]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e000      	b.n	800392e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800392c:	2300      	movs	r3, #0
  }
}
 800392e:	4618      	mov	r0, r3
 8003930:	3728      	adds	r7, #40	@ 0x28
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
	...

08003938 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b088      	sub	sp, #32
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	603b      	str	r3, [r7, #0]
 8003944:	4613      	mov	r3, r2
 8003946:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003948:	f7fd f8fc 	bl	8000b44 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003950:	1a9b      	subs	r3, r3, r2
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	4413      	add	r3, r2
 8003956:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003958:	f7fd f8f4 	bl	8000b44 <HAL_GetTick>
 800395c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800395e:	4b39      	ldr	r3, [pc, #228]	@ (8003a44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	015b      	lsls	r3, r3, #5
 8003964:	0d1b      	lsrs	r3, r3, #20
 8003966:	69fa      	ldr	r2, [r7, #28]
 8003968:	fb02 f303 	mul.w	r3, r2, r3
 800396c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800396e:	e054      	b.n	8003a1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003976:	d050      	beq.n	8003a1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003978:	f7fd f8e4 	bl	8000b44 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	69fa      	ldr	r2, [r7, #28]
 8003984:	429a      	cmp	r2, r3
 8003986:	d902      	bls.n	800398e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d13d      	bne.n	8003a0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800399c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039a6:	d111      	bne.n	80039cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039b0:	d004      	beq.n	80039bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039ba:	d107      	bne.n	80039cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039d4:	d10f      	bne.n	80039f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e017      	b.n	8003a3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	4013      	ands	r3, r2
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	bf0c      	ite	eq
 8003a2a:	2301      	moveq	r3, #1
 8003a2c:	2300      	movne	r3, #0
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	461a      	mov	r2, r3
 8003a32:	79fb      	ldrb	r3, [r7, #7]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d19b      	bne.n	8003970 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3720      	adds	r7, #32
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	20000000 	.word	0x20000000

08003a48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af02      	add	r7, sp, #8
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	2102      	movs	r1, #2
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f7ff ff6a 	bl	8003938 <SPI_WaitFlagStateUntilTimeout>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d007      	beq.n	8003a7a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a6e:	f043 0220 	orr.w	r2, r3, #32
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e013      	b.n	8003aa2 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2200      	movs	r2, #0
 8003a82:	2180      	movs	r1, #128	@ 0x80
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f7ff ff57 	bl	8003938 <SPI_WaitFlagStateUntilTimeout>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d007      	beq.n	8003aa0 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a94:	f043 0220 	orr.w	r2, r3, #32
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e000      	b.n	8003aa2 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b085      	sub	sp, #20
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	60f8      	str	r0, [r7, #12]
 8003ab2:	4638      	mov	r0, r7
 8003ab4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr

08003ac4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ad4:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003ad8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr

08003af0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003af8:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003afc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	43db      	mvns	r3, r3
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	4013      	ands	r3, r2
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr

08003b24 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr

08003b3c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	4638      	mov	r0, r7
 8003b46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3714      	adds	r7, #20
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr
	...

08003b78 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b09d      	sub	sp, #116	@ 0x74
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003b82:	2300      	movs	r3, #0
 8003b84:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4413      	add	r3, r2
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8003b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b9e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	78db      	ldrb	r3, [r3, #3]
 8003ba6:	2b03      	cmp	r3, #3
 8003ba8:	d81f      	bhi.n	8003bea <USB_ActivateEndpoint+0x72>
 8003baa:	a201      	add	r2, pc, #4	@ (adr r2, 8003bb0 <USB_ActivateEndpoint+0x38>)
 8003bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb0:	08003bc1 	.word	0x08003bc1
 8003bb4:	08003bdd 	.word	0x08003bdd
 8003bb8:	08003bf3 	.word	0x08003bf3
 8003bbc:	08003bcf 	.word	0x08003bcf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003bc0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003bc4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003bc8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003bcc:	e012      	b.n	8003bf4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003bce:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003bd2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8003bd6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003bda:	e00b      	b.n	8003bf4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003bdc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003be0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003be4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003be8:	e004      	b.n	8003bf4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8003bf0:	e000      	b.n	8003bf4 <USB_ActivateEndpoint+0x7c>
      break;
 8003bf2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	441a      	add	r2, r3
 8003bfe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003c02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	7812      	ldrb	r2, [r2, #0]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	441a      	add	r2, r3
 8003c42:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8003c46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	7b1b      	ldrb	r3, [r3, #12]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f040 8178 	bne.w	8003f54 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	785b      	ldrb	r3, [r3, #1]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 8084 	beq.w	8003d76 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	61bb      	str	r3, [r7, #24]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	4413      	add	r3, r2
 8003c80:	61bb      	str	r3, [r7, #24]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	011a      	lsls	r2, r3, #4
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	88db      	ldrh	r3, [r3, #6]
 8003c96:	085b      	lsrs	r3, r3, #1
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4413      	add	r3, r2
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	827b      	strh	r3, [r7, #18]
 8003cb0:	8a7b      	ldrh	r3, [r7, #18]
 8003cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d01b      	beq.n	8003cf2 <USB_ActivateEndpoint+0x17a>
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4413      	add	r3, r2
 8003cc4:	881b      	ldrh	r3, [r3, #0]
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ccc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cd0:	823b      	strh	r3, [r7, #16]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	441a      	add	r2, r3
 8003cdc:	8a3b      	ldrh	r3, [r7, #16]
 8003cde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ce2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ce6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	78db      	ldrb	r3, [r3, #3]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d020      	beq.n	8003d3c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d10:	81bb      	strh	r3, [r7, #12]
 8003d12:	89bb      	ldrh	r3, [r7, #12]
 8003d14:	f083 0320 	eor.w	r3, r3, #32
 8003d18:	81bb      	strh	r3, [r7, #12]
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	441a      	add	r2, r3
 8003d24:	89bb      	ldrh	r3, [r7, #12]
 8003d26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	8013      	strh	r3, [r2, #0]
 8003d3a:	e2d5      	b.n	80042e8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d52:	81fb      	strh	r3, [r7, #14]
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	441a      	add	r2, r3
 8003d5e:	89fb      	ldrh	r3, [r7, #14]
 8003d60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	8013      	strh	r3, [r2, #0]
 8003d74:	e2b8      	b.n	80042e8 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	461a      	mov	r2, r3
 8003d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d86:	4413      	add	r3, r2
 8003d88:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	011a      	lsls	r2, r3, #4
 8003d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8003d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	88db      	ldrh	r3, [r3, #6]
 8003d9e:	085b      	lsrs	r3, r3, #1
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003da8:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	461a      	mov	r2, r3
 8003db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dba:	4413      	add	r3, r2
 8003dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	011a      	lsls	r2, r3, #4
 8003dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003dcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd0:	881b      	ldrh	r3, [r3, #0]
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ddc:	801a      	strh	r2, [r3, #0]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	2b3e      	cmp	r3, #62	@ 0x3e
 8003de4:	d91d      	bls.n	8003e22 <USB_ActivateEndpoint+0x2aa>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	095b      	lsrs	r3, r3, #5
 8003dec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f003 031f 	and.w	r3, r3, #31
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d102      	bne.n	8003e00 <USB_ActivateEndpoint+0x288>
 8003dfa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	029b      	lsls	r3, r3, #10
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1e:	801a      	strh	r2, [r3, #0]
 8003e20:	e026      	b.n	8003e70 <USB_ActivateEndpoint+0x2f8>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10a      	bne.n	8003e40 <USB_ActivateEndpoint+0x2c8>
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3c:	801a      	strh	r2, [r3, #0]
 8003e3e:	e017      	b.n	8003e70 <USB_ActivateEndpoint+0x2f8>
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	085b      	lsrs	r3, r3, #1
 8003e46:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <USB_ActivateEndpoint+0x2e2>
 8003e54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e56:	3301      	adds	r3, #1
 8003e58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5c:	881b      	ldrh	r3, [r3, #0]
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	029b      	lsls	r3, r3, #10
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	881b      	ldrh	r3, [r3, #0]
 8003e7c:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003e7e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003e80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d01b      	beq.n	8003ec0 <USB_ActivateEndpoint+0x348>
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	881b      	ldrh	r3, [r3, #0]
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e9e:	843b      	strh	r3, [r7, #32]
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	441a      	add	r2, r3
 8003eaa:	8c3b      	ldrh	r3, [r7, #32]
 8003eac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003eb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003eb4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003eb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d124      	bne.n	8003f12 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4413      	add	r3, r2
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ede:	83bb      	strh	r3, [r7, #28]
 8003ee0:	8bbb      	ldrh	r3, [r7, #28]
 8003ee2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003ee6:	83bb      	strh	r3, [r7, #28]
 8003ee8:	8bbb      	ldrh	r3, [r7, #28]
 8003eea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003eee:	83bb      	strh	r3, [r7, #28]
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	441a      	add	r2, r3
 8003efa:	8bbb      	ldrh	r3, [r7, #28]
 8003efc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	8013      	strh	r3, [r2, #0]
 8003f10:	e1ea      	b.n	80042e8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4413      	add	r3, r2
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f28:	83fb      	strh	r3, [r7, #30]
 8003f2a:	8bfb      	ldrh	r3, [r7, #30]
 8003f2c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003f30:	83fb      	strh	r3, [r7, #30]
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	441a      	add	r2, r3
 8003f3c:	8bfb      	ldrh	r3, [r7, #30]
 8003f3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	8013      	strh	r3, [r2, #0]
 8003f52:	e1c9      	b.n	80042e8 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	78db      	ldrb	r3, [r3, #3]
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d11e      	bne.n	8003f9a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f72:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	441a      	add	r2, r3
 8003f80:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8003f84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f8c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8003f90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	8013      	strh	r3, [r2, #0]
 8003f98:	e01d      	b.n	8003fd6 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8003fac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fb0:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	441a      	add	r2, r3
 8003fbe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8003fc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fe6:	4413      	add	r3, r2
 8003fe8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	011a      	lsls	r2, r3, #4
 8003ff0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003ff8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	891b      	ldrh	r3, [r3, #8]
 8003ffe:	085b      	lsrs	r3, r3, #1
 8004000:	b29b      	uxth	r3, r3
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	b29a      	uxth	r2, r3
 8004006:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004008:	801a      	strh	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	657b      	str	r3, [r7, #84]	@ 0x54
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004014:	b29b      	uxth	r3, r3
 8004016:	461a      	mov	r2, r3
 8004018:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800401a:	4413      	add	r3, r2
 800401c:	657b      	str	r3, [r7, #84]	@ 0x54
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	011a      	lsls	r2, r3, #4
 8004024:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004026:	4413      	add	r3, r2
 8004028:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800402c:	653b      	str	r3, [r7, #80]	@ 0x50
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	895b      	ldrh	r3, [r3, #10]
 8004032:	085b      	lsrs	r3, r3, #1
 8004034:	b29b      	uxth	r3, r3
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	b29a      	uxth	r2, r3
 800403a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800403c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	785b      	ldrb	r3, [r3, #1]
 8004042:	2b00      	cmp	r3, #0
 8004044:	f040 8093 	bne.w	800416e <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004058:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800405c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d01b      	beq.n	800409c <USB_ActivateEndpoint+0x524>
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	b29b      	uxth	r3, r3
 8004072:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800407a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	441a      	add	r2, r3
 8004086:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004088:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800408c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004090:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004094:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004098:	b29b      	uxth	r3, r3
 800409a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	881b      	ldrh	r3, [r3, #0]
 80040a8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80040aa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80040ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d01b      	beq.n	80040ec <USB_ActivateEndpoint+0x574>
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	881b      	ldrh	r3, [r3, #0]
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040ca:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	441a      	add	r2, r3
 80040d6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80040d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004102:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004104:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004106:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800410a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800410c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800410e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004112:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	441a      	add	r2, r3
 800411e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004120:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004124:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004128:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800412c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004130:	b29b      	uxth	r3, r3
 8004132:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	b29b      	uxth	r3, r3
 8004142:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004146:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800414a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	441a      	add	r2, r3
 8004156:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004158:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800415c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004160:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004164:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004168:	b29b      	uxth	r3, r3
 800416a:	8013      	strh	r3, [r2, #0]
 800416c:	e0bc      	b.n	80042e8 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800417e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004182:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d01d      	beq.n	80041c6 <USB_ActivateEndpoint+0x64e>
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4413      	add	r3, r2
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	b29b      	uxth	r3, r3
 8004198:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800419c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041a0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	441a      	add	r2, r3
 80041ae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80041b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80041d6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80041da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d01d      	beq.n	800421e <USB_ActivateEndpoint+0x6a6>
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041f8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	441a      	add	r2, r3
 8004206:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800420a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800420e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004212:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004216:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800421a:	b29b      	uxth	r3, r3
 800421c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	78db      	ldrb	r3, [r3, #3]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d024      	beq.n	8004270 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	b29b      	uxth	r3, r3
 8004234:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004238:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800423c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004240:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004244:	f083 0320 	eor.w	r3, r3, #32
 8004248:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	441a      	add	r2, r3
 8004256:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800425a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800425e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004262:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004266:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800426a:	b29b      	uxth	r3, r3
 800426c:	8013      	strh	r3, [r2, #0]
 800426e:	e01d      	b.n	80042ac <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	b29b      	uxth	r3, r3
 800427e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004282:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004286:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	441a      	add	r2, r3
 8004294:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004298:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800429c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	881b      	ldrh	r3, [r3, #0]
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042c2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	441a      	add	r2, r3
 80042d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80042d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80042e8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3774      	adds	r7, #116	@ 0x74
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bc80      	pop	{r7}
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop

080042f8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b08d      	sub	sp, #52	@ 0x34
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	7b1b      	ldrb	r3, [r3, #12]
 8004306:	2b00      	cmp	r3, #0
 8004308:	f040 808e 	bne.w	8004428 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	785b      	ldrb	r3, [r3, #1]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d044      	beq.n	800439e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	81bb      	strh	r3, [r7, #12]
 8004322:	89bb      	ldrh	r3, [r7, #12]
 8004324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004328:	2b00      	cmp	r3, #0
 800432a:	d01b      	beq.n	8004364 <USB_DeactivateEndpoint+0x6c>
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	b29b      	uxth	r3, r3
 800433a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800433e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004342:	817b      	strh	r3, [r7, #10]
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	441a      	add	r2, r3
 800434e:	897b      	ldrh	r3, [r7, #10]
 8004350:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004354:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004358:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800435c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004360:	b29b      	uxth	r3, r3
 8004362:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	b29b      	uxth	r3, r3
 8004372:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004376:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800437a:	813b      	strh	r3, [r7, #8]
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	441a      	add	r2, r3
 8004386:	893b      	ldrh	r3, [r7, #8]
 8004388:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800438c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004390:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004394:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004398:	b29b      	uxth	r3, r3
 800439a:	8013      	strh	r3, [r2, #0]
 800439c:	e192      	b.n	80046c4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4413      	add	r3, r2
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	827b      	strh	r3, [r7, #18]
 80043ac:	8a7b      	ldrh	r3, [r7, #18]
 80043ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d01b      	beq.n	80043ee <USB_DeactivateEndpoint+0xf6>
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	881b      	ldrh	r3, [r3, #0]
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043cc:	823b      	strh	r3, [r7, #16]
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	441a      	add	r2, r3
 80043d8:	8a3b      	ldrh	r3, [r7, #16]
 80043da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80043e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004400:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004404:	81fb      	strh	r3, [r7, #14]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	441a      	add	r2, r3
 8004410:	89fb      	ldrh	r3, [r7, #14]
 8004412:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004416:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800441a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800441e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004422:	b29b      	uxth	r3, r3
 8004424:	8013      	strh	r3, [r2, #0]
 8004426:	e14d      	b.n	80046c4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	785b      	ldrb	r3, [r3, #1]
 800442c:	2b00      	cmp	r3, #0
 800442e:	f040 80a5 	bne.w	800457c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	881b      	ldrh	r3, [r3, #0]
 800443e:	843b      	strh	r3, [r7, #32]
 8004440:	8c3b      	ldrh	r3, [r7, #32]
 8004442:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d01b      	beq.n	8004482 <USB_DeactivateEndpoint+0x18a>
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	b29b      	uxth	r3, r3
 8004458:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800445c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004460:	83fb      	strh	r3, [r7, #30]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	441a      	add	r2, r3
 800446c:	8bfb      	ldrh	r3, [r7, #30]
 800446e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004472:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004476:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800447a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800447e:	b29b      	uxth	r3, r3
 8004480:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	881b      	ldrh	r3, [r3, #0]
 800448e:	83bb      	strh	r3, [r7, #28]
 8004490:	8bbb      	ldrh	r3, [r7, #28]
 8004492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004496:	2b00      	cmp	r3, #0
 8004498:	d01b      	beq.n	80044d2 <USB_DeactivateEndpoint+0x1da>
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4413      	add	r3, r2
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044b0:	837b      	strh	r3, [r7, #26]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	441a      	add	r2, r3
 80044bc:	8b7b      	ldrh	r3, [r7, #26]
 80044be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4413      	add	r3, r2
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	b29b      	uxth	r3, r3
 80044e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044e8:	833b      	strh	r3, [r7, #24]
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	441a      	add	r2, r3
 80044f4:	8b3b      	ldrh	r3, [r7, #24]
 80044f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004502:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004506:	b29b      	uxth	r3, r3
 8004508:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	b29b      	uxth	r3, r3
 8004518:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800451c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004520:	82fb      	strh	r3, [r7, #22]
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	441a      	add	r2, r3
 800452c:	8afb      	ldrh	r3, [r7, #22]
 800452e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004532:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004536:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800453a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800453e:	b29b      	uxth	r3, r3
 8004540:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	b29b      	uxth	r3, r3
 8004550:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004554:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004558:	82bb      	strh	r3, [r7, #20]
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	441a      	add	r2, r3
 8004564:	8abb      	ldrh	r3, [r7, #20]
 8004566:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800456a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800456e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004572:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004576:	b29b      	uxth	r3, r3
 8004578:	8013      	strh	r3, [r2, #0]
 800457a:	e0a3      	b.n	80046c4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800458a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800458c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d01b      	beq.n	80045cc <USB_DeactivateEndpoint+0x2d4>
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045aa:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	441a      	add	r2, r3
 80045b6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80045b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80045c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80045da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80045dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d01b      	beq.n	800461c <USB_DeactivateEndpoint+0x324>
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	881b      	ldrh	r3, [r3, #0]
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045fa:	853b      	strh	r3, [r7, #40]	@ 0x28
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	441a      	add	r2, r3
 8004606:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004608:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800460c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004610:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004614:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004618:	b29b      	uxth	r3, r3
 800461a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	881b      	ldrh	r3, [r3, #0]
 8004628:	b29b      	uxth	r3, r3
 800462a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800462e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004632:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	441a      	add	r2, r3
 800463e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004640:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004644:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004648:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800464c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004650:	b29b      	uxth	r3, r3
 8004652:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	881b      	ldrh	r3, [r3, #0]
 8004660:	b29b      	uxth	r3, r3
 8004662:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004666:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800466a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	441a      	add	r2, r3
 8004676:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004678:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800467c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004680:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004684:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004688:	b29b      	uxth	r3, r3
 800468a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	4413      	add	r3, r2
 8004696:	881b      	ldrh	r3, [r3, #0]
 8004698:	b29b      	uxth	r3, r3
 800469a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800469e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046a2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	441a      	add	r2, r3
 80046ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80046b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3734      	adds	r7, #52	@ 0x34
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bc80      	pop	{r7}
 80046ce:	4770      	bx	lr

080046d0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b0c2      	sub	sp, #264	@ 0x108
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80046de:	6018      	str	r0, [r3, #0]
 80046e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046e8:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	785b      	ldrb	r3, [r3, #1]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	f040 86b7 	bne.w	800546a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80046fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004700:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	699a      	ldr	r2, [r3, #24]
 8004708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800470c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	429a      	cmp	r2, r3
 8004716:	d908      	bls.n	800472a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800471c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004728:	e007      	b.n	800473a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800472a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800472e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800473a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800473e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	7b1b      	ldrb	r3, [r3, #12]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d13a      	bne.n	80047c0 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800474a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800474e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6959      	ldr	r1, [r3, #20]
 8004756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800475a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	88da      	ldrh	r2, [r3, #6]
 8004762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004766:	b29b      	uxth	r3, r3
 8004768:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800476c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004770:	6800      	ldr	r0, [r0, #0]
 8004772:	f001 fc9c 	bl	80060ae <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800477a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	613b      	str	r3, [r7, #16]
 8004782:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004786:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004790:	b29b      	uxth	r3, r3
 8004792:	461a      	mov	r2, r3
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	4413      	add	r3, r2
 8004798:	613b      	str	r3, [r7, #16]
 800479a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800479e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	011a      	lsls	r2, r3, #4
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	4413      	add	r3, r2
 80047ac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80047b0:	60fb      	str	r3, [r7, #12]
 80047b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	801a      	strh	r2, [r3, #0]
 80047bc:	f000 be1f 	b.w	80053fe <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80047c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	78db      	ldrb	r3, [r3, #3]
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	f040 8462 	bne.w	8005096 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80047d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6a1a      	ldr	r2, [r3, #32]
 80047de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	f240 83df 	bls.w	8004fae <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80047f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	b29b      	uxth	r3, r3
 800480e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004816:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800481a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800481e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004828:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	441a      	add	r2, r3
 8004834:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004838:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800483c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004840:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004848:	b29b      	uxth	r3, r3
 800484a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800484c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004850:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6a1a      	ldr	r2, [r3, #32]
 8004858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800485c:	1ad2      	subs	r2, r2, r3
 800485e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004862:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800486a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800486e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004878:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4413      	add	r3, r2
 8004884:	881b      	ldrh	r3, [r3, #0]
 8004886:	b29b      	uxth	r3, r3
 8004888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 81c7 	beq.w	8004c20 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004896:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	633b      	str	r3, [r7, #48]	@ 0x30
 800489e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	785b      	ldrb	r3, [r3, #1]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d177      	bne.n	800499e <USB_EPStartXfer+0x2ce>
 80048ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	461a      	mov	r2, r3
 80048cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ce:	4413      	add	r3, r2
 80048d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	011a      	lsls	r2, r3, #4
 80048e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e2:	4413      	add	r3, r2
 80048e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80048e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80048ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f8:	801a      	strh	r2, [r3, #0]
 80048fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048fe:	2b3e      	cmp	r3, #62	@ 0x3e
 8004900:	d921      	bls.n	8004946 <USB_EPStartXfer+0x276>
 8004902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004906:	095b      	lsrs	r3, r3, #5
 8004908:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800490c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004910:	f003 031f 	and.w	r3, r3, #31
 8004914:	2b00      	cmp	r3, #0
 8004916:	d104      	bne.n	8004922 <USB_EPStartXfer+0x252>
 8004918:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800491c:	3b01      	subs	r3, #1
 800491e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004924:	881b      	ldrh	r3, [r3, #0]
 8004926:	b29a      	uxth	r2, r3
 8004928:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800492c:	b29b      	uxth	r3, r3
 800492e:	029b      	lsls	r3, r3, #10
 8004930:	b29b      	uxth	r3, r3
 8004932:	4313      	orrs	r3, r2
 8004934:	b29b      	uxth	r3, r3
 8004936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800493a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800493e:	b29a      	uxth	r2, r3
 8004940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004942:	801a      	strh	r2, [r3, #0]
 8004944:	e050      	b.n	80049e8 <USB_EPStartXfer+0x318>
 8004946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10a      	bne.n	8004964 <USB_EPStartXfer+0x294>
 800494e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	b29b      	uxth	r3, r3
 8004954:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004958:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800495c:	b29a      	uxth	r2, r3
 800495e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004960:	801a      	strh	r2, [r3, #0]
 8004962:	e041      	b.n	80049e8 <USB_EPStartXfer+0x318>
 8004964:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004968:	085b      	lsrs	r3, r3, #1
 800496a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800496e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d004      	beq.n	8004984 <USB_EPStartXfer+0x2b4>
 800497a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800497e:	3301      	adds	r3, #1
 8004980:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	b29a      	uxth	r2, r3
 800498a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800498e:	b29b      	uxth	r3, r3
 8004990:	029b      	lsls	r3, r3, #10
 8004992:	b29b      	uxth	r3, r3
 8004994:	4313      	orrs	r3, r2
 8004996:	b29a      	uxth	r2, r3
 8004998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499a:	801a      	strh	r2, [r3, #0]
 800499c:	e024      	b.n	80049e8 <USB_EPStartXfer+0x318>
 800499e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	785b      	ldrb	r3, [r3, #1]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d11c      	bne.n	80049e8 <USB_EPStartXfer+0x318>
 80049ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049bc:	b29b      	uxth	r3, r3
 80049be:	461a      	mov	r2, r3
 80049c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c2:	4413      	add	r3, r2
 80049c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80049c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	011a      	lsls	r2, r3, #4
 80049d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d6:	4413      	add	r3, r2
 80049d8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80049dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80049e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	895b      	ldrh	r3, [r3, #10]
 80049f4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80049f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6959      	ldr	r1, [r3, #20]
 8004a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004a0e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004a12:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004a16:	6800      	ldr	r0, [r0, #0]
 8004a18:	f001 fb49 	bl	80060ae <USB_WritePMA>
            ep->xfer_buff += len;
 8004a1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	695a      	ldr	r2, [r3, #20]
 8004a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a2c:	441a      	add	r2, r3
 8004a2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004a3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6a1a      	ldr	r2, [r3, #32]
 8004a46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d90f      	bls.n	8004a76 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004a56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6a1a      	ldr	r2, [r3, #32]
 8004a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a66:	1ad2      	subs	r2, r2, r3
 8004a68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	621a      	str	r2, [r3, #32]
 8004a74:	e00e      	b.n	8004a94 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004a76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8004a86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2200      	movs	r2, #0
 8004a92:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004a94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	785b      	ldrb	r3, [r3, #1]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d177      	bne.n	8004b94 <USB_EPStartXfer+0x4c4>
 8004aa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004aa8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	61bb      	str	r3, [r7, #24]
 8004ab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ab4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	61bb      	str	r3, [r7, #24]
 8004ac8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004acc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	011a      	lsls	r2, r3, #4
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004ade:	617b      	str	r3, [r7, #20]
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	881b      	ldrh	r3, [r3, #0]
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	801a      	strh	r2, [r3, #0]
 8004af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004af4:	2b3e      	cmp	r3, #62	@ 0x3e
 8004af6:	d921      	bls.n	8004b3c <USB_EPStartXfer+0x46c>
 8004af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004afc:	095b      	lsrs	r3, r3, #5
 8004afe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b06:	f003 031f 	and.w	r3, r3, #31
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d104      	bne.n	8004b18 <USB_EPStartXfer+0x448>
 8004b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b12:	3b01      	subs	r3, #1
 8004b14:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	029b      	lsls	r3, r3, #10
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	801a      	strh	r2, [r3, #0]
 8004b3a:	e056      	b.n	8004bea <USB_EPStartXfer+0x51a>
 8004b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10a      	bne.n	8004b5a <USB_EPStartXfer+0x48a>
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	801a      	strh	r2, [r3, #0]
 8004b58:	e047      	b.n	8004bea <USB_EPStartXfer+0x51a>
 8004b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b5e:	085b      	lsrs	r3, r3, #1
 8004b60:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d004      	beq.n	8004b7a <USB_EPStartXfer+0x4aa>
 8004b70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b74:	3301      	adds	r3, #1
 8004b76:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	881b      	ldrh	r3, [r3, #0]
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	029b      	lsls	r3, r3, #10
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	801a      	strh	r2, [r3, #0]
 8004b92:	e02a      	b.n	8004bea <USB_EPStartXfer+0x51a>
 8004b94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	785b      	ldrb	r3, [r3, #1]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d122      	bne.n	8004bea <USB_EPStartXfer+0x51a>
 8004ba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ba8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	623b      	str	r3, [r7, #32]
 8004bb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	623b      	str	r3, [r7, #32]
 8004bc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	011a      	lsls	r2, r3, #4
 8004bd6:	6a3b      	ldr	r3, [r7, #32]
 8004bd8:	4413      	add	r3, r2
 8004bda:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004bde:	61fb      	str	r3, [r7, #28]
 8004be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004bea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	891b      	ldrh	r3, [r3, #8]
 8004bf6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004bfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6959      	ldr	r1, [r3, #20]
 8004c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004c10:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004c14:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004c18:	6800      	ldr	r0, [r0, #0]
 8004c1a:	f001 fa48 	bl	80060ae <USB_WritePMA>
 8004c1e:	e3ee      	b.n	80053fe <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	785b      	ldrb	r3, [r3, #1]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d177      	bne.n	8004d20 <USB_EPStartXfer+0x650>
 8004c30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c50:	4413      	add	r3, r2
 8004c52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	011a      	lsls	r2, r3, #4
 8004c62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c64:	4413      	add	r3, r2
 8004c66:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004c6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c6e:	881b      	ldrh	r3, [r3, #0]
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c7a:	801a      	strh	r2, [r3, #0]
 8004c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c80:	2b3e      	cmp	r3, #62	@ 0x3e
 8004c82:	d921      	bls.n	8004cc8 <USB_EPStartXfer+0x5f8>
 8004c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c88:	095b      	lsrs	r3, r3, #5
 8004c8a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c92:	f003 031f 	and.w	r3, r3, #31
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d104      	bne.n	8004ca4 <USB_EPStartXfer+0x5d4>
 8004c9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004ca4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ca6:	881b      	ldrh	r3, [r3, #0]
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	029b      	lsls	r3, r3, #10
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cc4:	801a      	strh	r2, [r3, #0]
 8004cc6:	e056      	b.n	8004d76 <USB_EPStartXfer+0x6a6>
 8004cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10a      	bne.n	8004ce6 <USB_EPStartXfer+0x616>
 8004cd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cd2:	881b      	ldrh	r3, [r3, #0]
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ce2:	801a      	strh	r2, [r3, #0]
 8004ce4:	e047      	b.n	8004d76 <USB_EPStartXfer+0x6a6>
 8004ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cea:	085b      	lsrs	r3, r3, #1
 8004cec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d004      	beq.n	8004d06 <USB_EPStartXfer+0x636>
 8004cfc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d00:	3301      	adds	r3, #1
 8004d02:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004d06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d08:	881b      	ldrh	r3, [r3, #0]
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	029b      	lsls	r3, r3, #10
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	4313      	orrs	r3, r2
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d1c:	801a      	strh	r2, [r3, #0]
 8004d1e:	e02a      	b.n	8004d76 <USB_EPStartXfer+0x6a6>
 8004d20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	785b      	ldrb	r3, [r3, #1]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d122      	bne.n	8004d76 <USB_EPStartXfer+0x6a6>
 8004d30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d50:	4413      	add	r3, r2
 8004d52:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	011a      	lsls	r2, r3, #4
 8004d62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d64:	4413      	add	r3, r2
 8004d66:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d74:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004d76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	891b      	ldrh	r3, [r3, #8]
 8004d82:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6959      	ldr	r1, [r3, #20]
 8004d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004d9c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004da0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004da4:	6800      	ldr	r0, [r0, #0]
 8004da6:	f001 f982 	bl	80060ae <USB_WritePMA>
            ep->xfer_buff += len;
 8004daa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	695a      	ldr	r2, [r3, #20]
 8004db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dba:	441a      	add	r2, r3
 8004dbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004dc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6a1a      	ldr	r2, [r3, #32]
 8004dd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d90f      	bls.n	8004e04 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8004de4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004de8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6a1a      	ldr	r2, [r3, #32]
 8004df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004df4:	1ad2      	subs	r2, r2, r3
 8004df6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	621a      	str	r2, [r3, #32]
 8004e02:	e00e      	b.n	8004e22 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8004e04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6a1b      	ldr	r3, [r3, #32]
 8004e10:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8004e14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	785b      	ldrb	r3, [r3, #1]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d177      	bne.n	8004f2e <USB_EPStartXfer+0x85e>
 8004e3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e5e:	4413      	add	r3, r2
 8004e60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	011a      	lsls	r2, r3, #4
 8004e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e72:	4413      	add	r3, r2
 8004e74:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004e78:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e7c:	881b      	ldrh	r3, [r3, #0]
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e88:	801a      	strh	r2, [r3, #0]
 8004e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e8e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e90:	d921      	bls.n	8004ed6 <USB_EPStartXfer+0x806>
 8004e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e96:	095b      	lsrs	r3, r3, #5
 8004e98:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ea0:	f003 031f 	and.w	r3, r3, #31
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d104      	bne.n	8004eb2 <USB_EPStartXfer+0x7e2>
 8004ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eac:	3b01      	subs	r3, #1
 8004eae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	029b      	lsls	r3, r3, #10
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ed2:	801a      	strh	r2, [r3, #0]
 8004ed4:	e050      	b.n	8004f78 <USB_EPStartXfer+0x8a8>
 8004ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10a      	bne.n	8004ef4 <USB_EPStartXfer+0x824>
 8004ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ee0:	881b      	ldrh	r3, [r3, #0]
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ee8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ef0:	801a      	strh	r2, [r3, #0]
 8004ef2:	e041      	b.n	8004f78 <USB_EPStartXfer+0x8a8>
 8004ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ef8:	085b      	lsrs	r3, r3, #1
 8004efa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d004      	beq.n	8004f14 <USB_EPStartXfer+0x844>
 8004f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f0e:	3301      	adds	r3, #1
 8004f10:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f16:	881b      	ldrh	r3, [r3, #0]
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	029b      	lsls	r3, r3, #10
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	4313      	orrs	r3, r2
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f2a:	801a      	strh	r2, [r3, #0]
 8004f2c:	e024      	b.n	8004f78 <USB_EPStartXfer+0x8a8>
 8004f2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	785b      	ldrb	r3, [r3, #1]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d11c      	bne.n	8004f78 <USB_EPStartXfer+0x8a8>
 8004f3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	461a      	mov	r2, r3
 8004f50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f52:	4413      	add	r3, r2
 8004f54:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	011a      	lsls	r2, r3, #4
 8004f64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f66:	4413      	add	r3, r2
 8004f68:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f76:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004f78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	895b      	ldrh	r3, [r3, #10]
 8004f84:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6959      	ldr	r1, [r3, #20]
 8004f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004f9e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004fa2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004fa6:	6800      	ldr	r0, [r0, #0]
 8004fa8:	f001 f881 	bl	80060ae <USB_WritePMA>
 8004fac:	e227      	b.n	80053fe <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004fae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004fbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	881b      	ldrh	r3, [r3, #0]
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004fe0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fe4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004fe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ff6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	441a      	add	r2, r3
 8005002:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005006:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800500a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800500e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005016:	b29b      	uxth	r3, r3
 8005018:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800501a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800501e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005026:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800502a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005034:	b29b      	uxth	r3, r3
 8005036:	461a      	mov	r2, r3
 8005038:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800503a:	4413      	add	r3, r2
 800503c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800503e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005042:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	011a      	lsls	r2, r3, #4
 800504c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800504e:	4413      	add	r3, r2
 8005050:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005054:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800505a:	b29a      	uxth	r2, r3
 800505c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800505e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005064:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	891b      	ldrh	r3, [r3, #8]
 800506c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	6959      	ldr	r1, [r3, #20]
 800507c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005080:	b29b      	uxth	r3, r3
 8005082:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005086:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800508a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800508e:	6800      	ldr	r0, [r0, #0]
 8005090:	f001 f80d 	bl	80060ae <USB_WritePMA>
 8005094:	e1b3      	b.n	80053fe <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800509a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6a1a      	ldr	r2, [r3, #32]
 80050a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050a6:	1ad2      	subs	r2, r2, r3
 80050a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80050b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	881b      	ldrh	r3, [r3, #0]
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f000 80c6 	beq.w	8005268 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80050dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	673b      	str	r3, [r7, #112]	@ 0x70
 80050e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	785b      	ldrb	r3, [r3, #1]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d177      	bne.n	80051e8 <USB_EPStartXfer+0xb18>
 80050f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005108:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005112:	b29b      	uxth	r3, r3
 8005114:	461a      	mov	r2, r3
 8005116:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005118:	4413      	add	r3, r2
 800511a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800511c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005120:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	011a      	lsls	r2, r3, #4
 800512a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800512c:	4413      	add	r3, r2
 800512e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005132:	667b      	str	r3, [r7, #100]	@ 0x64
 8005134:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005136:	881b      	ldrh	r3, [r3, #0]
 8005138:	b29b      	uxth	r3, r3
 800513a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800513e:	b29a      	uxth	r2, r3
 8005140:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005142:	801a      	strh	r2, [r3, #0]
 8005144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005148:	2b3e      	cmp	r3, #62	@ 0x3e
 800514a:	d921      	bls.n	8005190 <USB_EPStartXfer+0xac0>
 800514c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005150:	095b      	lsrs	r3, r3, #5
 8005152:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005156:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800515a:	f003 031f 	and.w	r3, r3, #31
 800515e:	2b00      	cmp	r3, #0
 8005160:	d104      	bne.n	800516c <USB_EPStartXfer+0xa9c>
 8005162:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005166:	3b01      	subs	r3, #1
 8005168:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800516c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800516e:	881b      	ldrh	r3, [r3, #0]
 8005170:	b29a      	uxth	r2, r3
 8005172:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005176:	b29b      	uxth	r3, r3
 8005178:	029b      	lsls	r3, r3, #10
 800517a:	b29b      	uxth	r3, r3
 800517c:	4313      	orrs	r3, r2
 800517e:	b29b      	uxth	r3, r3
 8005180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005188:	b29a      	uxth	r2, r3
 800518a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800518c:	801a      	strh	r2, [r3, #0]
 800518e:	e050      	b.n	8005232 <USB_EPStartXfer+0xb62>
 8005190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10a      	bne.n	80051ae <USB_EPStartXfer+0xade>
 8005198:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	b29b      	uxth	r3, r3
 800519e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051aa:	801a      	strh	r2, [r3, #0]
 80051ac:	e041      	b.n	8005232 <USB_EPStartXfer+0xb62>
 80051ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051b2:	085b      	lsrs	r3, r3, #1
 80051b4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80051b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051bc:	f003 0301 	and.w	r3, r3, #1
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d004      	beq.n	80051ce <USB_EPStartXfer+0xafe>
 80051c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80051c8:	3301      	adds	r3, #1
 80051ca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80051ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051d0:	881b      	ldrh	r3, [r3, #0]
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80051d8:	b29b      	uxth	r3, r3
 80051da:	029b      	lsls	r3, r3, #10
 80051dc:	b29b      	uxth	r3, r3
 80051de:	4313      	orrs	r3, r2
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051e4:	801a      	strh	r2, [r3, #0]
 80051e6:	e024      	b.n	8005232 <USB_EPStartXfer+0xb62>
 80051e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	785b      	ldrb	r3, [r3, #1]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d11c      	bne.n	8005232 <USB_EPStartXfer+0xb62>
 80051f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005206:	b29b      	uxth	r3, r3
 8005208:	461a      	mov	r2, r3
 800520a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800520c:	4413      	add	r3, r2
 800520e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005210:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005214:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	011a      	lsls	r2, r3, #4
 800521e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005220:	4413      	add	r3, r2
 8005222:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005226:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800522c:	b29a      	uxth	r2, r3
 800522e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005230:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005232:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005236:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	895b      	ldrh	r3, [r3, #10]
 800523e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005242:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005246:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6959      	ldr	r1, [r3, #20]
 800524e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005252:	b29b      	uxth	r3, r3
 8005254:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005258:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800525c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005260:	6800      	ldr	r0, [r0, #0]
 8005262:	f000 ff24 	bl	80060ae <USB_WritePMA>
 8005266:	e0ca      	b.n	80053fe <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800526c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	785b      	ldrb	r3, [r3, #1]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d177      	bne.n	8005368 <USB_EPStartXfer+0xc98>
 8005278:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800527c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005288:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005292:	b29b      	uxth	r3, r3
 8005294:	461a      	mov	r2, r3
 8005296:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005298:	4413      	add	r3, r2
 800529a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800529c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	011a      	lsls	r2, r3, #4
 80052aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80052ac:	4413      	add	r3, r2
 80052ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80052b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80052b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80052b6:	881b      	ldrh	r3, [r3, #0]
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052be:	b29a      	uxth	r2, r3
 80052c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80052c2:	801a      	strh	r2, [r3, #0]
 80052c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80052ca:	d921      	bls.n	8005310 <USB_EPStartXfer+0xc40>
 80052cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052d0:	095b      	lsrs	r3, r3, #5
 80052d2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80052d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052da:	f003 031f 	and.w	r3, r3, #31
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d104      	bne.n	80052ec <USB_EPStartXfer+0xc1c>
 80052e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80052e6:	3b01      	subs	r3, #1
 80052e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80052ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	029b      	lsls	r3, r3, #10
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	4313      	orrs	r3, r2
 80052fe:	b29b      	uxth	r3, r3
 8005300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005308:	b29a      	uxth	r2, r3
 800530a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800530c:	801a      	strh	r2, [r3, #0]
 800530e:	e05c      	b.n	80053ca <USB_EPStartXfer+0xcfa>
 8005310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10a      	bne.n	800532e <USB_EPStartXfer+0xc5e>
 8005318:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800531a:	881b      	ldrh	r3, [r3, #0]
 800531c:	b29b      	uxth	r3, r3
 800531e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005326:	b29a      	uxth	r2, r3
 8005328:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800532a:	801a      	strh	r2, [r3, #0]
 800532c:	e04d      	b.n	80053ca <USB_EPStartXfer+0xcfa>
 800532e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005332:	085b      	lsrs	r3, r3, #1
 8005334:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005338:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	2b00      	cmp	r3, #0
 8005342:	d004      	beq.n	800534e <USB_EPStartXfer+0xc7e>
 8005344:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005348:	3301      	adds	r3, #1
 800534a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800534e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005350:	881b      	ldrh	r3, [r3, #0]
 8005352:	b29a      	uxth	r2, r3
 8005354:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005358:	b29b      	uxth	r3, r3
 800535a:	029b      	lsls	r3, r3, #10
 800535c:	b29b      	uxth	r3, r3
 800535e:	4313      	orrs	r3, r2
 8005360:	b29a      	uxth	r2, r3
 8005362:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005364:	801a      	strh	r2, [r3, #0]
 8005366:	e030      	b.n	80053ca <USB_EPStartXfer+0xcfa>
 8005368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800536c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	785b      	ldrb	r3, [r3, #1]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d128      	bne.n	80053ca <USB_EPStartXfer+0xcfa>
 8005378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800537c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800538a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005394:	b29b      	uxth	r3, r3
 8005396:	461a      	mov	r2, r3
 8005398:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800539c:	4413      	add	r3, r2
 800539e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	011a      	lsls	r2, r3, #4
 80053b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80053b4:	4413      	add	r3, r2
 80053b6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80053ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80053c8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80053ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	891b      	ldrh	r3, [r3, #8]
 80053d6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6959      	ldr	r1, [r3, #20]
 80053e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80053f0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80053f4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80053f8:	6800      	ldr	r0, [r0, #0]
 80053fa:	f000 fe58 	bl	80060ae <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80053fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005402:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800540c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	b29b      	uxth	r3, r3
 800541c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005420:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005424:	817b      	strh	r3, [r7, #10]
 8005426:	897b      	ldrh	r3, [r7, #10]
 8005428:	f083 0310 	eor.w	r3, r3, #16
 800542c:	817b      	strh	r3, [r7, #10]
 800542e:	897b      	ldrh	r3, [r7, #10]
 8005430:	f083 0320 	eor.w	r3, r3, #32
 8005434:	817b      	strh	r3, [r7, #10]
 8005436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800543a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005444:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	441a      	add	r2, r3
 8005450:	897b      	ldrh	r3, [r7, #10]
 8005452:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005456:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800545a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800545e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005462:	b29b      	uxth	r3, r3
 8005464:	8013      	strh	r3, [r2, #0]
 8005466:	f000 bcde 	b.w	8005e26 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800546a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800546e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	7b1b      	ldrb	r3, [r3, #12]
 8005476:	2b00      	cmp	r3, #0
 8005478:	f040 80bb 	bne.w	80055f2 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800547c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005480:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	699a      	ldr	r2, [r3, #24]
 8005488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800548c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	429a      	cmp	r2, r3
 8005496:	d917      	bls.n	80054c8 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800549c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80054a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	699a      	ldr	r2, [r3, #24]
 80054b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054b8:	1ad2      	subs	r2, r2, r3
 80054ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	619a      	str	r2, [r3, #24]
 80054c6:	e00e      	b.n	80054e6 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80054c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80054d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2200      	movs	r2, #0
 80054e4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80054e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80054f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005502:	b29b      	uxth	r3, r3
 8005504:	461a      	mov	r2, r3
 8005506:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800550a:	4413      	add	r3, r2
 800550c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005514:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	011a      	lsls	r2, r3, #4
 800551e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005522:	4413      	add	r3, r2
 8005524:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005528:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800552c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005530:	881b      	ldrh	r3, [r3, #0]
 8005532:	b29b      	uxth	r3, r3
 8005534:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005538:	b29a      	uxth	r2, r3
 800553a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800553e:	801a      	strh	r2, [r3, #0]
 8005540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005544:	2b3e      	cmp	r3, #62	@ 0x3e
 8005546:	d924      	bls.n	8005592 <USB_EPStartXfer+0xec2>
 8005548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800554c:	095b      	lsrs	r3, r3, #5
 800554e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005556:	f003 031f 	and.w	r3, r3, #31
 800555a:	2b00      	cmp	r3, #0
 800555c:	d104      	bne.n	8005568 <USB_EPStartXfer+0xe98>
 800555e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005562:	3b01      	subs	r3, #1
 8005564:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005568:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	b29a      	uxth	r2, r3
 8005570:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005574:	b29b      	uxth	r3, r3
 8005576:	029b      	lsls	r3, r3, #10
 8005578:	b29b      	uxth	r3, r3
 800557a:	4313      	orrs	r3, r2
 800557c:	b29b      	uxth	r3, r3
 800557e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005582:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005586:	b29a      	uxth	r2, r3
 8005588:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800558c:	801a      	strh	r2, [r3, #0]
 800558e:	f000 bc10 	b.w	8005db2 <USB_EPStartXfer+0x16e2>
 8005592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10c      	bne.n	80055b4 <USB_EPStartXfer+0xee4>
 800559a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800559e:	881b      	ldrh	r3, [r3, #0]
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055b0:	801a      	strh	r2, [r3, #0]
 80055b2:	e3fe      	b.n	8005db2 <USB_EPStartXfer+0x16e2>
 80055b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055b8:	085b      	lsrs	r3, r3, #1
 80055ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80055be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d004      	beq.n	80055d4 <USB_EPStartXfer+0xf04>
 80055ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80055ce:	3301      	adds	r3, #1
 80055d0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80055d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055d8:	881b      	ldrh	r3, [r3, #0]
 80055da:	b29a      	uxth	r2, r3
 80055dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	029b      	lsls	r3, r3, #10
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	4313      	orrs	r3, r2
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055ee:	801a      	strh	r2, [r3, #0]
 80055f0:	e3df      	b.n	8005db2 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80055f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	78db      	ldrb	r3, [r3, #3]
 80055fe:	2b02      	cmp	r3, #2
 8005600:	f040 8218 	bne.w	8005a34 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005608:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	785b      	ldrb	r3, [r3, #1]
 8005610:	2b00      	cmp	r3, #0
 8005612:	f040 809d 	bne.w	8005750 <USB_EPStartXfer+0x1080>
 8005616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800561a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005624:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005628:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005632:	b29b      	uxth	r3, r3
 8005634:	461a      	mov	r2, r3
 8005636:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800563a:	4413      	add	r3, r2
 800563c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005644:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	011a      	lsls	r2, r3, #4
 800564e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005652:	4413      	add	r3, r2
 8005654:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005658:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800565c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	b29b      	uxth	r3, r3
 8005664:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005668:	b29a      	uxth	r2, r3
 800566a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800566e:	801a      	strh	r2, [r3, #0]
 8005670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005674:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	2b3e      	cmp	r3, #62	@ 0x3e
 800567e:	d92b      	bls.n	80056d8 <USB_EPStartXfer+0x1008>
 8005680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005684:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	095b      	lsrs	r3, r3, #5
 800568e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005692:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005696:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	f003 031f 	and.w	r3, r3, #31
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d104      	bne.n	80056b0 <USB_EPStartXfer+0xfe0>
 80056a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056aa:	3b01      	subs	r3, #1
 80056ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80056b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056bc:	b29b      	uxth	r3, r3
 80056be:	029b      	lsls	r3, r3, #10
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	4313      	orrs	r3, r2
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80056d4:	801a      	strh	r2, [r3, #0]
 80056d6:	e070      	b.n	80057ba <USB_EPStartXfer+0x10ea>
 80056d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10c      	bne.n	8005702 <USB_EPStartXfer+0x1032>
 80056e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80056ec:	881b      	ldrh	r3, [r3, #0]
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80056fe:	801a      	strh	r2, [r3, #0]
 8005700:	e05b      	b.n	80057ba <USB_EPStartXfer+0x10ea>
 8005702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005706:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	085b      	lsrs	r3, r3, #1
 8005710:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005714:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005718:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b00      	cmp	r3, #0
 8005726:	d004      	beq.n	8005732 <USB_EPStartXfer+0x1062>
 8005728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800572c:	3301      	adds	r3, #1
 800572e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005732:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005736:	881b      	ldrh	r3, [r3, #0]
 8005738:	b29a      	uxth	r2, r3
 800573a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800573e:	b29b      	uxth	r3, r3
 8005740:	029b      	lsls	r3, r3, #10
 8005742:	b29b      	uxth	r3, r3
 8005744:	4313      	orrs	r3, r2
 8005746:	b29a      	uxth	r2, r3
 8005748:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800574c:	801a      	strh	r2, [r3, #0]
 800574e:	e034      	b.n	80057ba <USB_EPStartXfer+0x10ea>
 8005750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005754:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	785b      	ldrb	r3, [r3, #1]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d12c      	bne.n	80057ba <USB_EPStartXfer+0x10ea>
 8005760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005764:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800576e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005772:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800577c:	b29b      	uxth	r3, r3
 800577e:	461a      	mov	r2, r3
 8005780:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005784:	4413      	add	r3, r2
 8005786:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800578a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800578e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	011a      	lsls	r2, r3, #4
 8005798:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800579c:	4413      	add	r3, r2
 800579e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80057a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80057b8:	801a      	strh	r2, [r3, #0]
 80057ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80057c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	785b      	ldrb	r3, [r3, #1]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f040 809d 	bne.w	8005914 <USB_EPStartXfer+0x1244>
 80057da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80057e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	461a      	mov	r2, r3
 80057fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80057fe:	4413      	add	r3, r2
 8005800:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005808:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	011a      	lsls	r2, r3, #4
 8005812:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005816:	4413      	add	r3, r2
 8005818:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800581c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005820:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	b29b      	uxth	r3, r3
 8005828:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800582c:	b29a      	uxth	r2, r3
 800582e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005832:	801a      	strh	r2, [r3, #0]
 8005834:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005838:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	2b3e      	cmp	r3, #62	@ 0x3e
 8005842:	d92b      	bls.n	800589c <USB_EPStartXfer+0x11cc>
 8005844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	095b      	lsrs	r3, r3, #5
 8005852:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005856:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800585a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	f003 031f 	and.w	r3, r3, #31
 8005866:	2b00      	cmp	r3, #0
 8005868:	d104      	bne.n	8005874 <USB_EPStartXfer+0x11a4>
 800586a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800586e:	3b01      	subs	r3, #1
 8005870:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005874:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	b29a      	uxth	r2, r3
 800587c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005880:	b29b      	uxth	r3, r3
 8005882:	029b      	lsls	r3, r3, #10
 8005884:	b29b      	uxth	r3, r3
 8005886:	4313      	orrs	r3, r2
 8005888:	b29b      	uxth	r3, r3
 800588a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800588e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005892:	b29a      	uxth	r2, r3
 8005894:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005898:	801a      	strh	r2, [r3, #0]
 800589a:	e069      	b.n	8005970 <USB_EPStartXfer+0x12a0>
 800589c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10c      	bne.n	80058c6 <USB_EPStartXfer+0x11f6>
 80058ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058b0:	881b      	ldrh	r3, [r3, #0]
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058bc:	b29a      	uxth	r2, r3
 80058be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058c2:	801a      	strh	r2, [r3, #0]
 80058c4:	e054      	b.n	8005970 <USB_EPStartXfer+0x12a0>
 80058c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	085b      	lsrs	r3, r3, #1
 80058d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80058d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d004      	beq.n	80058f6 <USB_EPStartXfer+0x1226>
 80058ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058f0:	3301      	adds	r3, #1
 80058f2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80058f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058fa:	881b      	ldrh	r3, [r3, #0]
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005902:	b29b      	uxth	r3, r3
 8005904:	029b      	lsls	r3, r3, #10
 8005906:	b29b      	uxth	r3, r3
 8005908:	4313      	orrs	r3, r2
 800590a:	b29a      	uxth	r2, r3
 800590c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005910:	801a      	strh	r2, [r3, #0]
 8005912:	e02d      	b.n	8005970 <USB_EPStartXfer+0x12a0>
 8005914:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005918:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	785b      	ldrb	r3, [r3, #1]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d125      	bne.n	8005970 <USB_EPStartXfer+0x12a0>
 8005924:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005928:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005932:	b29b      	uxth	r3, r3
 8005934:	461a      	mov	r2, r3
 8005936:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800593a:	4413      	add	r3, r2
 800593c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005940:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005944:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	011a      	lsls	r2, r3, #4
 800594e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005952:	4413      	add	r3, r2
 8005954:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005958:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800595c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005960:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	b29a      	uxth	r2, r3
 800596a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800596e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005974:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	69db      	ldr	r3, [r3, #28]
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 8218 	beq.w	8005db2 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005986:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4413      	add	r3, r2
 800599c:	881b      	ldrh	r3, [r3, #0]
 800599e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80059a2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80059a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d005      	beq.n	80059ba <USB_EPStartXfer+0x12ea>
 80059ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80059b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10d      	bne.n	80059d6 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80059ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80059be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f040 81f5 	bne.w	8005db2 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80059c8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80059cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f040 81ee 	bne.w	8005db2 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80059d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	881b      	ldrh	r3, [r3, #0]
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059fc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005a00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	441a      	add	r2, r3
 8005a1a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005a1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a2a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	8013      	strh	r3, [r2, #0]
 8005a32:	e1be      	b.n	8005db2 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005a34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	78db      	ldrb	r3, [r3, #3]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	f040 81b4 	bne.w	8005dae <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005a46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	699a      	ldr	r2, [r3, #24]
 8005a52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d917      	bls.n	8005a92 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005a62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8005a72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	699a      	ldr	r2, [r3, #24]
 8005a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a82:	1ad2      	subs	r2, r2, r3
 8005a84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	619a      	str	r2, [r3, #24]
 8005a90:	e00e      	b.n	8005ab0 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005a92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8005aa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2200      	movs	r2, #0
 8005aae:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005ab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ab4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	785b      	ldrb	r3, [r3, #1]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f040 8085 	bne.w	8005bcc <USB_EPStartXfer+0x14fc>
 8005ac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ac6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ad4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005aec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005af0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	011a      	lsls	r2, r3, #4
 8005afa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005afe:	4413      	add	r3, r2
 8005b00:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005b04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005b0c:	881b      	ldrh	r3, [r3, #0]
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005b1a:	801a      	strh	r2, [r3, #0]
 8005b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b20:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b22:	d923      	bls.n	8005b6c <USB_EPStartXfer+0x149c>
 8005b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b28:	095b      	lsrs	r3, r3, #5
 8005b2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b32:	f003 031f 	and.w	r3, r3, #31
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d104      	bne.n	8005b44 <USB_EPStartXfer+0x1474>
 8005b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005b44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005b48:	881b      	ldrh	r3, [r3, #0]
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	029b      	lsls	r3, r3, #10
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	4313      	orrs	r3, r2
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005b68:	801a      	strh	r2, [r3, #0]
 8005b6a:	e060      	b.n	8005c2e <USB_EPStartXfer+0x155e>
 8005b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10c      	bne.n	8005b8e <USB_EPStartXfer+0x14be>
 8005b74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005b78:	881b      	ldrh	r3, [r3, #0]
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005b8a:	801a      	strh	r2, [r3, #0]
 8005b8c:	e04f      	b.n	8005c2e <USB_EPStartXfer+0x155e>
 8005b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b92:	085b      	lsrs	r3, r3, #1
 8005b94:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b9c:	f003 0301 	and.w	r3, r3, #1
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d004      	beq.n	8005bae <USB_EPStartXfer+0x14de>
 8005ba4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ba8:	3301      	adds	r3, #1
 8005baa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005bae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005bb2:	881b      	ldrh	r3, [r3, #0]
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	029b      	lsls	r3, r3, #10
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005bc8:	801a      	strh	r2, [r3, #0]
 8005bca:	e030      	b.n	8005c2e <USB_EPStartXfer+0x155e>
 8005bcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	785b      	ldrb	r3, [r3, #1]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d128      	bne.n	8005c2e <USB_EPStartXfer+0x155e>
 8005bdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005bea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c00:	4413      	add	r3, r2
 8005c02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005c06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	011a      	lsls	r2, r3, #4
 8005c14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c18:	4413      	add	r3, r2
 8005c1a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c1e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005c2c:	801a      	strh	r2, [r3, #0]
 8005c2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	785b      	ldrb	r3, [r3, #1]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f040 8085 	bne.w	8005d58 <USB_EPStartXfer+0x1688>
 8005c4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005c5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005c72:	4413      	add	r3, r2
 8005c74:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005c78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	011a      	lsls	r2, r3, #4
 8005c86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005c90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005c98:	881b      	ldrh	r3, [r3, #0]
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005ca6:	801a      	strh	r2, [r3, #0]
 8005ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cac:	2b3e      	cmp	r3, #62	@ 0x3e
 8005cae:	d923      	bls.n	8005cf8 <USB_EPStartXfer+0x1628>
 8005cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cb4:	095b      	lsrs	r3, r3, #5
 8005cb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cbe:	f003 031f 	and.w	r3, r3, #31
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d104      	bne.n	8005cd0 <USB_EPStartXfer+0x1600>
 8005cc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005cd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	029b      	lsls	r3, r3, #10
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005cf4:	801a      	strh	r2, [r3, #0]
 8005cf6:	e05c      	b.n	8005db2 <USB_EPStartXfer+0x16e2>
 8005cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10c      	bne.n	8005d1a <USB_EPStartXfer+0x164a>
 8005d00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d04:	881b      	ldrh	r3, [r3, #0]
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d16:	801a      	strh	r2, [r3, #0]
 8005d18:	e04b      	b.n	8005db2 <USB_EPStartXfer+0x16e2>
 8005d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d1e:	085b      	lsrs	r3, r3, #1
 8005d20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d004      	beq.n	8005d3a <USB_EPStartXfer+0x166a>
 8005d30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d34:	3301      	adds	r3, #1
 8005d36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	029b      	lsls	r3, r3, #10
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d54:	801a      	strh	r2, [r3, #0]
 8005d56:	e02c      	b.n	8005db2 <USB_EPStartXfer+0x16e2>
 8005d58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	785b      	ldrb	r3, [r3, #1]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d124      	bne.n	8005db2 <USB_EPStartXfer+0x16e2>
 8005d68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	461a      	mov	r2, r3
 8005d7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d7e:	4413      	add	r3, r2
 8005d80:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	011a      	lsls	r2, r3, #4
 8005d92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d96:	4413      	add	r3, r2
 8005d98:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005daa:	801a      	strh	r2, [r3, #0]
 8005dac:	e001      	b.n	8005db2 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e03a      	b.n	8005e28 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005db2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005db6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4413      	add	r3, r2
 8005dcc:	881b      	ldrh	r3, [r3, #0]
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005dd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dd8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005ddc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005de0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005de4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005de8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005dec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005df0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005df4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005df8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	441a      	add	r2, r3
 8005e0e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005e12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e32:	b480      	push	{r7}
 8005e34:	b085      	sub	sp, #20
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
 8005e3a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	785b      	ldrb	r3, [r3, #1]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d020      	beq.n	8005e86 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4413      	add	r3, r2
 8005e4e:	881b      	ldrh	r3, [r3, #0]
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e5a:	81bb      	strh	r3, [r7, #12]
 8005e5c:	89bb      	ldrh	r3, [r7, #12]
 8005e5e:	f083 0310 	eor.w	r3, r3, #16
 8005e62:	81bb      	strh	r3, [r7, #12]
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	441a      	add	r2, r3
 8005e6e:	89bb      	ldrh	r3, [r7, #12]
 8005e70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	8013      	strh	r3, [r2, #0]
 8005e84:	e01f      	b.n	8005ec6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	881b      	ldrh	r3, [r3, #0]
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e9c:	81fb      	strh	r3, [r7, #14]
 8005e9e:	89fb      	ldrh	r3, [r7, #14]
 8005ea0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005ea4:	81fb      	strh	r3, [r7, #14]
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	441a      	add	r2, r3
 8005eb0:	89fb      	ldrh	r3, [r7, #14]
 8005eb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005eb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005eba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ebe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3714      	adds	r7, #20
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bc80      	pop	{r7}
 8005ed0:	4770      	bx	lr

08005ed2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b087      	sub	sp, #28
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
 8005eda:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	7b1b      	ldrb	r3, [r3, #12]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f040 809d 	bne.w	8006020 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	785b      	ldrb	r3, [r3, #1]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d04c      	beq.n	8005f88 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	4413      	add	r3, r2
 8005ef8:	881b      	ldrh	r3, [r3, #0]
 8005efa:	823b      	strh	r3, [r7, #16]
 8005efc:	8a3b      	ldrh	r3, [r7, #16]
 8005efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d01b      	beq.n	8005f3e <USB_EPClearStall+0x6c>
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	881b      	ldrh	r3, [r3, #0]
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f1c:	81fb      	strh	r3, [r7, #14]
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	441a      	add	r2, r3
 8005f28:	89fb      	ldrh	r3, [r7, #14]
 8005f2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f36:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	78db      	ldrb	r3, [r3, #3]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d06c      	beq.n	8006020 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4413      	add	r3, r2
 8005f50:	881b      	ldrh	r3, [r3, #0]
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f5c:	81bb      	strh	r3, [r7, #12]
 8005f5e:	89bb      	ldrh	r3, [r7, #12]
 8005f60:	f083 0320 	eor.w	r3, r3, #32
 8005f64:	81bb      	strh	r3, [r7, #12]
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	441a      	add	r2, r3
 8005f70:	89bb      	ldrh	r3, [r7, #12]
 8005f72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	8013      	strh	r3, [r2, #0]
 8005f86:	e04b      	b.n	8006020 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	881b      	ldrh	r3, [r3, #0]
 8005f94:	82fb      	strh	r3, [r7, #22]
 8005f96:	8afb      	ldrh	r3, [r7, #22]
 8005f98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d01b      	beq.n	8005fd8 <USB_EPClearStall+0x106>
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	881b      	ldrh	r3, [r3, #0]
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fb6:	82bb      	strh	r3, [r7, #20]
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	441a      	add	r2, r3
 8005fc2:	8abb      	ldrh	r3, [r7, #20]
 8005fc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fcc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005fd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fee:	827b      	strh	r3, [r7, #18]
 8005ff0:	8a7b      	ldrh	r3, [r7, #18]
 8005ff2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005ff6:	827b      	strh	r3, [r7, #18]
 8005ff8:	8a7b      	ldrh	r3, [r7, #18]
 8005ffa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005ffe:	827b      	strh	r3, [r7, #18]
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	441a      	add	r2, r3
 800600a:	8a7b      	ldrh	r3, [r7, #18]
 800600c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006010:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006014:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006018:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800601c:	b29b      	uxth	r3, r3
 800601e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	371c      	adds	r7, #28
 8006026:	46bd      	mov	sp, r7
 8006028:	bc80      	pop	{r7}
 800602a:	4770      	bx	lr

0800602c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	460b      	mov	r3, r1
 8006036:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006038:	78fb      	ldrb	r3, [r7, #3]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d103      	bne.n	8006046 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2280      	movs	r2, #128	@ 0x80
 8006042:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	bc80      	pop	{r7}
 8006050:	4770      	bx	lr

08006052 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006052:	b480      	push	{r7}
 8006054:	b083      	sub	sp, #12
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	bc80      	pop	{r7}
 8006064:	4770      	bx	lr

08006066 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006066:	b480      	push	{r7}
 8006068:	b083      	sub	sp, #12
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	bc80      	pop	{r7}
 8006078:	4770      	bx	lr

0800607a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800607a:	b480      	push	{r7}
 800607c:	b085      	sub	sp, #20
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006088:	b29b      	uxth	r3, r3
 800608a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800608c:	68fb      	ldr	r3, [r7, #12]
}
 800608e:	4618      	mov	r0, r3
 8006090:	3714      	adds	r7, #20
 8006092:	46bd      	mov	sp, r7
 8006094:	bc80      	pop	{r7}
 8006096:	4770      	bx	lr

08006098 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bc80      	pop	{r7}
 80060ac:	4770      	bx	lr

080060ae <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b08b      	sub	sp, #44	@ 0x2c
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	60f8      	str	r0, [r7, #12]
 80060b6:	60b9      	str	r1, [r7, #8]
 80060b8:	4611      	mov	r1, r2
 80060ba:	461a      	mov	r2, r3
 80060bc:	460b      	mov	r3, r1
 80060be:	80fb      	strh	r3, [r7, #6]
 80060c0:	4613      	mov	r3, r2
 80060c2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80060c4:	88bb      	ldrh	r3, [r7, #4]
 80060c6:	3301      	adds	r3, #1
 80060c8:	085b      	lsrs	r3, r3, #1
 80060ca:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80060d4:	88fb      	ldrh	r3, [r7, #6]
 80060d6:	005a      	lsls	r2, r3, #1
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060e0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80060e6:	e01f      	b.n	8006128 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	3301      	adds	r3, #1
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	b21b      	sxth	r3, r3
 80060f6:	021b      	lsls	r3, r3, #8
 80060f8:	b21a      	sxth	r2, r3
 80060fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80060fe:	4313      	orrs	r3, r2
 8006100:	b21b      	sxth	r3, r3
 8006102:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006104:	6a3b      	ldr	r3, [r7, #32]
 8006106:	8a7a      	ldrh	r2, [r7, #18]
 8006108:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800610a:	6a3b      	ldr	r3, [r7, #32]
 800610c:	3302      	adds	r3, #2
 800610e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	3302      	adds	r3, #2
 8006114:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	3301      	adds	r3, #1
 800611a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	3301      	adds	r3, #1
 8006120:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006124:	3b01      	subs	r3, #1
 8006126:	627b      	str	r3, [r7, #36]	@ 0x24
 8006128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1dc      	bne.n	80060e8 <USB_WritePMA+0x3a>
  }
}
 800612e:	bf00      	nop
 8006130:	bf00      	nop
 8006132:	372c      	adds	r7, #44	@ 0x2c
 8006134:	46bd      	mov	sp, r7
 8006136:	bc80      	pop	{r7}
 8006138:	4770      	bx	lr

0800613a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800613a:	b480      	push	{r7}
 800613c:	b08b      	sub	sp, #44	@ 0x2c
 800613e:	af00      	add	r7, sp, #0
 8006140:	60f8      	str	r0, [r7, #12]
 8006142:	60b9      	str	r1, [r7, #8]
 8006144:	4611      	mov	r1, r2
 8006146:	461a      	mov	r2, r3
 8006148:	460b      	mov	r3, r1
 800614a:	80fb      	strh	r3, [r7, #6]
 800614c:	4613      	mov	r3, r2
 800614e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006150:	88bb      	ldrh	r3, [r7, #4]
 8006152:	085b      	lsrs	r3, r3, #1
 8006154:	b29b      	uxth	r3, r3
 8006156:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006160:	88fb      	ldrh	r3, [r7, #6]
 8006162:	005a      	lsls	r2, r3, #1
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	4413      	add	r3, r2
 8006168:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800616c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	627b      	str	r3, [r7, #36]	@ 0x24
 8006172:	e01b      	b.n	80061ac <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006174:	6a3b      	ldr	r3, [r7, #32]
 8006176:	881b      	ldrh	r3, [r3, #0]
 8006178:	b29b      	uxth	r3, r3
 800617a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800617c:	6a3b      	ldr	r3, [r7, #32]
 800617e:	3302      	adds	r3, #2
 8006180:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	b2da      	uxtb	r2, r3
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	3301      	adds	r3, #1
 800618e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	0a1b      	lsrs	r3, r3, #8
 8006194:	b2da      	uxtb	r2, r3
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	3301      	adds	r3, #1
 800619e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80061a0:	6a3b      	ldr	r3, [r7, #32]
 80061a2:	3302      	adds	r3, #2
 80061a4:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80061a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a8:	3b01      	subs	r3, #1
 80061aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80061ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1e0      	bne.n	8006174 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80061b2:	88bb      	ldrh	r3, [r7, #4]
 80061b4:	f003 0301 	and.w	r3, r3, #1
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d007      	beq.n	80061ce <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80061be:	6a3b      	ldr	r3, [r7, #32]
 80061c0:	881b      	ldrh	r3, [r3, #0]
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	701a      	strb	r2, [r3, #0]
  }
}
 80061ce:	bf00      	nop
 80061d0:	372c      	adds	r7, #44	@ 0x2c
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bc80      	pop	{r7}
 80061d6:	4770      	bx	lr

080061d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	460b      	mov	r3, r1
 80061e2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80061e4:	2300      	movs	r3, #0
 80061e6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	7c1b      	ldrb	r3, [r3, #16]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d115      	bne.n	800621c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80061f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80061f4:	2202      	movs	r2, #2
 80061f6:	2181      	movs	r1, #129	@ 0x81
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f001 fe82 	bl	8007f02 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006204:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006208:	2202      	movs	r2, #2
 800620a:	2101      	movs	r1, #1
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f001 fe78 	bl	8007f02 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800621a:	e012      	b.n	8006242 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800621c:	2340      	movs	r3, #64	@ 0x40
 800621e:	2202      	movs	r2, #2
 8006220:	2181      	movs	r1, #129	@ 0x81
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f001 fe6d 	bl	8007f02 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800622e:	2340      	movs	r3, #64	@ 0x40
 8006230:	2202      	movs	r2, #2
 8006232:	2101      	movs	r1, #1
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f001 fe64 	bl	8007f02 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006242:	2308      	movs	r3, #8
 8006244:	2203      	movs	r2, #3
 8006246:	2182      	movs	r1, #130	@ 0x82
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f001 fe5a 	bl	8007f02 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006254:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006258:	f001 ff7a 	bl	8008150 <USBD_static_malloc>
 800625c:	4602      	mov	r2, r0
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800626a:	2b00      	cmp	r3, #0
 800626c:	d102      	bne.n	8006274 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800626e:	2301      	movs	r3, #1
 8006270:	73fb      	strb	r3, [r7, #15]
 8006272:	e026      	b.n	80062c2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800627a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2200      	movs	r2, #0
 800628a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	2200      	movs	r2, #0
 8006292:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	7c1b      	ldrb	r3, [r3, #16]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d109      	bne.n	80062b2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80062a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80062a8:	2101      	movs	r1, #1
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f001 ff19 	bl	80080e2 <USBD_LL_PrepareReceive>
 80062b0:	e007      	b.n	80062c2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80062b8:	2340      	movs	r3, #64	@ 0x40
 80062ba:	2101      	movs	r1, #1
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f001 ff10 	bl	80080e2 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80062c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	460b      	mov	r3, r1
 80062d6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80062d8:	2300      	movs	r3, #0
 80062da:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80062dc:	2181      	movs	r1, #129	@ 0x81
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f001 fe35 	bl	8007f4e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80062ea:	2101      	movs	r1, #1
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f001 fe2e 	bl	8007f4e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80062fa:	2182      	movs	r1, #130	@ 0x82
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f001 fe26 	bl	8007f4e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00e      	beq.n	8006330 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006322:	4618      	mov	r0, r3
 8006324:	f001 ff20 	bl	8008168 <USBD_static_free>
    pdev->pClassData = NULL;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8006330:	7bfb      	ldrb	r3, [r7, #15]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b086      	sub	sp, #24
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
 8006342:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800634a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800634c:	2300      	movs	r3, #0
 800634e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006350:	2300      	movs	r3, #0
 8006352:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006354:	2300      	movs	r3, #0
 8006356:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006360:	2b00      	cmp	r3, #0
 8006362:	d039      	beq.n	80063d8 <USBD_CDC_Setup+0x9e>
 8006364:	2b20      	cmp	r3, #32
 8006366:	d17f      	bne.n	8006468 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	88db      	ldrh	r3, [r3, #6]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d029      	beq.n	80063c4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	b25b      	sxtb	r3, r3
 8006376:	2b00      	cmp	r3, #0
 8006378:	da11      	bge.n	800639e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	683a      	ldr	r2, [r7, #0]
 8006384:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006386:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	88d2      	ldrh	r2, [r2, #6]
 800638c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800638e:	6939      	ldr	r1, [r7, #16]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	88db      	ldrh	r3, [r3, #6]
 8006394:	461a      	mov	r2, r3
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f001 fa06 	bl	80077a8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800639c:	e06b      	b.n	8006476 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	785a      	ldrb	r2, [r3, #1]
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	88db      	ldrh	r3, [r3, #6]
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80063b4:	6939      	ldr	r1, [r7, #16]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	88db      	ldrh	r3, [r3, #6]
 80063ba:	461a      	mov	r2, r3
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f001 fa21 	bl	8007804 <USBD_CtlPrepareRx>
      break;
 80063c2:	e058      	b.n	8006476 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	683a      	ldr	r2, [r7, #0]
 80063ce:	7850      	ldrb	r0, [r2, #1]
 80063d0:	2200      	movs	r2, #0
 80063d2:	6839      	ldr	r1, [r7, #0]
 80063d4:	4798      	blx	r3
      break;
 80063d6:	e04e      	b.n	8006476 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	785b      	ldrb	r3, [r3, #1]
 80063dc:	2b0b      	cmp	r3, #11
 80063de:	d02e      	beq.n	800643e <USBD_CDC_Setup+0x104>
 80063e0:	2b0b      	cmp	r3, #11
 80063e2:	dc38      	bgt.n	8006456 <USBD_CDC_Setup+0x11c>
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d002      	beq.n	80063ee <USBD_CDC_Setup+0xb4>
 80063e8:	2b0a      	cmp	r3, #10
 80063ea:	d014      	beq.n	8006416 <USBD_CDC_Setup+0xdc>
 80063ec:	e033      	b.n	8006456 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063f4:	2b03      	cmp	r3, #3
 80063f6:	d107      	bne.n	8006408 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80063f8:	f107 030c 	add.w	r3, r7, #12
 80063fc:	2202      	movs	r2, #2
 80063fe:	4619      	mov	r1, r3
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f001 f9d1 	bl	80077a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006406:	e02e      	b.n	8006466 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006408:	6839      	ldr	r1, [r7, #0]
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f001 f962 	bl	80076d4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006410:	2302      	movs	r3, #2
 8006412:	75fb      	strb	r3, [r7, #23]
          break;
 8006414:	e027      	b.n	8006466 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800641c:	2b03      	cmp	r3, #3
 800641e:	d107      	bne.n	8006430 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006420:	f107 030f 	add.w	r3, r7, #15
 8006424:	2201      	movs	r2, #1
 8006426:	4619      	mov	r1, r3
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f001 f9bd 	bl	80077a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800642e:	e01a      	b.n	8006466 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006430:	6839      	ldr	r1, [r7, #0]
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f001 f94e 	bl	80076d4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006438:	2302      	movs	r3, #2
 800643a:	75fb      	strb	r3, [r7, #23]
          break;
 800643c:	e013      	b.n	8006466 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006444:	2b03      	cmp	r3, #3
 8006446:	d00d      	beq.n	8006464 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006448:	6839      	ldr	r1, [r7, #0]
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f001 f942 	bl	80076d4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006450:	2302      	movs	r3, #2
 8006452:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006454:	e006      	b.n	8006464 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006456:	6839      	ldr	r1, [r7, #0]
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f001 f93b 	bl	80076d4 <USBD_CtlError>
          ret = USBD_FAIL;
 800645e:	2302      	movs	r3, #2
 8006460:	75fb      	strb	r3, [r7, #23]
          break;
 8006462:	e000      	b.n	8006466 <USBD_CDC_Setup+0x12c>
          break;
 8006464:	bf00      	nop
      }
      break;
 8006466:	e006      	b.n	8006476 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006468:	6839      	ldr	r1, [r7, #0]
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f001 f932 	bl	80076d4 <USBD_CtlError>
      ret = USBD_FAIL;
 8006470:	2302      	movs	r3, #2
 8006472:	75fb      	strb	r3, [r7, #23]
      break;
 8006474:	bf00      	nop
  }

  return ret;
 8006476:	7dfb      	ldrb	r3, [r7, #23]
}
 8006478:	4618      	mov	r0, r3
 800647a:	3718      	adds	r7, #24
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	460b      	mov	r3, r1
 800648a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006492:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800649a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d03a      	beq.n	800651c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80064a6:	78fa      	ldrb	r2, [r7, #3]
 80064a8:	6879      	ldr	r1, [r7, #4]
 80064aa:	4613      	mov	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	440b      	add	r3, r1
 80064b4:	331c      	adds	r3, #28
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d029      	beq.n	8006510 <USBD_CDC_DataIn+0x90>
 80064bc:	78fa      	ldrb	r2, [r7, #3]
 80064be:	6879      	ldr	r1, [r7, #4]
 80064c0:	4613      	mov	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	440b      	add	r3, r1
 80064ca:	331c      	adds	r3, #28
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	78f9      	ldrb	r1, [r7, #3]
 80064d0:	68b8      	ldr	r0, [r7, #8]
 80064d2:	460b      	mov	r3, r1
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	440b      	add	r3, r1
 80064d8:	00db      	lsls	r3, r3, #3
 80064da:	4403      	add	r3, r0
 80064dc:	3320      	adds	r3, #32
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	fbb2 f1f3 	udiv	r1, r2, r3
 80064e4:	fb01 f303 	mul.w	r3, r1, r3
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d110      	bne.n	8006510 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80064ee:	78fa      	ldrb	r2, [r7, #3]
 80064f0:	6879      	ldr	r1, [r7, #4]
 80064f2:	4613      	mov	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4413      	add	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	440b      	add	r3, r1
 80064fc:	331c      	adds	r3, #28
 80064fe:	2200      	movs	r2, #0
 8006500:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006502:	78f9      	ldrb	r1, [r7, #3]
 8006504:	2300      	movs	r3, #0
 8006506:	2200      	movs	r2, #0
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f001 fdc7 	bl	800809c <USBD_LL_Transmit>
 800650e:	e003      	b.n	8006518 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8006518:	2300      	movs	r3, #0
 800651a:	e000      	b.n	800651e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800651c:	2302      	movs	r3, #2
  }
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b084      	sub	sp, #16
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
 800652e:	460b      	mov	r3, r1
 8006530:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006538:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800653a:	78fb      	ldrb	r3, [r7, #3]
 800653c:	4619      	mov	r1, r3
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f001 fdf2 	bl	8008128 <USBD_LL_GetRxDataSize>
 8006544:	4602      	mov	r2, r0
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00d      	beq.n	8006572 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800656a:	4611      	mov	r1, r2
 800656c:	4798      	blx	r3

    return USBD_OK;
 800656e:	2300      	movs	r3, #0
 8006570:	e000      	b.n	8006574 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006572:	2302      	movs	r3, #2
  }
}
 8006574:	4618      	mov	r0, r3
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800658a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006592:	2b00      	cmp	r3, #0
 8006594:	d014      	beq.n	80065c0 <USBD_CDC_EP0_RxReady+0x44>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800659c:	2bff      	cmp	r3, #255	@ 0xff
 800659e:	d00f      	beq.n	80065c0 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80065ae:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80065b6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	22ff      	movs	r2, #255	@ 0xff
 80065bc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
	...

080065cc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2243      	movs	r2, #67	@ 0x43
 80065d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80065da:	4b03      	ldr	r3, [pc, #12]	@ (80065e8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80065dc:	4618      	mov	r0, r3
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bc80      	pop	{r7}
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	20000094 	.word	0x20000094

080065ec <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2243      	movs	r2, #67	@ 0x43
 80065f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80065fa:	4b03      	ldr	r3, [pc, #12]	@ (8006608 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	bc80      	pop	{r7}
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	20000050 	.word	0x20000050

0800660c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2243      	movs	r2, #67	@ 0x43
 8006618:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800661a:	4b03      	ldr	r3, [pc, #12]	@ (8006628 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800661c:	4618      	mov	r0, r3
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	bc80      	pop	{r7}
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	200000d8 	.word	0x200000d8

0800662c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	220a      	movs	r2, #10
 8006638:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800663a:	4b03      	ldr	r3, [pc, #12]	@ (8006648 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800663c:	4618      	mov	r0, r3
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	bc80      	pop	{r7}
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	2000000c 	.word	0x2000000c

0800664c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006656:	2302      	movs	r3, #2
 8006658:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d005      	beq.n	800666c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8006668:	2300      	movs	r3, #0
 800666a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800666c:	7bfb      	ldrb	r3, [r7, #15]
}
 800666e:	4618      	mov	r0, r3
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	bc80      	pop	{r7}
 8006676:	4770      	bx	lr

08006678 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006678:	b480      	push	{r7}
 800667a:	b087      	sub	sp, #28
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	4613      	mov	r3, r2
 8006684:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800668c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006696:	88fa      	ldrh	r2, [r7, #6]
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	371c      	adds	r7, #28
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bc80      	pop	{r7}
 80066a8:	4770      	bx	lr

080066aa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b085      	sub	sp, #20
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
 80066b2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066ba:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	683a      	ldr	r2, [r7, #0]
 80066c0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3714      	adds	r7, #20
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bc80      	pop	{r7}
 80066ce:	4770      	bx	lr

080066d0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d01c      	beq.n	8006724 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d115      	bne.n	8006720 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006712:	b29b      	uxth	r3, r3
 8006714:	2181      	movs	r1, #129	@ 0x81
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f001 fcc0 	bl	800809c <USBD_LL_Transmit>

      return USBD_OK;
 800671c:	2300      	movs	r3, #0
 800671e:	e002      	b.n	8006726 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006720:	2301      	movs	r3, #1
 8006722:	e000      	b.n	8006726 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006724:	2302      	movs	r3, #2
  }
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b084      	sub	sp, #16
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800673c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006744:	2b00      	cmp	r3, #0
 8006746:	d017      	beq.n	8006778 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	7c1b      	ldrb	r3, [r3, #16]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d109      	bne.n	8006764 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006756:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800675a:	2101      	movs	r1, #1
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f001 fcc0 	bl	80080e2 <USBD_LL_PrepareReceive>
 8006762:	e007      	b.n	8006774 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800676a:	2340      	movs	r3, #64	@ 0x40
 800676c:	2101      	movs	r1, #1
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f001 fcb7 	bl	80080e2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006774:	2300      	movs	r3, #0
 8006776:	e000      	b.n	800677a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006778:	2302      	movs	r3, #2
  }
}
 800677a:	4618      	mov	r0, r3
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b084      	sub	sp, #16
 8006786:	af00      	add	r7, sp, #0
 8006788:	60f8      	str	r0, [r7, #12]
 800678a:	60b9      	str	r1, [r7, #8]
 800678c:	4613      	mov	r3, r2
 800678e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d101      	bne.n	800679a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006796:	2302      	movs	r3, #2
 8006798:	e01a      	b.n	80067d0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d003      	beq.n	80067ac <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	79fa      	ldrb	r2, [r7, #7]
 80067c6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f001 fb25 	bl	8007e18 <USBD_LL_Init>

  return USBD_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d006      	beq.n	80067fa <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80067f4:	2300      	movs	r3, #0
 80067f6:	73fb      	strb	r3, [r7, #15]
 80067f8:	e001      	b.n	80067fe <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80067fa:	2302      	movs	r3, #2
 80067fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80067fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006800:	4618      	mov	r0, r3
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	bc80      	pop	{r7}
 8006808:	4770      	bx	lr

0800680a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b082      	sub	sp, #8
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f001 fb5a 	bl	8007ecc <USBD_LL_Start>

  return USBD_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3708      	adds	r7, #8
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006822:	b480      	push	{r7}
 8006824:	b083      	sub	sp, #12
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	bc80      	pop	{r7}
 8006834:	4770      	bx	lr

08006836 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b084      	sub	sp, #16
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	460b      	mov	r3, r1
 8006840:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006842:	2302      	movs	r3, #2
 8006844:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00c      	beq.n	800686a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	78fa      	ldrb	r2, [r7, #3]
 800685a:	4611      	mov	r1, r2
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	4798      	blx	r3
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006866:	2300      	movs	r3, #0
 8006868:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800686a:	7bfb      	ldrb	r3, [r7, #15]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	460b      	mov	r3, r1
 800687e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	78fa      	ldrb	r2, [r7, #3]
 800688a:	4611      	mov	r1, r2
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	4798      	blx	r3

  return USBD_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3708      	adds	r7, #8
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b082      	sub	sp, #8
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80068aa:	6839      	ldr	r1, [r7, #0]
 80068ac:	4618      	mov	r0, r3
 80068ae:	f000 fed8 	bl	8007662 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80068c0:	461a      	mov	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80068ce:	f003 031f 	and.w	r3, r3, #31
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d016      	beq.n	8006904 <USBD_LL_SetupStage+0x6a>
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d81c      	bhi.n	8006914 <USBD_LL_SetupStage+0x7a>
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <USBD_LL_SetupStage+0x4a>
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d008      	beq.n	80068f4 <USBD_LL_SetupStage+0x5a>
 80068e2:	e017      	b.n	8006914 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80068ea:	4619      	mov	r1, r3
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 f9cb 	bl	8006c88 <USBD_StdDevReq>
      break;
 80068f2:	e01a      	b.n	800692a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80068fa:	4619      	mov	r1, r3
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fa2d 	bl	8006d5c <USBD_StdItfReq>
      break;
 8006902:	e012      	b.n	800692a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800690a:	4619      	mov	r1, r3
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 fa6d 	bl	8006dec <USBD_StdEPReq>
      break;
 8006912:	e00a      	b.n	800692a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800691a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800691e:	b2db      	uxtb	r3, r3
 8006920:	4619      	mov	r1, r3
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f001 fb32 	bl	8007f8c <USBD_LL_StallEP>
      break;
 8006928:	bf00      	nop
  }

  return USBD_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	460b      	mov	r3, r1
 800693e:	607a      	str	r2, [r7, #4]
 8006940:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006942:	7afb      	ldrb	r3, [r7, #11]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d14b      	bne.n	80069e0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800694e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006956:	2b03      	cmp	r3, #3
 8006958:	d134      	bne.n	80069c4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	68da      	ldr	r2, [r3, #12]
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	429a      	cmp	r2, r3
 8006964:	d919      	bls.n	800699a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	68da      	ldr	r2, [r3, #12]
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	1ad2      	subs	r2, r2, r3
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	68da      	ldr	r2, [r3, #12]
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800697c:	429a      	cmp	r2, r3
 800697e:	d203      	bcs.n	8006988 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006984:	b29b      	uxth	r3, r3
 8006986:	e002      	b.n	800698e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800698c:	b29b      	uxth	r3, r3
 800698e:	461a      	mov	r2, r3
 8006990:	6879      	ldr	r1, [r7, #4]
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f000 ff54 	bl	8007840 <USBD_CtlContinueRx>
 8006998:	e038      	b.n	8006a0c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00a      	beq.n	80069bc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80069ac:	2b03      	cmp	r3, #3
 80069ae:	d105      	bne.n	80069bc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f000 ff51 	bl	8007864 <USBD_CtlSendStatus>
 80069c2:	e023      	b.n	8006a0c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80069ca:	2b05      	cmp	r3, #5
 80069cc:	d11e      	bne.n	8006a0c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80069d6:	2100      	movs	r1, #0
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f001 fad7 	bl	8007f8c <USBD_LL_StallEP>
 80069de:	e015      	b.n	8006a0c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00d      	beq.n	8006a08 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80069f2:	2b03      	cmp	r3, #3
 80069f4:	d108      	bne.n	8006a08 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	7afa      	ldrb	r2, [r7, #11]
 8006a00:	4611      	mov	r1, r2
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	4798      	blx	r3
 8006a06:	e001      	b.n	8006a0c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006a08:	2302      	movs	r3, #2
 8006a0a:	e000      	b.n	8006a0e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3718      	adds	r7, #24
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b086      	sub	sp, #24
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	60f8      	str	r0, [r7, #12]
 8006a1e:	460b      	mov	r3, r1
 8006a20:	607a      	str	r2, [r7, #4]
 8006a22:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006a24:	7afb      	ldrb	r3, [r7, #11]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d17f      	bne.n	8006b2a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	3314      	adds	r3, #20
 8006a2e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d15c      	bne.n	8006af4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	68da      	ldr	r2, [r3, #12]
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d915      	bls.n	8006a72 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	68da      	ldr	r2, [r3, #12]
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	1ad2      	subs	r2, r2, r3
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	6879      	ldr	r1, [r7, #4]
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f000 febe 	bl	80077e0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a64:	2300      	movs	r3, #0
 8006a66:	2200      	movs	r2, #0
 8006a68:	2100      	movs	r1, #0
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f001 fb39 	bl	80080e2 <USBD_LL_PrepareReceive>
 8006a70:	e04e      	b.n	8006b10 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	6912      	ldr	r2, [r2, #16]
 8006a7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a7e:	fb01 f202 	mul.w	r2, r1, r2
 8006a82:	1a9b      	subs	r3, r3, r2
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d11c      	bne.n	8006ac2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	689a      	ldr	r2, [r3, #8]
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d316      	bcc.n	8006ac2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	689a      	ldr	r2, [r3, #8]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d20f      	bcs.n	8006ac2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	f000 fe9a 	bl	80077e0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	2100      	movs	r1, #0
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f001 fb11 	bl	80080e2 <USBD_LL_PrepareReceive>
 8006ac0:	e026      	b.n	8006b10 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00a      	beq.n	8006ae4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ad4:	2b03      	cmp	r3, #3
 8006ad6:	d105      	bne.n	8006ae4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006ae4:	2180      	movs	r1, #128	@ 0x80
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f001 fa50 	bl	8007f8c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f000 fecc 	bl	800788a <USBD_CtlReceiveStatus>
 8006af2:	e00d      	b.n	8006b10 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	d004      	beq.n	8006b08 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d103      	bne.n	8006b10 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006b08:	2180      	movs	r1, #128	@ 0x80
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f001 fa3e 	bl	8007f8c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d11d      	bne.n	8006b56 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f7ff fe81 	bl	8006822 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006b28:	e015      	b.n	8006b56 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b30:	695b      	ldr	r3, [r3, #20]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00d      	beq.n	8006b52 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006b3c:	2b03      	cmp	r3, #3
 8006b3e:	d108      	bne.n	8006b52 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b46:	695b      	ldr	r3, [r3, #20]
 8006b48:	7afa      	ldrb	r2, [r7, #11]
 8006b4a:	4611      	mov	r1, r2
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	4798      	blx	r3
 8006b50:	e001      	b.n	8006b56 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006b52:	2302      	movs	r3, #2
 8006b54:	e000      	b.n	8006b58 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3718      	adds	r7, #24
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b68:	2340      	movs	r3, #64	@ 0x40
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f001 f9c7 	bl	8007f02 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2240      	movs	r2, #64	@ 0x40
 8006b80:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b84:	2340      	movs	r3, #64	@ 0x40
 8006b86:	2200      	movs	r2, #0
 8006b88:	2180      	movs	r1, #128	@ 0x80
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f001 f9b9 	bl	8007f02 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2240      	movs	r2, #64	@ 0x40
 8006b9a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d009      	beq.n	8006bd8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	6852      	ldr	r2, [r2, #4]
 8006bd0:	b2d2      	uxtb	r2, r2
 8006bd2:	4611      	mov	r1, r2
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	4798      	blx	r3
  }

  return USBD_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3708      	adds	r7, #8
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006be2:	b480      	push	{r7}
 8006be4:	b083      	sub	sp, #12
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	460b      	mov	r3, r1
 8006bec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	78fa      	ldrb	r2, [r7, #3]
 8006bf2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	370c      	adds	r7, #12
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bc80      	pop	{r7}
 8006bfe:	4770      	bx	lr

08006c00 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2204      	movs	r2, #4
 8006c18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bc80      	pop	{r7}
 8006c26:	4770      	bx	lr

08006c28 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c36:	2b04      	cmp	r3, #4
 8006c38:	d105      	bne.n	8006c46 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bc80      	pop	{r7}
 8006c50:	4770      	bx	lr

08006c52 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b082      	sub	sp, #8
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c60:	2b03      	cmp	r3, #3
 8006c62:	d10b      	bne.n	8006c7c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c6a:	69db      	ldr	r3, [r3, #28]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d005      	beq.n	8006c7c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c76:	69db      	ldr	r3, [r3, #28]
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3708      	adds	r7, #8
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
	...

08006c88 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c92:	2300      	movs	r3, #0
 8006c94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006c9e:	2b40      	cmp	r3, #64	@ 0x40
 8006ca0:	d005      	beq.n	8006cae <USBD_StdDevReq+0x26>
 8006ca2:	2b40      	cmp	r3, #64	@ 0x40
 8006ca4:	d84f      	bhi.n	8006d46 <USBD_StdDevReq+0xbe>
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d009      	beq.n	8006cbe <USBD_StdDevReq+0x36>
 8006caa:	2b20      	cmp	r3, #32
 8006cac:	d14b      	bne.n	8006d46 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	6839      	ldr	r1, [r7, #0]
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	4798      	blx	r3
      break;
 8006cbc:	e048      	b.n	8006d50 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	785b      	ldrb	r3, [r3, #1]
 8006cc2:	2b09      	cmp	r3, #9
 8006cc4:	d839      	bhi.n	8006d3a <USBD_StdDevReq+0xb2>
 8006cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8006ccc <USBD_StdDevReq+0x44>)
 8006cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ccc:	08006d1d 	.word	0x08006d1d
 8006cd0:	08006d31 	.word	0x08006d31
 8006cd4:	08006d3b 	.word	0x08006d3b
 8006cd8:	08006d27 	.word	0x08006d27
 8006cdc:	08006d3b 	.word	0x08006d3b
 8006ce0:	08006cff 	.word	0x08006cff
 8006ce4:	08006cf5 	.word	0x08006cf5
 8006ce8:	08006d3b 	.word	0x08006d3b
 8006cec:	08006d13 	.word	0x08006d13
 8006cf0:	08006d09 	.word	0x08006d09
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006cf4:	6839      	ldr	r1, [r7, #0]
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 f9dc 	bl	80070b4 <USBD_GetDescriptor>
          break;
 8006cfc:	e022      	b.n	8006d44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006cfe:	6839      	ldr	r1, [r7, #0]
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 fb3f 	bl	8007384 <USBD_SetAddress>
          break;
 8006d06:	e01d      	b.n	8006d44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006d08:	6839      	ldr	r1, [r7, #0]
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 fb7e 	bl	800740c <USBD_SetConfig>
          break;
 8006d10:	e018      	b.n	8006d44 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006d12:	6839      	ldr	r1, [r7, #0]
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 fc07 	bl	8007528 <USBD_GetConfig>
          break;
 8006d1a:	e013      	b.n	8006d44 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006d1c:	6839      	ldr	r1, [r7, #0]
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fc37 	bl	8007592 <USBD_GetStatus>
          break;
 8006d24:	e00e      	b.n	8006d44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006d26:	6839      	ldr	r1, [r7, #0]
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 fc65 	bl	80075f8 <USBD_SetFeature>
          break;
 8006d2e:	e009      	b.n	8006d44 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006d30:	6839      	ldr	r1, [r7, #0]
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 fc74 	bl	8007620 <USBD_ClrFeature>
          break;
 8006d38:	e004      	b.n	8006d44 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006d3a:	6839      	ldr	r1, [r7, #0]
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fcc9 	bl	80076d4 <USBD_CtlError>
          break;
 8006d42:	bf00      	nop
      }
      break;
 8006d44:	e004      	b.n	8006d50 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006d46:	6839      	ldr	r1, [r7, #0]
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 fcc3 	bl	80076d4 <USBD_CtlError>
      break;
 8006d4e:	bf00      	nop
  }

  return ret;
 8006d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop

08006d5c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d66:	2300      	movs	r3, #0
 8006d68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006d72:	2b40      	cmp	r3, #64	@ 0x40
 8006d74:	d005      	beq.n	8006d82 <USBD_StdItfReq+0x26>
 8006d76:	2b40      	cmp	r3, #64	@ 0x40
 8006d78:	d82e      	bhi.n	8006dd8 <USBD_StdItfReq+0x7c>
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d001      	beq.n	8006d82 <USBD_StdItfReq+0x26>
 8006d7e:	2b20      	cmp	r3, #32
 8006d80:	d12a      	bne.n	8006dd8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d81d      	bhi.n	8006dca <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	889b      	ldrh	r3, [r3, #4]
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d813      	bhi.n	8006dc0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	6839      	ldr	r1, [r7, #0]
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	4798      	blx	r3
 8006da6:	4603      	mov	r3, r0
 8006da8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	88db      	ldrh	r3, [r3, #6]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d110      	bne.n	8006dd4 <USBD_StdItfReq+0x78>
 8006db2:	7bfb      	ldrb	r3, [r7, #15]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d10d      	bne.n	8006dd4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 fd53 	bl	8007864 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006dbe:	e009      	b.n	8006dd4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006dc0:	6839      	ldr	r1, [r7, #0]
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fc86 	bl	80076d4 <USBD_CtlError>
          break;
 8006dc8:	e004      	b.n	8006dd4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006dca:	6839      	ldr	r1, [r7, #0]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fc81 	bl	80076d4 <USBD_CtlError>
          break;
 8006dd2:	e000      	b.n	8006dd6 <USBD_StdItfReq+0x7a>
          break;
 8006dd4:	bf00      	nop
      }
      break;
 8006dd6:	e004      	b.n	8006de2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006dd8:	6839      	ldr	r1, [r7, #0]
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 fc7a 	bl	80076d4 <USBD_CtlError>
      break;
 8006de0:	bf00      	nop
  }

  return USBD_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006df6:	2300      	movs	r3, #0
 8006df8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	889b      	ldrh	r3, [r3, #4]
 8006dfe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006e08:	2b40      	cmp	r3, #64	@ 0x40
 8006e0a:	d007      	beq.n	8006e1c <USBD_StdEPReq+0x30>
 8006e0c:	2b40      	cmp	r3, #64	@ 0x40
 8006e0e:	f200 8146 	bhi.w	800709e <USBD_StdEPReq+0x2b2>
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00a      	beq.n	8006e2c <USBD_StdEPReq+0x40>
 8006e16:	2b20      	cmp	r3, #32
 8006e18:	f040 8141 	bne.w	800709e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	6839      	ldr	r1, [r7, #0]
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	4798      	blx	r3
      break;
 8006e2a:	e13d      	b.n	80070a8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006e34:	2b20      	cmp	r3, #32
 8006e36:	d10a      	bne.n	8006e4e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	6839      	ldr	r1, [r7, #0]
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	4798      	blx	r3
 8006e46:	4603      	mov	r3, r0
 8006e48:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006e4a:	7bfb      	ldrb	r3, [r7, #15]
 8006e4c:	e12d      	b.n	80070aa <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	785b      	ldrb	r3, [r3, #1]
 8006e52:	2b03      	cmp	r3, #3
 8006e54:	d007      	beq.n	8006e66 <USBD_StdEPReq+0x7a>
 8006e56:	2b03      	cmp	r3, #3
 8006e58:	f300 811b 	bgt.w	8007092 <USBD_StdEPReq+0x2a6>
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d072      	beq.n	8006f46 <USBD_StdEPReq+0x15a>
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d03a      	beq.n	8006eda <USBD_StdEPReq+0xee>
 8006e64:	e115      	b.n	8007092 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	d002      	beq.n	8006e76 <USBD_StdEPReq+0x8a>
 8006e70:	2b03      	cmp	r3, #3
 8006e72:	d015      	beq.n	8006ea0 <USBD_StdEPReq+0xb4>
 8006e74:	e02b      	b.n	8006ece <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e76:	7bbb      	ldrb	r3, [r7, #14]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00c      	beq.n	8006e96 <USBD_StdEPReq+0xaa>
 8006e7c:	7bbb      	ldrb	r3, [r7, #14]
 8006e7e:	2b80      	cmp	r3, #128	@ 0x80
 8006e80:	d009      	beq.n	8006e96 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006e82:	7bbb      	ldrb	r3, [r7, #14]
 8006e84:	4619      	mov	r1, r3
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f001 f880 	bl	8007f8c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006e8c:	2180      	movs	r1, #128	@ 0x80
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f001 f87c 	bl	8007f8c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e94:	e020      	b.n	8006ed8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006e96:	6839      	ldr	r1, [r7, #0]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 fc1b 	bl	80076d4 <USBD_CtlError>
              break;
 8006e9e:	e01b      	b.n	8006ed8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	885b      	ldrh	r3, [r3, #2]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10e      	bne.n	8006ec6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006ea8:	7bbb      	ldrb	r3, [r7, #14]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00b      	beq.n	8006ec6 <USBD_StdEPReq+0xda>
 8006eae:	7bbb      	ldrb	r3, [r7, #14]
 8006eb0:	2b80      	cmp	r3, #128	@ 0x80
 8006eb2:	d008      	beq.n	8006ec6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	88db      	ldrh	r3, [r3, #6]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d104      	bne.n	8006ec6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006ebc:	7bbb      	ldrb	r3, [r7, #14]
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f001 f863 	bl	8007f8c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fccc 	bl	8007864 <USBD_CtlSendStatus>

              break;
 8006ecc:	e004      	b.n	8006ed8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006ece:	6839      	ldr	r1, [r7, #0]
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fbff 	bl	80076d4 <USBD_CtlError>
              break;
 8006ed6:	bf00      	nop
          }
          break;
 8006ed8:	e0e0      	b.n	800709c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d002      	beq.n	8006eea <USBD_StdEPReq+0xfe>
 8006ee4:	2b03      	cmp	r3, #3
 8006ee6:	d015      	beq.n	8006f14 <USBD_StdEPReq+0x128>
 8006ee8:	e026      	b.n	8006f38 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006eea:	7bbb      	ldrb	r3, [r7, #14]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00c      	beq.n	8006f0a <USBD_StdEPReq+0x11e>
 8006ef0:	7bbb      	ldrb	r3, [r7, #14]
 8006ef2:	2b80      	cmp	r3, #128	@ 0x80
 8006ef4:	d009      	beq.n	8006f0a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006ef6:	7bbb      	ldrb	r3, [r7, #14]
 8006ef8:	4619      	mov	r1, r3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f001 f846 	bl	8007f8c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006f00:	2180      	movs	r1, #128	@ 0x80
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f001 f842 	bl	8007f8c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f08:	e01c      	b.n	8006f44 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006f0a:	6839      	ldr	r1, [r7, #0]
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 fbe1 	bl	80076d4 <USBD_CtlError>
              break;
 8006f12:	e017      	b.n	8006f44 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	885b      	ldrh	r3, [r3, #2]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d112      	bne.n	8006f42 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006f1c:	7bbb      	ldrb	r3, [r7, #14]
 8006f1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d004      	beq.n	8006f30 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f26:	7bbb      	ldrb	r3, [r7, #14]
 8006f28:	4619      	mov	r1, r3
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f001 f84d 	bl	8007fca <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 fc97 	bl	8007864 <USBD_CtlSendStatus>
              }
              break;
 8006f36:	e004      	b.n	8006f42 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006f38:	6839      	ldr	r1, [r7, #0]
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fbca 	bl	80076d4 <USBD_CtlError>
              break;
 8006f40:	e000      	b.n	8006f44 <USBD_StdEPReq+0x158>
              break;
 8006f42:	bf00      	nop
          }
          break;
 8006f44:	e0aa      	b.n	800709c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d002      	beq.n	8006f56 <USBD_StdEPReq+0x16a>
 8006f50:	2b03      	cmp	r3, #3
 8006f52:	d032      	beq.n	8006fba <USBD_StdEPReq+0x1ce>
 8006f54:	e097      	b.n	8007086 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f56:	7bbb      	ldrb	r3, [r7, #14]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d007      	beq.n	8006f6c <USBD_StdEPReq+0x180>
 8006f5c:	7bbb      	ldrb	r3, [r7, #14]
 8006f5e:	2b80      	cmp	r3, #128	@ 0x80
 8006f60:	d004      	beq.n	8006f6c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006f62:	6839      	ldr	r1, [r7, #0]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 fbb5 	bl	80076d4 <USBD_CtlError>
                break;
 8006f6a:	e091      	b.n	8007090 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	da0b      	bge.n	8006f8c <USBD_StdEPReq+0x1a0>
 8006f74:	7bbb      	ldrb	r3, [r7, #14]
 8006f76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4413      	add	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	3310      	adds	r3, #16
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	4413      	add	r3, r2
 8006f88:	3304      	adds	r3, #4
 8006f8a:	e00b      	b.n	8006fa4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f8c:	7bbb      	ldrb	r3, [r7, #14]
 8006f8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f92:	4613      	mov	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4413      	add	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	3304      	adds	r3, #4
 8006fa4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	2202      	movs	r2, #2
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 fbf8 	bl	80077a8 <USBD_CtlSendData>
              break;
 8006fb8:	e06a      	b.n	8007090 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006fba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	da11      	bge.n	8006fe6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006fc2:	7bbb      	ldrb	r3, [r7, #14]
 8006fc4:	f003 020f 	and.w	r2, r3, #15
 8006fc8:	6879      	ldr	r1, [r7, #4]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4413      	add	r3, r2
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	440b      	add	r3, r1
 8006fd4:	3318      	adds	r3, #24
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d117      	bne.n	800700c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006fdc:	6839      	ldr	r1, [r7, #0]
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 fb78 	bl	80076d4 <USBD_CtlError>
                  break;
 8006fe4:	e054      	b.n	8007090 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006fe6:	7bbb      	ldrb	r3, [r7, #14]
 8006fe8:	f003 020f 	and.w	r2, r3, #15
 8006fec:	6879      	ldr	r1, [r7, #4]
 8006fee:	4613      	mov	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4413      	add	r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	440b      	add	r3, r1
 8006ff8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d104      	bne.n	800700c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007002:	6839      	ldr	r1, [r7, #0]
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 fb65 	bl	80076d4 <USBD_CtlError>
                  break;
 800700a:	e041      	b.n	8007090 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800700c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007010:	2b00      	cmp	r3, #0
 8007012:	da0b      	bge.n	800702c <USBD_StdEPReq+0x240>
 8007014:	7bbb      	ldrb	r3, [r7, #14]
 8007016:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800701a:	4613      	mov	r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	4413      	add	r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	3310      	adds	r3, #16
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	4413      	add	r3, r2
 8007028:	3304      	adds	r3, #4
 800702a:	e00b      	b.n	8007044 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800702c:	7bbb      	ldrb	r3, [r7, #14]
 800702e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007032:	4613      	mov	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4413      	add	r3, r2
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	4413      	add	r3, r2
 8007042:	3304      	adds	r3, #4
 8007044:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007046:	7bbb      	ldrb	r3, [r7, #14]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d002      	beq.n	8007052 <USBD_StdEPReq+0x266>
 800704c:	7bbb      	ldrb	r3, [r7, #14]
 800704e:	2b80      	cmp	r3, #128	@ 0x80
 8007050:	d103      	bne.n	800705a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	2200      	movs	r2, #0
 8007056:	601a      	str	r2, [r3, #0]
 8007058:	e00e      	b.n	8007078 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800705a:	7bbb      	ldrb	r3, [r7, #14]
 800705c:	4619      	mov	r1, r3
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 ffd2 	bl	8008008 <USBD_LL_IsStallEP>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d003      	beq.n	8007072 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	2201      	movs	r2, #1
 800706e:	601a      	str	r2, [r3, #0]
 8007070:	e002      	b.n	8007078 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	2200      	movs	r2, #0
 8007076:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	2202      	movs	r2, #2
 800707c:	4619      	mov	r1, r3
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 fb92 	bl	80077a8 <USBD_CtlSendData>
              break;
 8007084:	e004      	b.n	8007090 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007086:	6839      	ldr	r1, [r7, #0]
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 fb23 	bl	80076d4 <USBD_CtlError>
              break;
 800708e:	bf00      	nop
          }
          break;
 8007090:	e004      	b.n	800709c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007092:	6839      	ldr	r1, [r7, #0]
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 fb1d 	bl	80076d4 <USBD_CtlError>
          break;
 800709a:	bf00      	nop
      }
      break;
 800709c:	e004      	b.n	80070a8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800709e:	6839      	ldr	r1, [r7, #0]
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fb17 	bl	80076d4 <USBD_CtlError>
      break;
 80070a6:	bf00      	nop
  }

  return ret;
 80070a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
	...

080070b4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80070be:	2300      	movs	r3, #0
 80070c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80070c2:	2300      	movs	r3, #0
 80070c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80070c6:	2300      	movs	r3, #0
 80070c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	885b      	ldrh	r3, [r3, #2]
 80070ce:	0a1b      	lsrs	r3, r3, #8
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	3b01      	subs	r3, #1
 80070d4:	2b06      	cmp	r3, #6
 80070d6:	f200 8128 	bhi.w	800732a <USBD_GetDescriptor+0x276>
 80070da:	a201      	add	r2, pc, #4	@ (adr r2, 80070e0 <USBD_GetDescriptor+0x2c>)
 80070dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e0:	080070fd 	.word	0x080070fd
 80070e4:	08007115 	.word	0x08007115
 80070e8:	08007155 	.word	0x08007155
 80070ec:	0800732b 	.word	0x0800732b
 80070f0:	0800732b 	.word	0x0800732b
 80070f4:	080072cb 	.word	0x080072cb
 80070f8:	080072f7 	.word	0x080072f7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	7c12      	ldrb	r2, [r2, #16]
 8007108:	f107 0108 	add.w	r1, r7, #8
 800710c:	4610      	mov	r0, r2
 800710e:	4798      	blx	r3
 8007110:	60f8      	str	r0, [r7, #12]
      break;
 8007112:	e112      	b.n	800733a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	7c1b      	ldrb	r3, [r3, #16]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10d      	bne.n	8007138 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007124:	f107 0208 	add.w	r2, r7, #8
 8007128:	4610      	mov	r0, r2
 800712a:	4798      	blx	r3
 800712c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	3301      	adds	r3, #1
 8007132:	2202      	movs	r2, #2
 8007134:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007136:	e100      	b.n	800733a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800713e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007140:	f107 0208 	add.w	r2, r7, #8
 8007144:	4610      	mov	r0, r2
 8007146:	4798      	blx	r3
 8007148:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	3301      	adds	r3, #1
 800714e:	2202      	movs	r2, #2
 8007150:	701a      	strb	r2, [r3, #0]
      break;
 8007152:	e0f2      	b.n	800733a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	885b      	ldrh	r3, [r3, #2]
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b05      	cmp	r3, #5
 800715c:	f200 80ac 	bhi.w	80072b8 <USBD_GetDescriptor+0x204>
 8007160:	a201      	add	r2, pc, #4	@ (adr r2, 8007168 <USBD_GetDescriptor+0xb4>)
 8007162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007166:	bf00      	nop
 8007168:	08007181 	.word	0x08007181
 800716c:	080071b5 	.word	0x080071b5
 8007170:	080071e9 	.word	0x080071e9
 8007174:	0800721d 	.word	0x0800721d
 8007178:	08007251 	.word	0x08007251
 800717c:	08007285 	.word	0x08007285
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00b      	beq.n	80071a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	7c12      	ldrb	r2, [r2, #16]
 8007198:	f107 0108 	add.w	r1, r7, #8
 800719c:	4610      	mov	r0, r2
 800719e:	4798      	blx	r3
 80071a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071a2:	e091      	b.n	80072c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071a4:	6839      	ldr	r1, [r7, #0]
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 fa94 	bl	80076d4 <USBD_CtlError>
            err++;
 80071ac:	7afb      	ldrb	r3, [r7, #11]
 80071ae:	3301      	adds	r3, #1
 80071b0:	72fb      	strb	r3, [r7, #11]
          break;
 80071b2:	e089      	b.n	80072c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00b      	beq.n	80071d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	7c12      	ldrb	r2, [r2, #16]
 80071cc:	f107 0108 	add.w	r1, r7, #8
 80071d0:	4610      	mov	r0, r2
 80071d2:	4798      	blx	r3
 80071d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071d6:	e077      	b.n	80072c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071d8:	6839      	ldr	r1, [r7, #0]
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 fa7a 	bl	80076d4 <USBD_CtlError>
            err++;
 80071e0:	7afb      	ldrb	r3, [r7, #11]
 80071e2:	3301      	adds	r3, #1
 80071e4:	72fb      	strb	r3, [r7, #11]
          break;
 80071e6:	e06f      	b.n	80072c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00b      	beq.n	800720c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	7c12      	ldrb	r2, [r2, #16]
 8007200:	f107 0108 	add.w	r1, r7, #8
 8007204:	4610      	mov	r0, r2
 8007206:	4798      	blx	r3
 8007208:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800720a:	e05d      	b.n	80072c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800720c:	6839      	ldr	r1, [r7, #0]
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fa60 	bl	80076d4 <USBD_CtlError>
            err++;
 8007214:	7afb      	ldrb	r3, [r7, #11]
 8007216:	3301      	adds	r3, #1
 8007218:	72fb      	strb	r3, [r7, #11]
          break;
 800721a:	e055      	b.n	80072c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00b      	beq.n	8007240 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	7c12      	ldrb	r2, [r2, #16]
 8007234:	f107 0108 	add.w	r1, r7, #8
 8007238:	4610      	mov	r0, r2
 800723a:	4798      	blx	r3
 800723c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800723e:	e043      	b.n	80072c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007240:	6839      	ldr	r1, [r7, #0]
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fa46 	bl	80076d4 <USBD_CtlError>
            err++;
 8007248:	7afb      	ldrb	r3, [r7, #11]
 800724a:	3301      	adds	r3, #1
 800724c:	72fb      	strb	r3, [r7, #11]
          break;
 800724e:	e03b      	b.n	80072c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007256:	695b      	ldr	r3, [r3, #20]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00b      	beq.n	8007274 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007262:	695b      	ldr	r3, [r3, #20]
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	7c12      	ldrb	r2, [r2, #16]
 8007268:	f107 0108 	add.w	r1, r7, #8
 800726c:	4610      	mov	r0, r2
 800726e:	4798      	blx	r3
 8007270:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007272:	e029      	b.n	80072c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007274:	6839      	ldr	r1, [r7, #0]
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fa2c 	bl	80076d4 <USBD_CtlError>
            err++;
 800727c:	7afb      	ldrb	r3, [r7, #11]
 800727e:	3301      	adds	r3, #1
 8007280:	72fb      	strb	r3, [r7, #11]
          break;
 8007282:	e021      	b.n	80072c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00b      	beq.n	80072a8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	7c12      	ldrb	r2, [r2, #16]
 800729c:	f107 0108 	add.w	r1, r7, #8
 80072a0:	4610      	mov	r0, r2
 80072a2:	4798      	blx	r3
 80072a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072a6:	e00f      	b.n	80072c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072a8:	6839      	ldr	r1, [r7, #0]
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fa12 	bl	80076d4 <USBD_CtlError>
            err++;
 80072b0:	7afb      	ldrb	r3, [r7, #11]
 80072b2:	3301      	adds	r3, #1
 80072b4:	72fb      	strb	r3, [r7, #11]
          break;
 80072b6:	e007      	b.n	80072c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80072b8:	6839      	ldr	r1, [r7, #0]
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fa0a 	bl	80076d4 <USBD_CtlError>
          err++;
 80072c0:	7afb      	ldrb	r3, [r7, #11]
 80072c2:	3301      	adds	r3, #1
 80072c4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80072c6:	e038      	b.n	800733a <USBD_GetDescriptor+0x286>
 80072c8:	e037      	b.n	800733a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	7c1b      	ldrb	r3, [r3, #16]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d109      	bne.n	80072e6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072da:	f107 0208 	add.w	r2, r7, #8
 80072de:	4610      	mov	r0, r2
 80072e0:	4798      	blx	r3
 80072e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80072e4:	e029      	b.n	800733a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80072e6:	6839      	ldr	r1, [r7, #0]
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f9f3 	bl	80076d4 <USBD_CtlError>
        err++;
 80072ee:	7afb      	ldrb	r3, [r7, #11]
 80072f0:	3301      	adds	r3, #1
 80072f2:	72fb      	strb	r3, [r7, #11]
      break;
 80072f4:	e021      	b.n	800733a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	7c1b      	ldrb	r3, [r3, #16]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10d      	bne.n	800731a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007306:	f107 0208 	add.w	r2, r7, #8
 800730a:	4610      	mov	r0, r2
 800730c:	4798      	blx	r3
 800730e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	3301      	adds	r3, #1
 8007314:	2207      	movs	r2, #7
 8007316:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007318:	e00f      	b.n	800733a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800731a:	6839      	ldr	r1, [r7, #0]
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 f9d9 	bl	80076d4 <USBD_CtlError>
        err++;
 8007322:	7afb      	ldrb	r3, [r7, #11]
 8007324:	3301      	adds	r3, #1
 8007326:	72fb      	strb	r3, [r7, #11]
      break;
 8007328:	e007      	b.n	800733a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800732a:	6839      	ldr	r1, [r7, #0]
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f9d1 	bl	80076d4 <USBD_CtlError>
      err++;
 8007332:	7afb      	ldrb	r3, [r7, #11]
 8007334:	3301      	adds	r3, #1
 8007336:	72fb      	strb	r3, [r7, #11]
      break;
 8007338:	bf00      	nop
  }

  if (err != 0U)
 800733a:	7afb      	ldrb	r3, [r7, #11]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d11c      	bne.n	800737a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007340:	893b      	ldrh	r3, [r7, #8]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d011      	beq.n	800736a <USBD_GetDescriptor+0x2b6>
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	88db      	ldrh	r3, [r3, #6]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00d      	beq.n	800736a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	88da      	ldrh	r2, [r3, #6]
 8007352:	893b      	ldrh	r3, [r7, #8]
 8007354:	4293      	cmp	r3, r2
 8007356:	bf28      	it	cs
 8007358:	4613      	movcs	r3, r2
 800735a:	b29b      	uxth	r3, r3
 800735c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800735e:	893b      	ldrh	r3, [r7, #8]
 8007360:	461a      	mov	r2, r3
 8007362:	68f9      	ldr	r1, [r7, #12]
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 fa1f 	bl	80077a8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	88db      	ldrh	r3, [r3, #6]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d104      	bne.n	800737c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fa76 	bl	8007864 <USBD_CtlSendStatus>
 8007378:	e000      	b.n	800737c <USBD_GetDescriptor+0x2c8>
    return;
 800737a:	bf00      	nop
    }
  }
}
 800737c:	3710      	adds	r7, #16
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop

08007384 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	889b      	ldrh	r3, [r3, #4]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d130      	bne.n	80073f8 <USBD_SetAddress+0x74>
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	88db      	ldrh	r3, [r3, #6]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d12c      	bne.n	80073f8 <USBD_SetAddress+0x74>
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	885b      	ldrh	r3, [r3, #2]
 80073a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80073a4:	d828      	bhi.n	80073f8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	885b      	ldrh	r3, [r3, #2]
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073b8:	2b03      	cmp	r3, #3
 80073ba:	d104      	bne.n	80073c6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 f988 	bl	80076d4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073c4:	e01d      	b.n	8007402 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	7bfa      	ldrb	r2, [r7, #15]
 80073ca:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80073ce:	7bfb      	ldrb	r3, [r7, #15]
 80073d0:	4619      	mov	r1, r3
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fe43 	bl	800805e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 fa43 	bl	8007864 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80073de:	7bfb      	ldrb	r3, [r7, #15]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d004      	beq.n	80073ee <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2202      	movs	r2, #2
 80073e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ec:	e009      	b.n	8007402 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073f6:	e004      	b.n	8007402 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80073f8:	6839      	ldr	r1, [r7, #0]
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f96a 	bl	80076d4 <USBD_CtlError>
  }
}
 8007400:	bf00      	nop
 8007402:	bf00      	nop
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
	...

0800740c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	885b      	ldrh	r3, [r3, #2]
 800741a:	b2da      	uxtb	r2, r3
 800741c:	4b41      	ldr	r3, [pc, #260]	@ (8007524 <USBD_SetConfig+0x118>)
 800741e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007420:	4b40      	ldr	r3, [pc, #256]	@ (8007524 <USBD_SetConfig+0x118>)
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d904      	bls.n	8007432 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007428:	6839      	ldr	r1, [r7, #0]
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 f952 	bl	80076d4 <USBD_CtlError>
 8007430:	e075      	b.n	800751e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007438:	2b02      	cmp	r3, #2
 800743a:	d002      	beq.n	8007442 <USBD_SetConfig+0x36>
 800743c:	2b03      	cmp	r3, #3
 800743e:	d023      	beq.n	8007488 <USBD_SetConfig+0x7c>
 8007440:	e062      	b.n	8007508 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007442:	4b38      	ldr	r3, [pc, #224]	@ (8007524 <USBD_SetConfig+0x118>)
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d01a      	beq.n	8007480 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800744a:	4b36      	ldr	r3, [pc, #216]	@ (8007524 <USBD_SetConfig+0x118>)
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	461a      	mov	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2203      	movs	r2, #3
 8007458:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800745c:	4b31      	ldr	r3, [pc, #196]	@ (8007524 <USBD_SetConfig+0x118>)
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	4619      	mov	r1, r3
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f7ff f9e7 	bl	8006836 <USBD_SetClassConfig>
 8007468:	4603      	mov	r3, r0
 800746a:	2b02      	cmp	r3, #2
 800746c:	d104      	bne.n	8007478 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f92f 	bl	80076d4 <USBD_CtlError>
            return;
 8007476:	e052      	b.n	800751e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 f9f3 	bl	8007864 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800747e:	e04e      	b.n	800751e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 f9ef 	bl	8007864 <USBD_CtlSendStatus>
        break;
 8007486:	e04a      	b.n	800751e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007488:	4b26      	ldr	r3, [pc, #152]	@ (8007524 <USBD_SetConfig+0x118>)
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d112      	bne.n	80074b6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2202      	movs	r2, #2
 8007494:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007498:	4b22      	ldr	r3, [pc, #136]	@ (8007524 <USBD_SetConfig+0x118>)
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	461a      	mov	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80074a2:	4b20      	ldr	r3, [pc, #128]	@ (8007524 <USBD_SetConfig+0x118>)
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	4619      	mov	r1, r3
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f7ff f9e3 	bl	8006874 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f9d8 	bl	8007864 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80074b4:	e033      	b.n	800751e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80074b6:	4b1b      	ldr	r3, [pc, #108]	@ (8007524 <USBD_SetConfig+0x118>)
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	461a      	mov	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d01d      	beq.n	8007500 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	4619      	mov	r1, r3
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7ff f9d1 	bl	8006874 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80074d2:	4b14      	ldr	r3, [pc, #80]	@ (8007524 <USBD_SetConfig+0x118>)
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	461a      	mov	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80074dc:	4b11      	ldr	r3, [pc, #68]	@ (8007524 <USBD_SetConfig+0x118>)
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	4619      	mov	r1, r3
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7ff f9a7 	bl	8006836 <USBD_SetClassConfig>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d104      	bne.n	80074f8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80074ee:	6839      	ldr	r1, [r7, #0]
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f8ef 	bl	80076d4 <USBD_CtlError>
            return;
 80074f6:	e012      	b.n	800751e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f9b3 	bl	8007864 <USBD_CtlSendStatus>
        break;
 80074fe:	e00e      	b.n	800751e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 f9af 	bl	8007864 <USBD_CtlSendStatus>
        break;
 8007506:	e00a      	b.n	800751e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007508:	6839      	ldr	r1, [r7, #0]
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f8e2 	bl	80076d4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007510:	4b04      	ldr	r3, [pc, #16]	@ (8007524 <USBD_SetConfig+0x118>)
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	4619      	mov	r1, r3
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f7ff f9ac 	bl	8006874 <USBD_ClrClassConfig>
        break;
 800751c:	bf00      	nop
    }
  }
}
 800751e:	3708      	adds	r7, #8
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	2000025c 	.word	0x2000025c

08007528 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	88db      	ldrh	r3, [r3, #6]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d004      	beq.n	8007544 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800753a:	6839      	ldr	r1, [r7, #0]
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f8c9 	bl	80076d4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007542:	e022      	b.n	800758a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800754a:	2b02      	cmp	r3, #2
 800754c:	dc02      	bgt.n	8007554 <USBD_GetConfig+0x2c>
 800754e:	2b00      	cmp	r3, #0
 8007550:	dc03      	bgt.n	800755a <USBD_GetConfig+0x32>
 8007552:	e015      	b.n	8007580 <USBD_GetConfig+0x58>
 8007554:	2b03      	cmp	r3, #3
 8007556:	d00b      	beq.n	8007570 <USBD_GetConfig+0x48>
 8007558:	e012      	b.n	8007580 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	3308      	adds	r3, #8
 8007564:	2201      	movs	r2, #1
 8007566:	4619      	mov	r1, r3
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 f91d 	bl	80077a8 <USBD_CtlSendData>
        break;
 800756e:	e00c      	b.n	800758a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	3304      	adds	r3, #4
 8007574:	2201      	movs	r2, #1
 8007576:	4619      	mov	r1, r3
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 f915 	bl	80077a8 <USBD_CtlSendData>
        break;
 800757e:	e004      	b.n	800758a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007580:	6839      	ldr	r1, [r7, #0]
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f8a6 	bl	80076d4 <USBD_CtlError>
        break;
 8007588:	bf00      	nop
}
 800758a:	bf00      	nop
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b082      	sub	sp, #8
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
 800759a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075a2:	3b01      	subs	r3, #1
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d81e      	bhi.n	80075e6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	88db      	ldrh	r3, [r3, #6]
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d004      	beq.n	80075ba <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80075b0:	6839      	ldr	r1, [r7, #0]
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f88e 	bl	80076d4 <USBD_CtlError>
        break;
 80075b8:	e01a      	b.n	80075f0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d005      	beq.n	80075d6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	f043 0202 	orr.w	r2, r3, #2
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	330c      	adds	r3, #12
 80075da:	2202      	movs	r2, #2
 80075dc:	4619      	mov	r1, r3
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 f8e2 	bl	80077a8 <USBD_CtlSendData>
      break;
 80075e4:	e004      	b.n	80075f0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80075e6:	6839      	ldr	r1, [r7, #0]
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 f873 	bl	80076d4 <USBD_CtlError>
      break;
 80075ee:	bf00      	nop
  }
}
 80075f0:	bf00      	nop
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	885b      	ldrh	r3, [r3, #2]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d106      	bne.n	8007618 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2201      	movs	r2, #1
 800760e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f926 	bl	8007864 <USBD_CtlSendStatus>
  }
}
 8007618:	bf00      	nop
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007630:	3b01      	subs	r3, #1
 8007632:	2b02      	cmp	r3, #2
 8007634:	d80b      	bhi.n	800764e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	885b      	ldrh	r3, [r3, #2]
 800763a:	2b01      	cmp	r3, #1
 800763c:	d10c      	bne.n	8007658 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f90c 	bl	8007864 <USBD_CtlSendStatus>
      }
      break;
 800764c:	e004      	b.n	8007658 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800764e:	6839      	ldr	r1, [r7, #0]
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f83f 	bl	80076d4 <USBD_CtlError>
      break;
 8007656:	e000      	b.n	800765a <USBD_ClrFeature+0x3a>
      break;
 8007658:	bf00      	nop
  }
}
 800765a:	bf00      	nop
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007662:	b480      	push	{r7}
 8007664:	b083      	sub	sp, #12
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	781a      	ldrb	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	785a      	ldrb	r2, [r3, #1]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	3302      	adds	r3, #2
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	461a      	mov	r2, r3
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	3303      	adds	r3, #3
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	021b      	lsls	r3, r3, #8
 800768c:	b29b      	uxth	r3, r3
 800768e:	4413      	add	r3, r2
 8007690:	b29a      	uxth	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	3304      	adds	r3, #4
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	461a      	mov	r2, r3
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	3305      	adds	r3, #5
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	021b      	lsls	r3, r3, #8
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	4413      	add	r3, r2
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	3306      	adds	r3, #6
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	461a      	mov	r2, r3
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	3307      	adds	r3, #7
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	021b      	lsls	r3, r3, #8
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	4413      	add	r3, r2
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	80da      	strh	r2, [r3, #6]

}
 80076ca:	bf00      	nop
 80076cc:	370c      	adds	r7, #12
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bc80      	pop	{r7}
 80076d2:	4770      	bx	lr

080076d4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80076de:	2180      	movs	r1, #128	@ 0x80
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fc53 	bl	8007f8c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80076e6:	2100      	movs	r1, #0
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 fc4f 	bl	8007f8c <USBD_LL_StallEP>
}
 80076ee:	bf00      	nop
 80076f0:	3708      	adds	r7, #8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b086      	sub	sp, #24
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	60f8      	str	r0, [r7, #12]
 80076fe:	60b9      	str	r1, [r7, #8]
 8007700:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007702:	2300      	movs	r3, #0
 8007704:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d032      	beq.n	8007772 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800770c:	68f8      	ldr	r0, [r7, #12]
 800770e:	f000 f834 	bl	800777a <USBD_GetLen>
 8007712:	4603      	mov	r3, r0
 8007714:	3301      	adds	r3, #1
 8007716:	b29b      	uxth	r3, r3
 8007718:	005b      	lsls	r3, r3, #1
 800771a:	b29a      	uxth	r2, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007720:	7dfb      	ldrb	r3, [r7, #23]
 8007722:	1c5a      	adds	r2, r3, #1
 8007724:	75fa      	strb	r2, [r7, #23]
 8007726:	461a      	mov	r2, r3
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	4413      	add	r3, r2
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	7812      	ldrb	r2, [r2, #0]
 8007730:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007732:	7dfb      	ldrb	r3, [r7, #23]
 8007734:	1c5a      	adds	r2, r3, #1
 8007736:	75fa      	strb	r2, [r7, #23]
 8007738:	461a      	mov	r2, r3
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	4413      	add	r3, r2
 800773e:	2203      	movs	r2, #3
 8007740:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007742:	e012      	b.n	800776a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	1c5a      	adds	r2, r3, #1
 8007748:	60fa      	str	r2, [r7, #12]
 800774a:	7dfa      	ldrb	r2, [r7, #23]
 800774c:	1c51      	adds	r1, r2, #1
 800774e:	75f9      	strb	r1, [r7, #23]
 8007750:	4611      	mov	r1, r2
 8007752:	68ba      	ldr	r2, [r7, #8]
 8007754:	440a      	add	r2, r1
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800775a:	7dfb      	ldrb	r3, [r7, #23]
 800775c:	1c5a      	adds	r2, r3, #1
 800775e:	75fa      	strb	r2, [r7, #23]
 8007760:	461a      	mov	r2, r3
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	4413      	add	r3, r2
 8007766:	2200      	movs	r2, #0
 8007768:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1e8      	bne.n	8007744 <USBD_GetString+0x4e>
    }
  }
}
 8007772:	bf00      	nop
 8007774:	3718      	adds	r7, #24
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800777a:	b480      	push	{r7}
 800777c:	b085      	sub	sp, #20
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007782:	2300      	movs	r3, #0
 8007784:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007786:	e005      	b.n	8007794 <USBD_GetLen+0x1a>
  {
    len++;
 8007788:	7bfb      	ldrb	r3, [r7, #15]
 800778a:	3301      	adds	r3, #1
 800778c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	3301      	adds	r3, #1
 8007792:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1f5      	bne.n	8007788 <USBD_GetLen+0xe>
  }

  return len;
 800779c:	7bfb      	ldrb	r3, [r7, #15]
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3714      	adds	r7, #20
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bc80      	pop	{r7}
 80077a6:	4770      	bx	lr

080077a8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	4613      	mov	r3, r2
 80077b4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2202      	movs	r2, #2
 80077ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80077be:	88fa      	ldrh	r2, [r7, #6]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80077c4:	88fa      	ldrh	r2, [r7, #6]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077ca:	88fb      	ldrh	r3, [r7, #6]
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	2100      	movs	r1, #0
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f000 fc63 	bl	800809c <USBD_LL_Transmit>

  return USBD_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	4613      	mov	r3, r2
 80077ec:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077ee:	88fb      	ldrh	r3, [r7, #6]
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	2100      	movs	r1, #0
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f000 fc51 	bl	800809c <USBD_LL_Transmit>

  return USBD_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3710      	adds	r7, #16
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	4613      	mov	r3, r2
 8007810:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2203      	movs	r2, #3
 8007816:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800781a:	88fa      	ldrh	r2, [r7, #6]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007822:	88fa      	ldrh	r2, [r7, #6]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800782a:	88fb      	ldrh	r3, [r7, #6]
 800782c:	68ba      	ldr	r2, [r7, #8]
 800782e:	2100      	movs	r1, #0
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f000 fc56 	bl	80080e2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	4613      	mov	r3, r2
 800784c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800784e:	88fb      	ldrh	r3, [r7, #6]
 8007850:	68ba      	ldr	r2, [r7, #8]
 8007852:	2100      	movs	r1, #0
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f000 fc44 	bl	80080e2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	3710      	adds	r7, #16
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2204      	movs	r2, #4
 8007870:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007874:	2300      	movs	r3, #0
 8007876:	2200      	movs	r2, #0
 8007878:	2100      	movs	r1, #0
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fc0e 	bl	800809c <USBD_LL_Transmit>

  return USBD_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b082      	sub	sp, #8
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2205      	movs	r2, #5
 8007896:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800789a:	2300      	movs	r3, #0
 800789c:	2200      	movs	r2, #0
 800789e:	2100      	movs	r1, #0
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fc1e 	bl	80080e2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3708      	adds	r7, #8
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80078b4:	2200      	movs	r2, #0
 80078b6:	4912      	ldr	r1, [pc, #72]	@ (8007900 <MX_USB_DEVICE_Init+0x50>)
 80078b8:	4812      	ldr	r0, [pc, #72]	@ (8007904 <MX_USB_DEVICE_Init+0x54>)
 80078ba:	f7fe ff62 	bl	8006782 <USBD_Init>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d001      	beq.n	80078c8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80078c4:	f7f8 fd88 	bl	80003d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80078c8:	490f      	ldr	r1, [pc, #60]	@ (8007908 <MX_USB_DEVICE_Init+0x58>)
 80078ca:	480e      	ldr	r0, [pc, #56]	@ (8007904 <MX_USB_DEVICE_Init+0x54>)
 80078cc:	f7fe ff84 	bl	80067d8 <USBD_RegisterClass>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d001      	beq.n	80078da <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80078d6:	f7f8 fd7f 	bl	80003d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80078da:	490c      	ldr	r1, [pc, #48]	@ (800790c <MX_USB_DEVICE_Init+0x5c>)
 80078dc:	4809      	ldr	r0, [pc, #36]	@ (8007904 <MX_USB_DEVICE_Init+0x54>)
 80078de:	f7fe feb5 	bl	800664c <USBD_CDC_RegisterInterface>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d001      	beq.n	80078ec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80078e8:	f7f8 fd76 	bl	80003d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80078ec:	4805      	ldr	r0, [pc, #20]	@ (8007904 <MX_USB_DEVICE_Init+0x54>)
 80078ee:	f7fe ff8c 	bl	800680a <USBD_Start>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d001      	beq.n	80078fc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80078f8:	f7f8 fd6e 	bl	80003d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80078fc:	bf00      	nop
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	2000012c 	.word	0x2000012c
 8007904:	20000260 	.word	0x20000260
 8007908:	20000018 	.word	0x20000018
 800790c:	2000011c 	.word	0x2000011c

08007910 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007914:	2200      	movs	r2, #0
 8007916:	4905      	ldr	r1, [pc, #20]	@ (800792c <CDC_Init_FS+0x1c>)
 8007918:	4805      	ldr	r0, [pc, #20]	@ (8007930 <CDC_Init_FS+0x20>)
 800791a:	f7fe fead 	bl	8006678 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800791e:	4905      	ldr	r1, [pc, #20]	@ (8007934 <CDC_Init_FS+0x24>)
 8007920:	4803      	ldr	r0, [pc, #12]	@ (8007930 <CDC_Init_FS+0x20>)
 8007922:	f7fe fec2 	bl	80066aa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007926:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007928:	4618      	mov	r0, r3
 800792a:	bd80      	pop	{r7, pc}
 800792c:	20000924 	.word	0x20000924
 8007930:	20000260 	.word	0x20000260
 8007934:	20000524 	.word	0x20000524

08007938 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007938:	b480      	push	{r7}
 800793a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800793c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800793e:	4618      	mov	r0, r3
 8007940:	46bd      	mov	sp, r7
 8007942:	bc80      	pop	{r7}
 8007944:	4770      	bx	lr
	...

08007948 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	4603      	mov	r3, r0
 8007950:	6039      	str	r1, [r7, #0]
 8007952:	71fb      	strb	r3, [r7, #7]
 8007954:	4613      	mov	r3, r2
 8007956:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007958:	79fb      	ldrb	r3, [r7, #7]
 800795a:	2b23      	cmp	r3, #35	@ 0x23
 800795c:	d84a      	bhi.n	80079f4 <CDC_Control_FS+0xac>
 800795e:	a201      	add	r2, pc, #4	@ (adr r2, 8007964 <CDC_Control_FS+0x1c>)
 8007960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007964:	080079f5 	.word	0x080079f5
 8007968:	080079f5 	.word	0x080079f5
 800796c:	080079f5 	.word	0x080079f5
 8007970:	080079f5 	.word	0x080079f5
 8007974:	080079f5 	.word	0x080079f5
 8007978:	080079f5 	.word	0x080079f5
 800797c:	080079f5 	.word	0x080079f5
 8007980:	080079f5 	.word	0x080079f5
 8007984:	080079f5 	.word	0x080079f5
 8007988:	080079f5 	.word	0x080079f5
 800798c:	080079f5 	.word	0x080079f5
 8007990:	080079f5 	.word	0x080079f5
 8007994:	080079f5 	.word	0x080079f5
 8007998:	080079f5 	.word	0x080079f5
 800799c:	080079f5 	.word	0x080079f5
 80079a0:	080079f5 	.word	0x080079f5
 80079a4:	080079f5 	.word	0x080079f5
 80079a8:	080079f5 	.word	0x080079f5
 80079ac:	080079f5 	.word	0x080079f5
 80079b0:	080079f5 	.word	0x080079f5
 80079b4:	080079f5 	.word	0x080079f5
 80079b8:	080079f5 	.word	0x080079f5
 80079bc:	080079f5 	.word	0x080079f5
 80079c0:	080079f5 	.word	0x080079f5
 80079c4:	080079f5 	.word	0x080079f5
 80079c8:	080079f5 	.word	0x080079f5
 80079cc:	080079f5 	.word	0x080079f5
 80079d0:	080079f5 	.word	0x080079f5
 80079d4:	080079f5 	.word	0x080079f5
 80079d8:	080079f5 	.word	0x080079f5
 80079dc:	080079f5 	.word	0x080079f5
 80079e0:	080079f5 	.word	0x080079f5
 80079e4:	080079f5 	.word	0x080079f5
 80079e8:	080079f5 	.word	0x080079f5
 80079ec:	080079f5 	.word	0x080079f5
 80079f0:	080079f5 	.word	0x080079f5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80079f4:	bf00      	nop
  }

  return (USBD_OK);
 80079f6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bc80      	pop	{r7}
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop

08007a04 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007a0e:	6879      	ldr	r1, [r7, #4]
 8007a10:	4805      	ldr	r0, [pc, #20]	@ (8007a28 <CDC_Receive_FS+0x24>)
 8007a12:	f7fe fe4a 	bl	80066aa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007a16:	4804      	ldr	r0, [pc, #16]	@ (8007a28 <CDC_Receive_FS+0x24>)
 8007a18:	f7fe fe89 	bl	800672e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007a1c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3708      	adds	r7, #8
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	20000260 	.word	0x20000260

08007a2c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	460b      	mov	r3, r1
 8007a36:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8007a74 <CDC_Transmit_FS+0x48>)
 8007a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a42:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d001      	beq.n	8007a52 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e00b      	b.n	8007a6a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007a52:	887b      	ldrh	r3, [r7, #2]
 8007a54:	461a      	mov	r2, r3
 8007a56:	6879      	ldr	r1, [r7, #4]
 8007a58:	4806      	ldr	r0, [pc, #24]	@ (8007a74 <CDC_Transmit_FS+0x48>)
 8007a5a:	f7fe fe0d 	bl	8006678 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007a5e:	4805      	ldr	r0, [pc, #20]	@ (8007a74 <CDC_Transmit_FS+0x48>)
 8007a60:	f7fe fe36 	bl	80066d0 <USBD_CDC_TransmitPacket>
 8007a64:	4603      	mov	r3, r0
 8007a66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	20000260 	.word	0x20000260

08007a78 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	4603      	mov	r3, r0
 8007a80:	6039      	str	r1, [r7, #0]
 8007a82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	2212      	movs	r2, #18
 8007a88:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007a8a:	4b03      	ldr	r3, [pc, #12]	@ (8007a98 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bc80      	pop	{r7}
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop
 8007a98:	20000148 	.word	0x20000148

08007a9c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	6039      	str	r1, [r7, #0]
 8007aa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	2204      	movs	r2, #4
 8007aac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007aae:	4b03      	ldr	r3, [pc, #12]	@ (8007abc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bc80      	pop	{r7}
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	2000015c 	.word	0x2000015c

08007ac0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	6039      	str	r1, [r7, #0]
 8007aca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007acc:	79fb      	ldrb	r3, [r7, #7]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d105      	bne.n	8007ade <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ad2:	683a      	ldr	r2, [r7, #0]
 8007ad4:	4907      	ldr	r1, [pc, #28]	@ (8007af4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ad6:	4808      	ldr	r0, [pc, #32]	@ (8007af8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ad8:	f7ff fe0d 	bl	80076f6 <USBD_GetString>
 8007adc:	e004      	b.n	8007ae8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ade:	683a      	ldr	r2, [r7, #0]
 8007ae0:	4904      	ldr	r1, [pc, #16]	@ (8007af4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ae2:	4805      	ldr	r0, [pc, #20]	@ (8007af8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ae4:	f7ff fe07 	bl	80076f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ae8:	4b02      	ldr	r3, [pc, #8]	@ (8007af4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3708      	adds	r7, #8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	20000d24 	.word	0x20000d24
 8007af8:	08008b9c 	.word	0x08008b9c

08007afc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	4603      	mov	r3, r0
 8007b04:	6039      	str	r1, [r7, #0]
 8007b06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007b08:	683a      	ldr	r2, [r7, #0]
 8007b0a:	4904      	ldr	r1, [pc, #16]	@ (8007b1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007b0c:	4804      	ldr	r0, [pc, #16]	@ (8007b20 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007b0e:	f7ff fdf2 	bl	80076f6 <USBD_GetString>
  return USBD_StrDesc;
 8007b12:	4b02      	ldr	r3, [pc, #8]	@ (8007b1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	20000d24 	.word	0x20000d24
 8007b20:	08008bb4 	.word	0x08008bb4

08007b24 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	6039      	str	r1, [r7, #0]
 8007b2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	221a      	movs	r2, #26
 8007b34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007b36:	f000 f843 	bl	8007bc0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007b3a:	4b02      	ldr	r3, [pc, #8]	@ (8007b44 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	20000160 	.word	0x20000160

08007b48 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	4603      	mov	r3, r0
 8007b50:	6039      	str	r1, [r7, #0]
 8007b52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007b54:	79fb      	ldrb	r3, [r7, #7]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d105      	bne.n	8007b66 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b5a:	683a      	ldr	r2, [r7, #0]
 8007b5c:	4907      	ldr	r1, [pc, #28]	@ (8007b7c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b5e:	4808      	ldr	r0, [pc, #32]	@ (8007b80 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b60:	f7ff fdc9 	bl	80076f6 <USBD_GetString>
 8007b64:	e004      	b.n	8007b70 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b66:	683a      	ldr	r2, [r7, #0]
 8007b68:	4904      	ldr	r1, [pc, #16]	@ (8007b7c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b6a:	4805      	ldr	r0, [pc, #20]	@ (8007b80 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b6c:	f7ff fdc3 	bl	80076f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b70:	4b02      	ldr	r3, [pc, #8]	@ (8007b7c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3708      	adds	r7, #8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	20000d24 	.word	0x20000d24
 8007b80:	08008bc8 	.word	0x08008bc8

08007b84 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	6039      	str	r1, [r7, #0]
 8007b8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b90:	79fb      	ldrb	r3, [r7, #7]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d105      	bne.n	8007ba2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b96:	683a      	ldr	r2, [r7, #0]
 8007b98:	4907      	ldr	r1, [pc, #28]	@ (8007bb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b9a:	4808      	ldr	r0, [pc, #32]	@ (8007bbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b9c:	f7ff fdab 	bl	80076f6 <USBD_GetString>
 8007ba0:	e004      	b.n	8007bac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007ba2:	683a      	ldr	r2, [r7, #0]
 8007ba4:	4904      	ldr	r1, [pc, #16]	@ (8007bb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007ba6:	4805      	ldr	r0, [pc, #20]	@ (8007bbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007ba8:	f7ff fda5 	bl	80076f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bac:	4b02      	ldr	r3, [pc, #8]	@ (8007bb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3708      	adds	r7, #8
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	20000d24 	.word	0x20000d24
 8007bbc:	08008bd4 	.word	0x08008bd4

08007bc0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8007c04 <Get_SerialNum+0x44>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007bcc:	4b0e      	ldr	r3, [pc, #56]	@ (8007c08 <Get_SerialNum+0x48>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8007c0c <Get_SerialNum+0x4c>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4413      	add	r3, r2
 8007bde:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d009      	beq.n	8007bfa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007be6:	2208      	movs	r2, #8
 8007be8:	4909      	ldr	r1, [pc, #36]	@ (8007c10 <Get_SerialNum+0x50>)
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f000 f814 	bl	8007c18 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007bf0:	2204      	movs	r2, #4
 8007bf2:	4908      	ldr	r1, [pc, #32]	@ (8007c14 <Get_SerialNum+0x54>)
 8007bf4:	68b8      	ldr	r0, [r7, #8]
 8007bf6:	f000 f80f 	bl	8007c18 <IntToUnicode>
  }
}
 8007bfa:	bf00      	nop
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	1ffff7e8 	.word	0x1ffff7e8
 8007c08:	1ffff7ec 	.word	0x1ffff7ec
 8007c0c:	1ffff7f0 	.word	0x1ffff7f0
 8007c10:	20000162 	.word	0x20000162
 8007c14:	20000172 	.word	0x20000172

08007c18 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b087      	sub	sp, #28
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	4613      	mov	r3, r2
 8007c24:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c26:	2300      	movs	r3, #0
 8007c28:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	75fb      	strb	r3, [r7, #23]
 8007c2e:	e027      	b.n	8007c80 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	0f1b      	lsrs	r3, r3, #28
 8007c34:	2b09      	cmp	r3, #9
 8007c36:	d80b      	bhi.n	8007c50 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	0f1b      	lsrs	r3, r3, #28
 8007c3c:	b2da      	uxtb	r2, r3
 8007c3e:	7dfb      	ldrb	r3, [r7, #23]
 8007c40:	005b      	lsls	r3, r3, #1
 8007c42:	4619      	mov	r1, r3
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	440b      	add	r3, r1
 8007c48:	3230      	adds	r2, #48	@ 0x30
 8007c4a:	b2d2      	uxtb	r2, r2
 8007c4c:	701a      	strb	r2, [r3, #0]
 8007c4e:	e00a      	b.n	8007c66 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	0f1b      	lsrs	r3, r3, #28
 8007c54:	b2da      	uxtb	r2, r3
 8007c56:	7dfb      	ldrb	r3, [r7, #23]
 8007c58:	005b      	lsls	r3, r3, #1
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	440b      	add	r3, r1
 8007c60:	3237      	adds	r2, #55	@ 0x37
 8007c62:	b2d2      	uxtb	r2, r2
 8007c64:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	011b      	lsls	r3, r3, #4
 8007c6a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007c6c:	7dfb      	ldrb	r3, [r7, #23]
 8007c6e:	005b      	lsls	r3, r3, #1
 8007c70:	3301      	adds	r3, #1
 8007c72:	68ba      	ldr	r2, [r7, #8]
 8007c74:	4413      	add	r3, r2
 8007c76:	2200      	movs	r2, #0
 8007c78:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007c7a:	7dfb      	ldrb	r3, [r7, #23]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	75fb      	strb	r3, [r7, #23]
 8007c80:	7dfa      	ldrb	r2, [r7, #23]
 8007c82:	79fb      	ldrb	r3, [r7, #7]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d3d3      	bcc.n	8007c30 <IntToUnicode+0x18>
  }
}
 8007c88:	bf00      	nop
 8007c8a:	bf00      	nop
 8007c8c:	371c      	adds	r7, #28
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bc80      	pop	{r7}
 8007c92:	4770      	bx	lr

08007c94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8007cd8 <HAL_PCD_MspInit+0x44>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d113      	bne.n	8007cce <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8007cdc <HAL_PCD_MspInit+0x48>)
 8007ca8:	69db      	ldr	r3, [r3, #28]
 8007caa:	4a0c      	ldr	r2, [pc, #48]	@ (8007cdc <HAL_PCD_MspInit+0x48>)
 8007cac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007cb0:	61d3      	str	r3, [r2, #28]
 8007cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8007cdc <HAL_PCD_MspInit+0x48>)
 8007cb4:	69db      	ldr	r3, [r3, #28]
 8007cb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007cba:	60fb      	str	r3, [r7, #12]
 8007cbc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	2014      	movs	r0, #20
 8007cc4:	f7f9 f843 	bl	8000d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007cc8:	2014      	movs	r0, #20
 8007cca:	f7f9 f85c 	bl	8000d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007cce:	bf00      	nop
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	40005c00 	.word	0x40005c00
 8007cdc:	40021000 	.word	0x40021000

08007ce0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	4610      	mov	r0, r2
 8007cf8:	f7fe fdcf 	bl	800689a <USBD_LL_SetupStage>
}
 8007cfc:	bf00      	nop
 8007cfe:	3708      	adds	r7, #8
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007d16:	78fa      	ldrb	r2, [r7, #3]
 8007d18:	6879      	ldr	r1, [r7, #4]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	4413      	add	r3, r2
 8007d20:	00db      	lsls	r3, r3, #3
 8007d22:	440b      	add	r3, r1
 8007d24:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	78fb      	ldrb	r3, [r7, #3]
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	f7fe fe01 	bl	8006934 <USBD_LL_DataOutStage>
}
 8007d32:	bf00      	nop
 8007d34:	3708      	adds	r7, #8
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b082      	sub	sp, #8
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
 8007d42:	460b      	mov	r3, r1
 8007d44:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007d4c:	78fa      	ldrb	r2, [r7, #3]
 8007d4e:	6879      	ldr	r1, [r7, #4]
 8007d50:	4613      	mov	r3, r2
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	4413      	add	r3, r2
 8007d56:	00db      	lsls	r3, r3, #3
 8007d58:	440b      	add	r3, r1
 8007d5a:	3324      	adds	r3, #36	@ 0x24
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	78fb      	ldrb	r3, [r7, #3]
 8007d60:	4619      	mov	r1, r3
 8007d62:	f7fe fe58 	bl	8006a16 <USBD_LL_DataInStage>
}
 8007d66:	bf00      	nop
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b082      	sub	sp, #8
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7fe ff68 	bl	8006c52 <USBD_LL_SOF>
}
 8007d82:	bf00      	nop
 8007d84:	3708      	adds	r7, #8
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b084      	sub	sp, #16
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007d92:	2301      	movs	r3, #1
 8007d94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	799b      	ldrb	r3, [r3, #6]
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	d001      	beq.n	8007da2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007d9e:	f7f8 fb1b 	bl	80003d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007da8:	7bfa      	ldrb	r2, [r7, #15]
 8007daa:	4611      	mov	r1, r2
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7fe ff18 	bl	8006be2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7fe fed1 	bl	8006b60 <USBD_LL_Reset>
}
 8007dbe:	bf00      	nop
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
	...

08007dc8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7fe ff12 	bl	8006c00 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	7a9b      	ldrb	r3, [r3, #10]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d005      	beq.n	8007df0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007de4:	4b04      	ldr	r3, [pc, #16]	@ (8007df8 <HAL_PCD_SuspendCallback+0x30>)
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	4a03      	ldr	r2, [pc, #12]	@ (8007df8 <HAL_PCD_SuspendCallback+0x30>)
 8007dea:	f043 0306 	orr.w	r3, r3, #6
 8007dee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007df0:	bf00      	nop
 8007df2:	3708      	adds	r7, #8
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	e000ed00 	.word	0xe000ed00

08007dfc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7fe ff0c 	bl	8006c28 <USBD_LL_Resume>
}
 8007e10:	bf00      	nop
 8007e12:	3708      	adds	r7, #8
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007e20:	4a28      	ldr	r2, [pc, #160]	@ (8007ec4 <USBD_LL_Init+0xac>)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a26      	ldr	r2, [pc, #152]	@ (8007ec4 <USBD_LL_Init+0xac>)
 8007e2c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007e30:	4b24      	ldr	r3, [pc, #144]	@ (8007ec4 <USBD_LL_Init+0xac>)
 8007e32:	4a25      	ldr	r2, [pc, #148]	@ (8007ec8 <USBD_LL_Init+0xb0>)
 8007e34:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007e36:	4b23      	ldr	r3, [pc, #140]	@ (8007ec4 <USBD_LL_Init+0xac>)
 8007e38:	2208      	movs	r2, #8
 8007e3a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007e3c:	4b21      	ldr	r3, [pc, #132]	@ (8007ec4 <USBD_LL_Init+0xac>)
 8007e3e:	2202      	movs	r2, #2
 8007e40:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007e42:	4b20      	ldr	r3, [pc, #128]	@ (8007ec4 <USBD_LL_Init+0xac>)
 8007e44:	2200      	movs	r2, #0
 8007e46:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007e48:	4b1e      	ldr	r3, [pc, #120]	@ (8007ec4 <USBD_LL_Init+0xac>)
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8007ec4 <USBD_LL_Init+0xac>)
 8007e50:	2200      	movs	r2, #0
 8007e52:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007e54:	481b      	ldr	r0, [pc, #108]	@ (8007ec4 <USBD_LL_Init+0xac>)
 8007e56:	f7f9 f94d 	bl	80010f4 <HAL_PCD_Init>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d001      	beq.n	8007e64 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007e60:	f7f8 faba 	bl	80003d8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007e6a:	2318      	movs	r3, #24
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	2100      	movs	r1, #0
 8007e70:	f7fa fe5e 	bl	8002b30 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007e7a:	2358      	movs	r3, #88	@ 0x58
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	2180      	movs	r1, #128	@ 0x80
 8007e80:	f7fa fe56 	bl	8002b30 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007e8a:	23c0      	movs	r3, #192	@ 0xc0
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	2181      	movs	r1, #129	@ 0x81
 8007e90:	f7fa fe4e 	bl	8002b30 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007e9a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	2101      	movs	r1, #1
 8007ea2:	f7fa fe45 	bl	8002b30 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007eac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	2182      	movs	r1, #130	@ 0x82
 8007eb4:	f7fa fe3c 	bl	8002b30 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3708      	adds	r7, #8
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	20000f24 	.word	0x20000f24
 8007ec8:	40005c00 	.word	0x40005c00

08007ecc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7f9 f9fc 	bl	80012e0 <HAL_PCD_Start>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007eec:	7bfb      	ldrb	r3, [r7, #15]
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f000 f94e 	bl	8008190 <USBD_Get_USB_Status>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ef8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3710      	adds	r7, #16
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b084      	sub	sp, #16
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
 8007f0a:	4608      	mov	r0, r1
 8007f0c:	4611      	mov	r1, r2
 8007f0e:	461a      	mov	r2, r3
 8007f10:	4603      	mov	r3, r0
 8007f12:	70fb      	strb	r3, [r7, #3]
 8007f14:	460b      	mov	r3, r1
 8007f16:	70bb      	strb	r3, [r7, #2]
 8007f18:	4613      	mov	r3, r2
 8007f1a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f20:	2300      	movs	r3, #0
 8007f22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007f2a:	78bb      	ldrb	r3, [r7, #2]
 8007f2c:	883a      	ldrh	r2, [r7, #0]
 8007f2e:	78f9      	ldrb	r1, [r7, #3]
 8007f30:	f7f9 fb50 	bl	80015d4 <HAL_PCD_EP_Open>
 8007f34:	4603      	mov	r3, r0
 8007f36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f38:	7bfb      	ldrb	r3, [r7, #15]
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f000 f928 	bl	8008190 <USBD_Get_USB_Status>
 8007f40:	4603      	mov	r3, r0
 8007f42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f44:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b084      	sub	sp, #16
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	460b      	mov	r3, r1
 8007f58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007f68:	78fa      	ldrb	r2, [r7, #3]
 8007f6a:	4611      	mov	r1, r2
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f7f9 fb8e 	bl	800168e <HAL_PCD_EP_Close>
 8007f72:	4603      	mov	r3, r0
 8007f74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f76:	7bfb      	ldrb	r3, [r7, #15]
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f000 f909 	bl	8008190 <USBD_Get_USB_Status>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f82:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	460b      	mov	r3, r1
 8007f96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007fa6:	78fa      	ldrb	r2, [r7, #3]
 8007fa8:	4611      	mov	r1, r2
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7f9 fc36 	bl	800181c <HAL_PCD_EP_SetStall>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fb4:	7bfb      	ldrb	r3, [r7, #15]
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f000 f8ea 	bl	8008190 <USBD_Get_USB_Status>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b084      	sub	sp, #16
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007fe4:	78fa      	ldrb	r2, [r7, #3]
 8007fe6:	4611      	mov	r1, r2
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7f9 fc77 	bl	80018dc <HAL_PCD_EP_ClrStall>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ff2:	7bfb      	ldrb	r3, [r7, #15]
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f000 f8cb 	bl	8008190 <USBD_Get_USB_Status>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ffe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008000:	4618      	mov	r0, r3
 8008002:	3710      	adds	r7, #16
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	460b      	mov	r3, r1
 8008012:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800801a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800801c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008020:	2b00      	cmp	r3, #0
 8008022:	da0b      	bge.n	800803c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008024:	78fb      	ldrb	r3, [r7, #3]
 8008026:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800802a:	68f9      	ldr	r1, [r7, #12]
 800802c:	4613      	mov	r3, r2
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	4413      	add	r3, r2
 8008032:	00db      	lsls	r3, r3, #3
 8008034:	440b      	add	r3, r1
 8008036:	3312      	adds	r3, #18
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	e00b      	b.n	8008054 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800803c:	78fb      	ldrb	r3, [r7, #3]
 800803e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008042:	68f9      	ldr	r1, [r7, #12]
 8008044:	4613      	mov	r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4413      	add	r3, r2
 800804a:	00db      	lsls	r3, r3, #3
 800804c:	440b      	add	r3, r1
 800804e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008052:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008054:	4618      	mov	r0, r3
 8008056:	3714      	adds	r7, #20
 8008058:	46bd      	mov	sp, r7
 800805a:	bc80      	pop	{r7}
 800805c:	4770      	bx	lr

0800805e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b084      	sub	sp, #16
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	460b      	mov	r3, r1
 8008068:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800806a:	2300      	movs	r3, #0
 800806c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800806e:	2300      	movs	r3, #0
 8008070:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008078:	78fa      	ldrb	r2, [r7, #3]
 800807a:	4611      	mov	r1, r2
 800807c:	4618      	mov	r0, r3
 800807e:	f7f9 fa85 	bl	800158c <HAL_PCD_SetAddress>
 8008082:	4603      	mov	r3, r0
 8008084:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008086:	7bfb      	ldrb	r3, [r7, #15]
 8008088:	4618      	mov	r0, r3
 800808a:	f000 f881 	bl	8008190 <USBD_Get_USB_Status>
 800808e:	4603      	mov	r3, r0
 8008090:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008092:	7bbb      	ldrb	r3, [r7, #14]
}
 8008094:	4618      	mov	r0, r3
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	607a      	str	r2, [r7, #4]
 80080a6:	461a      	mov	r2, r3
 80080a8:	460b      	mov	r3, r1
 80080aa:	72fb      	strb	r3, [r7, #11]
 80080ac:	4613      	mov	r3, r2
 80080ae:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080b0:	2300      	movs	r3, #0
 80080b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080b4:	2300      	movs	r3, #0
 80080b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80080be:	893b      	ldrh	r3, [r7, #8]
 80080c0:	7af9      	ldrb	r1, [r7, #11]
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	f7f9 fb73 	bl	80017ae <HAL_PCD_EP_Transmit>
 80080c8:	4603      	mov	r3, r0
 80080ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080cc:	7dfb      	ldrb	r3, [r7, #23]
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 f85e 	bl	8008190 <USBD_Get_USB_Status>
 80080d4:	4603      	mov	r3, r0
 80080d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80080d8:	7dbb      	ldrb	r3, [r7, #22]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3718      	adds	r7, #24
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b086      	sub	sp, #24
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	60f8      	str	r0, [r7, #12]
 80080ea:	607a      	str	r2, [r7, #4]
 80080ec:	461a      	mov	r2, r3
 80080ee:	460b      	mov	r3, r1
 80080f0:	72fb      	strb	r3, [r7, #11]
 80080f2:	4613      	mov	r3, r2
 80080f4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080f6:	2300      	movs	r3, #0
 80080f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008104:	893b      	ldrh	r3, [r7, #8]
 8008106:	7af9      	ldrb	r1, [r7, #11]
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	f7f9 fb08 	bl	800171e <HAL_PCD_EP_Receive>
 800810e:	4603      	mov	r3, r0
 8008110:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008112:	7dfb      	ldrb	r3, [r7, #23]
 8008114:	4618      	mov	r0, r3
 8008116:	f000 f83b 	bl	8008190 <USBD_Get_USB_Status>
 800811a:	4603      	mov	r3, r0
 800811c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800811e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008120:	4618      	mov	r0, r3
 8008122:	3718      	adds	r7, #24
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	460b      	mov	r3, r1
 8008132:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800813a:	78fa      	ldrb	r2, [r7, #3]
 800813c:	4611      	mov	r1, r2
 800813e:	4618      	mov	r0, r3
 8008140:	f7f9 fb1e 	bl	8001780 <HAL_PCD_EP_GetRxCount>
 8008144:	4603      	mov	r3, r0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
	...

08008150 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008158:	4b02      	ldr	r3, [pc, #8]	@ (8008164 <USBD_static_malloc+0x14>)
}
 800815a:	4618      	mov	r0, r3
 800815c:	370c      	adds	r7, #12
 800815e:	46bd      	mov	sp, r7
 8008160:	bc80      	pop	{r7}
 8008162:	4770      	bx	lr
 8008164:	200011fc 	.word	0x200011fc

08008168 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]

}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	bc80      	pop	{r7}
 8008178:	4770      	bx	lr

0800817a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800817a:	b480      	push	{r7}
 800817c:	b083      	sub	sp, #12
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
 8008182:	460b      	mov	r3, r1
 8008184:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008186:	bf00      	nop
 8008188:	370c      	adds	r7, #12
 800818a:	46bd      	mov	sp, r7
 800818c:	bc80      	pop	{r7}
 800818e:	4770      	bx	lr

08008190 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	4603      	mov	r3, r0
 8008198:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800819a:	2300      	movs	r3, #0
 800819c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800819e:	79fb      	ldrb	r3, [r7, #7]
 80081a0:	2b03      	cmp	r3, #3
 80081a2:	d817      	bhi.n	80081d4 <USBD_Get_USB_Status+0x44>
 80081a4:	a201      	add	r2, pc, #4	@ (adr r2, 80081ac <USBD_Get_USB_Status+0x1c>)
 80081a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081aa:	bf00      	nop
 80081ac:	080081bd 	.word	0x080081bd
 80081b0:	080081c3 	.word	0x080081c3
 80081b4:	080081c9 	.word	0x080081c9
 80081b8:	080081cf 	.word	0x080081cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80081bc:	2300      	movs	r3, #0
 80081be:	73fb      	strb	r3, [r7, #15]
    break;
 80081c0:	e00b      	b.n	80081da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80081c2:	2302      	movs	r3, #2
 80081c4:	73fb      	strb	r3, [r7, #15]
    break;
 80081c6:	e008      	b.n	80081da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80081c8:	2301      	movs	r3, #1
 80081ca:	73fb      	strb	r3, [r7, #15]
    break;
 80081cc:	e005      	b.n	80081da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80081ce:	2302      	movs	r3, #2
 80081d0:	73fb      	strb	r3, [r7, #15]
    break;
 80081d2:	e002      	b.n	80081da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80081d4:	2302      	movs	r3, #2
 80081d6:	73fb      	strb	r3, [r7, #15]
    break;
 80081d8:	bf00      	nop
  }
  return usb_status;
 80081da:	7bfb      	ldrb	r3, [r7, #15]
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3714      	adds	r7, #20
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bc80      	pop	{r7}
 80081e4:	4770      	bx	lr
 80081e6:	bf00      	nop

080081e8 <sniprintf>:
 80081e8:	b40c      	push	{r2, r3}
 80081ea:	b530      	push	{r4, r5, lr}
 80081ec:	4b18      	ldr	r3, [pc, #96]	@ (8008250 <sniprintf+0x68>)
 80081ee:	1e0c      	subs	r4, r1, #0
 80081f0:	681d      	ldr	r5, [r3, #0]
 80081f2:	b09d      	sub	sp, #116	@ 0x74
 80081f4:	da08      	bge.n	8008208 <sniprintf+0x20>
 80081f6:	238b      	movs	r3, #139	@ 0x8b
 80081f8:	f04f 30ff 	mov.w	r0, #4294967295
 80081fc:	602b      	str	r3, [r5, #0]
 80081fe:	b01d      	add	sp, #116	@ 0x74
 8008200:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008204:	b002      	add	sp, #8
 8008206:	4770      	bx	lr
 8008208:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800820c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008210:	f04f 0300 	mov.w	r3, #0
 8008214:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008216:	bf0c      	ite	eq
 8008218:	4623      	moveq	r3, r4
 800821a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800821e:	9304      	str	r3, [sp, #16]
 8008220:	9307      	str	r3, [sp, #28]
 8008222:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008226:	9002      	str	r0, [sp, #8]
 8008228:	9006      	str	r0, [sp, #24]
 800822a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800822e:	4628      	mov	r0, r5
 8008230:	ab21      	add	r3, sp, #132	@ 0x84
 8008232:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008234:	a902      	add	r1, sp, #8
 8008236:	9301      	str	r3, [sp, #4]
 8008238:	f000 f992 	bl	8008560 <_svfiprintf_r>
 800823c:	1c43      	adds	r3, r0, #1
 800823e:	bfbc      	itt	lt
 8008240:	238b      	movlt	r3, #139	@ 0x8b
 8008242:	602b      	strlt	r3, [r5, #0]
 8008244:	2c00      	cmp	r4, #0
 8008246:	d0da      	beq.n	80081fe <sniprintf+0x16>
 8008248:	2200      	movs	r2, #0
 800824a:	9b02      	ldr	r3, [sp, #8]
 800824c:	701a      	strb	r2, [r3, #0]
 800824e:	e7d6      	b.n	80081fe <sniprintf+0x16>
 8008250:	2000017c 	.word	0x2000017c

08008254 <memset>:
 8008254:	4603      	mov	r3, r0
 8008256:	4402      	add	r2, r0
 8008258:	4293      	cmp	r3, r2
 800825a:	d100      	bne.n	800825e <memset+0xa>
 800825c:	4770      	bx	lr
 800825e:	f803 1b01 	strb.w	r1, [r3], #1
 8008262:	e7f9      	b.n	8008258 <memset+0x4>

08008264 <__errno>:
 8008264:	4b01      	ldr	r3, [pc, #4]	@ (800826c <__errno+0x8>)
 8008266:	6818      	ldr	r0, [r3, #0]
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	2000017c 	.word	0x2000017c

08008270 <__libc_init_array>:
 8008270:	b570      	push	{r4, r5, r6, lr}
 8008272:	2600      	movs	r6, #0
 8008274:	4d0c      	ldr	r5, [pc, #48]	@ (80082a8 <__libc_init_array+0x38>)
 8008276:	4c0d      	ldr	r4, [pc, #52]	@ (80082ac <__libc_init_array+0x3c>)
 8008278:	1b64      	subs	r4, r4, r5
 800827a:	10a4      	asrs	r4, r4, #2
 800827c:	42a6      	cmp	r6, r4
 800827e:	d109      	bne.n	8008294 <__libc_init_array+0x24>
 8008280:	f000 fc76 	bl	8008b70 <_init>
 8008284:	2600      	movs	r6, #0
 8008286:	4d0a      	ldr	r5, [pc, #40]	@ (80082b0 <__libc_init_array+0x40>)
 8008288:	4c0a      	ldr	r4, [pc, #40]	@ (80082b4 <__libc_init_array+0x44>)
 800828a:	1b64      	subs	r4, r4, r5
 800828c:	10a4      	asrs	r4, r4, #2
 800828e:	42a6      	cmp	r6, r4
 8008290:	d105      	bne.n	800829e <__libc_init_array+0x2e>
 8008292:	bd70      	pop	{r4, r5, r6, pc}
 8008294:	f855 3b04 	ldr.w	r3, [r5], #4
 8008298:	4798      	blx	r3
 800829a:	3601      	adds	r6, #1
 800829c:	e7ee      	b.n	800827c <__libc_init_array+0xc>
 800829e:	f855 3b04 	ldr.w	r3, [r5], #4
 80082a2:	4798      	blx	r3
 80082a4:	3601      	adds	r6, #1
 80082a6:	e7f2      	b.n	800828e <__libc_init_array+0x1e>
 80082a8:	08008c44 	.word	0x08008c44
 80082ac:	08008c44 	.word	0x08008c44
 80082b0:	08008c44 	.word	0x08008c44
 80082b4:	08008c48 	.word	0x08008c48

080082b8 <__retarget_lock_acquire_recursive>:
 80082b8:	4770      	bx	lr

080082ba <__retarget_lock_release_recursive>:
 80082ba:	4770      	bx	lr

080082bc <_free_r>:
 80082bc:	b538      	push	{r3, r4, r5, lr}
 80082be:	4605      	mov	r5, r0
 80082c0:	2900      	cmp	r1, #0
 80082c2:	d040      	beq.n	8008346 <_free_r+0x8a>
 80082c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082c8:	1f0c      	subs	r4, r1, #4
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	bfb8      	it	lt
 80082ce:	18e4      	addlt	r4, r4, r3
 80082d0:	f000 f8de 	bl	8008490 <__malloc_lock>
 80082d4:	4a1c      	ldr	r2, [pc, #112]	@ (8008348 <_free_r+0x8c>)
 80082d6:	6813      	ldr	r3, [r2, #0]
 80082d8:	b933      	cbnz	r3, 80082e8 <_free_r+0x2c>
 80082da:	6063      	str	r3, [r4, #4]
 80082dc:	6014      	str	r4, [r2, #0]
 80082de:	4628      	mov	r0, r5
 80082e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082e4:	f000 b8da 	b.w	800849c <__malloc_unlock>
 80082e8:	42a3      	cmp	r3, r4
 80082ea:	d908      	bls.n	80082fe <_free_r+0x42>
 80082ec:	6820      	ldr	r0, [r4, #0]
 80082ee:	1821      	adds	r1, r4, r0
 80082f0:	428b      	cmp	r3, r1
 80082f2:	bf01      	itttt	eq
 80082f4:	6819      	ldreq	r1, [r3, #0]
 80082f6:	685b      	ldreq	r3, [r3, #4]
 80082f8:	1809      	addeq	r1, r1, r0
 80082fa:	6021      	streq	r1, [r4, #0]
 80082fc:	e7ed      	b.n	80082da <_free_r+0x1e>
 80082fe:	461a      	mov	r2, r3
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	b10b      	cbz	r3, 8008308 <_free_r+0x4c>
 8008304:	42a3      	cmp	r3, r4
 8008306:	d9fa      	bls.n	80082fe <_free_r+0x42>
 8008308:	6811      	ldr	r1, [r2, #0]
 800830a:	1850      	adds	r0, r2, r1
 800830c:	42a0      	cmp	r0, r4
 800830e:	d10b      	bne.n	8008328 <_free_r+0x6c>
 8008310:	6820      	ldr	r0, [r4, #0]
 8008312:	4401      	add	r1, r0
 8008314:	1850      	adds	r0, r2, r1
 8008316:	4283      	cmp	r3, r0
 8008318:	6011      	str	r1, [r2, #0]
 800831a:	d1e0      	bne.n	80082de <_free_r+0x22>
 800831c:	6818      	ldr	r0, [r3, #0]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	4408      	add	r0, r1
 8008322:	6010      	str	r0, [r2, #0]
 8008324:	6053      	str	r3, [r2, #4]
 8008326:	e7da      	b.n	80082de <_free_r+0x22>
 8008328:	d902      	bls.n	8008330 <_free_r+0x74>
 800832a:	230c      	movs	r3, #12
 800832c:	602b      	str	r3, [r5, #0]
 800832e:	e7d6      	b.n	80082de <_free_r+0x22>
 8008330:	6820      	ldr	r0, [r4, #0]
 8008332:	1821      	adds	r1, r4, r0
 8008334:	428b      	cmp	r3, r1
 8008336:	bf01      	itttt	eq
 8008338:	6819      	ldreq	r1, [r3, #0]
 800833a:	685b      	ldreq	r3, [r3, #4]
 800833c:	1809      	addeq	r1, r1, r0
 800833e:	6021      	streq	r1, [r4, #0]
 8008340:	6063      	str	r3, [r4, #4]
 8008342:	6054      	str	r4, [r2, #4]
 8008344:	e7cb      	b.n	80082de <_free_r+0x22>
 8008346:	bd38      	pop	{r3, r4, r5, pc}
 8008348:	20001560 	.word	0x20001560

0800834c <sbrk_aligned>:
 800834c:	b570      	push	{r4, r5, r6, lr}
 800834e:	4e0f      	ldr	r6, [pc, #60]	@ (800838c <sbrk_aligned+0x40>)
 8008350:	460c      	mov	r4, r1
 8008352:	6831      	ldr	r1, [r6, #0]
 8008354:	4605      	mov	r5, r0
 8008356:	b911      	cbnz	r1, 800835e <sbrk_aligned+0x12>
 8008358:	f000 fba8 	bl	8008aac <_sbrk_r>
 800835c:	6030      	str	r0, [r6, #0]
 800835e:	4621      	mov	r1, r4
 8008360:	4628      	mov	r0, r5
 8008362:	f000 fba3 	bl	8008aac <_sbrk_r>
 8008366:	1c43      	adds	r3, r0, #1
 8008368:	d103      	bne.n	8008372 <sbrk_aligned+0x26>
 800836a:	f04f 34ff 	mov.w	r4, #4294967295
 800836e:	4620      	mov	r0, r4
 8008370:	bd70      	pop	{r4, r5, r6, pc}
 8008372:	1cc4      	adds	r4, r0, #3
 8008374:	f024 0403 	bic.w	r4, r4, #3
 8008378:	42a0      	cmp	r0, r4
 800837a:	d0f8      	beq.n	800836e <sbrk_aligned+0x22>
 800837c:	1a21      	subs	r1, r4, r0
 800837e:	4628      	mov	r0, r5
 8008380:	f000 fb94 	bl	8008aac <_sbrk_r>
 8008384:	3001      	adds	r0, #1
 8008386:	d1f2      	bne.n	800836e <sbrk_aligned+0x22>
 8008388:	e7ef      	b.n	800836a <sbrk_aligned+0x1e>
 800838a:	bf00      	nop
 800838c:	2000155c 	.word	0x2000155c

08008390 <_malloc_r>:
 8008390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008394:	1ccd      	adds	r5, r1, #3
 8008396:	f025 0503 	bic.w	r5, r5, #3
 800839a:	3508      	adds	r5, #8
 800839c:	2d0c      	cmp	r5, #12
 800839e:	bf38      	it	cc
 80083a0:	250c      	movcc	r5, #12
 80083a2:	2d00      	cmp	r5, #0
 80083a4:	4606      	mov	r6, r0
 80083a6:	db01      	blt.n	80083ac <_malloc_r+0x1c>
 80083a8:	42a9      	cmp	r1, r5
 80083aa:	d904      	bls.n	80083b6 <_malloc_r+0x26>
 80083ac:	230c      	movs	r3, #12
 80083ae:	6033      	str	r3, [r6, #0]
 80083b0:	2000      	movs	r0, #0
 80083b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800848c <_malloc_r+0xfc>
 80083ba:	f000 f869 	bl	8008490 <__malloc_lock>
 80083be:	f8d8 3000 	ldr.w	r3, [r8]
 80083c2:	461c      	mov	r4, r3
 80083c4:	bb44      	cbnz	r4, 8008418 <_malloc_r+0x88>
 80083c6:	4629      	mov	r1, r5
 80083c8:	4630      	mov	r0, r6
 80083ca:	f7ff ffbf 	bl	800834c <sbrk_aligned>
 80083ce:	1c43      	adds	r3, r0, #1
 80083d0:	4604      	mov	r4, r0
 80083d2:	d158      	bne.n	8008486 <_malloc_r+0xf6>
 80083d4:	f8d8 4000 	ldr.w	r4, [r8]
 80083d8:	4627      	mov	r7, r4
 80083da:	2f00      	cmp	r7, #0
 80083dc:	d143      	bne.n	8008466 <_malloc_r+0xd6>
 80083de:	2c00      	cmp	r4, #0
 80083e0:	d04b      	beq.n	800847a <_malloc_r+0xea>
 80083e2:	6823      	ldr	r3, [r4, #0]
 80083e4:	4639      	mov	r1, r7
 80083e6:	4630      	mov	r0, r6
 80083e8:	eb04 0903 	add.w	r9, r4, r3
 80083ec:	f000 fb5e 	bl	8008aac <_sbrk_r>
 80083f0:	4581      	cmp	r9, r0
 80083f2:	d142      	bne.n	800847a <_malloc_r+0xea>
 80083f4:	6821      	ldr	r1, [r4, #0]
 80083f6:	4630      	mov	r0, r6
 80083f8:	1a6d      	subs	r5, r5, r1
 80083fa:	4629      	mov	r1, r5
 80083fc:	f7ff ffa6 	bl	800834c <sbrk_aligned>
 8008400:	3001      	adds	r0, #1
 8008402:	d03a      	beq.n	800847a <_malloc_r+0xea>
 8008404:	6823      	ldr	r3, [r4, #0]
 8008406:	442b      	add	r3, r5
 8008408:	6023      	str	r3, [r4, #0]
 800840a:	f8d8 3000 	ldr.w	r3, [r8]
 800840e:	685a      	ldr	r2, [r3, #4]
 8008410:	bb62      	cbnz	r2, 800846c <_malloc_r+0xdc>
 8008412:	f8c8 7000 	str.w	r7, [r8]
 8008416:	e00f      	b.n	8008438 <_malloc_r+0xa8>
 8008418:	6822      	ldr	r2, [r4, #0]
 800841a:	1b52      	subs	r2, r2, r5
 800841c:	d420      	bmi.n	8008460 <_malloc_r+0xd0>
 800841e:	2a0b      	cmp	r2, #11
 8008420:	d917      	bls.n	8008452 <_malloc_r+0xc2>
 8008422:	1961      	adds	r1, r4, r5
 8008424:	42a3      	cmp	r3, r4
 8008426:	6025      	str	r5, [r4, #0]
 8008428:	bf18      	it	ne
 800842a:	6059      	strne	r1, [r3, #4]
 800842c:	6863      	ldr	r3, [r4, #4]
 800842e:	bf08      	it	eq
 8008430:	f8c8 1000 	streq.w	r1, [r8]
 8008434:	5162      	str	r2, [r4, r5]
 8008436:	604b      	str	r3, [r1, #4]
 8008438:	4630      	mov	r0, r6
 800843a:	f000 f82f 	bl	800849c <__malloc_unlock>
 800843e:	f104 000b 	add.w	r0, r4, #11
 8008442:	1d23      	adds	r3, r4, #4
 8008444:	f020 0007 	bic.w	r0, r0, #7
 8008448:	1ac2      	subs	r2, r0, r3
 800844a:	bf1c      	itt	ne
 800844c:	1a1b      	subne	r3, r3, r0
 800844e:	50a3      	strne	r3, [r4, r2]
 8008450:	e7af      	b.n	80083b2 <_malloc_r+0x22>
 8008452:	6862      	ldr	r2, [r4, #4]
 8008454:	42a3      	cmp	r3, r4
 8008456:	bf0c      	ite	eq
 8008458:	f8c8 2000 	streq.w	r2, [r8]
 800845c:	605a      	strne	r2, [r3, #4]
 800845e:	e7eb      	b.n	8008438 <_malloc_r+0xa8>
 8008460:	4623      	mov	r3, r4
 8008462:	6864      	ldr	r4, [r4, #4]
 8008464:	e7ae      	b.n	80083c4 <_malloc_r+0x34>
 8008466:	463c      	mov	r4, r7
 8008468:	687f      	ldr	r7, [r7, #4]
 800846a:	e7b6      	b.n	80083da <_malloc_r+0x4a>
 800846c:	461a      	mov	r2, r3
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	42a3      	cmp	r3, r4
 8008472:	d1fb      	bne.n	800846c <_malloc_r+0xdc>
 8008474:	2300      	movs	r3, #0
 8008476:	6053      	str	r3, [r2, #4]
 8008478:	e7de      	b.n	8008438 <_malloc_r+0xa8>
 800847a:	230c      	movs	r3, #12
 800847c:	4630      	mov	r0, r6
 800847e:	6033      	str	r3, [r6, #0]
 8008480:	f000 f80c 	bl	800849c <__malloc_unlock>
 8008484:	e794      	b.n	80083b0 <_malloc_r+0x20>
 8008486:	6005      	str	r5, [r0, #0]
 8008488:	e7d6      	b.n	8008438 <_malloc_r+0xa8>
 800848a:	bf00      	nop
 800848c:	20001560 	.word	0x20001560

08008490 <__malloc_lock>:
 8008490:	4801      	ldr	r0, [pc, #4]	@ (8008498 <__malloc_lock+0x8>)
 8008492:	f7ff bf11 	b.w	80082b8 <__retarget_lock_acquire_recursive>
 8008496:	bf00      	nop
 8008498:	20001558 	.word	0x20001558

0800849c <__malloc_unlock>:
 800849c:	4801      	ldr	r0, [pc, #4]	@ (80084a4 <__malloc_unlock+0x8>)
 800849e:	f7ff bf0c 	b.w	80082ba <__retarget_lock_release_recursive>
 80084a2:	bf00      	nop
 80084a4:	20001558 	.word	0x20001558

080084a8 <__ssputs_r>:
 80084a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084ac:	461f      	mov	r7, r3
 80084ae:	688e      	ldr	r6, [r1, #8]
 80084b0:	4682      	mov	sl, r0
 80084b2:	42be      	cmp	r6, r7
 80084b4:	460c      	mov	r4, r1
 80084b6:	4690      	mov	r8, r2
 80084b8:	680b      	ldr	r3, [r1, #0]
 80084ba:	d82d      	bhi.n	8008518 <__ssputs_r+0x70>
 80084bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80084c4:	d026      	beq.n	8008514 <__ssputs_r+0x6c>
 80084c6:	6965      	ldr	r5, [r4, #20]
 80084c8:	6909      	ldr	r1, [r1, #16]
 80084ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084ce:	eba3 0901 	sub.w	r9, r3, r1
 80084d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084d6:	1c7b      	adds	r3, r7, #1
 80084d8:	444b      	add	r3, r9
 80084da:	106d      	asrs	r5, r5, #1
 80084dc:	429d      	cmp	r5, r3
 80084de:	bf38      	it	cc
 80084e0:	461d      	movcc	r5, r3
 80084e2:	0553      	lsls	r3, r2, #21
 80084e4:	d527      	bpl.n	8008536 <__ssputs_r+0x8e>
 80084e6:	4629      	mov	r1, r5
 80084e8:	f7ff ff52 	bl	8008390 <_malloc_r>
 80084ec:	4606      	mov	r6, r0
 80084ee:	b360      	cbz	r0, 800854a <__ssputs_r+0xa2>
 80084f0:	464a      	mov	r2, r9
 80084f2:	6921      	ldr	r1, [r4, #16]
 80084f4:	f000 faf8 	bl	8008ae8 <memcpy>
 80084f8:	89a3      	ldrh	r3, [r4, #12]
 80084fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80084fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008502:	81a3      	strh	r3, [r4, #12]
 8008504:	6126      	str	r6, [r4, #16]
 8008506:	444e      	add	r6, r9
 8008508:	6026      	str	r6, [r4, #0]
 800850a:	463e      	mov	r6, r7
 800850c:	6165      	str	r5, [r4, #20]
 800850e:	eba5 0509 	sub.w	r5, r5, r9
 8008512:	60a5      	str	r5, [r4, #8]
 8008514:	42be      	cmp	r6, r7
 8008516:	d900      	bls.n	800851a <__ssputs_r+0x72>
 8008518:	463e      	mov	r6, r7
 800851a:	4632      	mov	r2, r6
 800851c:	4641      	mov	r1, r8
 800851e:	6820      	ldr	r0, [r4, #0]
 8008520:	f000 faaa 	bl	8008a78 <memmove>
 8008524:	2000      	movs	r0, #0
 8008526:	68a3      	ldr	r3, [r4, #8]
 8008528:	1b9b      	subs	r3, r3, r6
 800852a:	60a3      	str	r3, [r4, #8]
 800852c:	6823      	ldr	r3, [r4, #0]
 800852e:	4433      	add	r3, r6
 8008530:	6023      	str	r3, [r4, #0]
 8008532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008536:	462a      	mov	r2, r5
 8008538:	f000 fae4 	bl	8008b04 <_realloc_r>
 800853c:	4606      	mov	r6, r0
 800853e:	2800      	cmp	r0, #0
 8008540:	d1e0      	bne.n	8008504 <__ssputs_r+0x5c>
 8008542:	4650      	mov	r0, sl
 8008544:	6921      	ldr	r1, [r4, #16]
 8008546:	f7ff feb9 	bl	80082bc <_free_r>
 800854a:	230c      	movs	r3, #12
 800854c:	f8ca 3000 	str.w	r3, [sl]
 8008550:	89a3      	ldrh	r3, [r4, #12]
 8008552:	f04f 30ff 	mov.w	r0, #4294967295
 8008556:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800855a:	81a3      	strh	r3, [r4, #12]
 800855c:	e7e9      	b.n	8008532 <__ssputs_r+0x8a>
	...

08008560 <_svfiprintf_r>:
 8008560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008564:	4698      	mov	r8, r3
 8008566:	898b      	ldrh	r3, [r1, #12]
 8008568:	4607      	mov	r7, r0
 800856a:	061b      	lsls	r3, r3, #24
 800856c:	460d      	mov	r5, r1
 800856e:	4614      	mov	r4, r2
 8008570:	b09d      	sub	sp, #116	@ 0x74
 8008572:	d510      	bpl.n	8008596 <_svfiprintf_r+0x36>
 8008574:	690b      	ldr	r3, [r1, #16]
 8008576:	b973      	cbnz	r3, 8008596 <_svfiprintf_r+0x36>
 8008578:	2140      	movs	r1, #64	@ 0x40
 800857a:	f7ff ff09 	bl	8008390 <_malloc_r>
 800857e:	6028      	str	r0, [r5, #0]
 8008580:	6128      	str	r0, [r5, #16]
 8008582:	b930      	cbnz	r0, 8008592 <_svfiprintf_r+0x32>
 8008584:	230c      	movs	r3, #12
 8008586:	603b      	str	r3, [r7, #0]
 8008588:	f04f 30ff 	mov.w	r0, #4294967295
 800858c:	b01d      	add	sp, #116	@ 0x74
 800858e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008592:	2340      	movs	r3, #64	@ 0x40
 8008594:	616b      	str	r3, [r5, #20]
 8008596:	2300      	movs	r3, #0
 8008598:	9309      	str	r3, [sp, #36]	@ 0x24
 800859a:	2320      	movs	r3, #32
 800859c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085a0:	2330      	movs	r3, #48	@ 0x30
 80085a2:	f04f 0901 	mov.w	r9, #1
 80085a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80085aa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008744 <_svfiprintf_r+0x1e4>
 80085ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085b2:	4623      	mov	r3, r4
 80085b4:	469a      	mov	sl, r3
 80085b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085ba:	b10a      	cbz	r2, 80085c0 <_svfiprintf_r+0x60>
 80085bc:	2a25      	cmp	r2, #37	@ 0x25
 80085be:	d1f9      	bne.n	80085b4 <_svfiprintf_r+0x54>
 80085c0:	ebba 0b04 	subs.w	fp, sl, r4
 80085c4:	d00b      	beq.n	80085de <_svfiprintf_r+0x7e>
 80085c6:	465b      	mov	r3, fp
 80085c8:	4622      	mov	r2, r4
 80085ca:	4629      	mov	r1, r5
 80085cc:	4638      	mov	r0, r7
 80085ce:	f7ff ff6b 	bl	80084a8 <__ssputs_r>
 80085d2:	3001      	adds	r0, #1
 80085d4:	f000 80a7 	beq.w	8008726 <_svfiprintf_r+0x1c6>
 80085d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085da:	445a      	add	r2, fp
 80085dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80085de:	f89a 3000 	ldrb.w	r3, [sl]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f000 809f 	beq.w	8008726 <_svfiprintf_r+0x1c6>
 80085e8:	2300      	movs	r3, #0
 80085ea:	f04f 32ff 	mov.w	r2, #4294967295
 80085ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085f2:	f10a 0a01 	add.w	sl, sl, #1
 80085f6:	9304      	str	r3, [sp, #16]
 80085f8:	9307      	str	r3, [sp, #28]
 80085fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80085fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8008600:	4654      	mov	r4, sl
 8008602:	2205      	movs	r2, #5
 8008604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008608:	484e      	ldr	r0, [pc, #312]	@ (8008744 <_svfiprintf_r+0x1e4>)
 800860a:	f000 fa5f 	bl	8008acc <memchr>
 800860e:	9a04      	ldr	r2, [sp, #16]
 8008610:	b9d8      	cbnz	r0, 800864a <_svfiprintf_r+0xea>
 8008612:	06d0      	lsls	r0, r2, #27
 8008614:	bf44      	itt	mi
 8008616:	2320      	movmi	r3, #32
 8008618:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800861c:	0711      	lsls	r1, r2, #28
 800861e:	bf44      	itt	mi
 8008620:	232b      	movmi	r3, #43	@ 0x2b
 8008622:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008626:	f89a 3000 	ldrb.w	r3, [sl]
 800862a:	2b2a      	cmp	r3, #42	@ 0x2a
 800862c:	d015      	beq.n	800865a <_svfiprintf_r+0xfa>
 800862e:	4654      	mov	r4, sl
 8008630:	2000      	movs	r0, #0
 8008632:	f04f 0c0a 	mov.w	ip, #10
 8008636:	9a07      	ldr	r2, [sp, #28]
 8008638:	4621      	mov	r1, r4
 800863a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800863e:	3b30      	subs	r3, #48	@ 0x30
 8008640:	2b09      	cmp	r3, #9
 8008642:	d94b      	bls.n	80086dc <_svfiprintf_r+0x17c>
 8008644:	b1b0      	cbz	r0, 8008674 <_svfiprintf_r+0x114>
 8008646:	9207      	str	r2, [sp, #28]
 8008648:	e014      	b.n	8008674 <_svfiprintf_r+0x114>
 800864a:	eba0 0308 	sub.w	r3, r0, r8
 800864e:	fa09 f303 	lsl.w	r3, r9, r3
 8008652:	4313      	orrs	r3, r2
 8008654:	46a2      	mov	sl, r4
 8008656:	9304      	str	r3, [sp, #16]
 8008658:	e7d2      	b.n	8008600 <_svfiprintf_r+0xa0>
 800865a:	9b03      	ldr	r3, [sp, #12]
 800865c:	1d19      	adds	r1, r3, #4
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	9103      	str	r1, [sp, #12]
 8008662:	2b00      	cmp	r3, #0
 8008664:	bfbb      	ittet	lt
 8008666:	425b      	neglt	r3, r3
 8008668:	f042 0202 	orrlt.w	r2, r2, #2
 800866c:	9307      	strge	r3, [sp, #28]
 800866e:	9307      	strlt	r3, [sp, #28]
 8008670:	bfb8      	it	lt
 8008672:	9204      	strlt	r2, [sp, #16]
 8008674:	7823      	ldrb	r3, [r4, #0]
 8008676:	2b2e      	cmp	r3, #46	@ 0x2e
 8008678:	d10a      	bne.n	8008690 <_svfiprintf_r+0x130>
 800867a:	7863      	ldrb	r3, [r4, #1]
 800867c:	2b2a      	cmp	r3, #42	@ 0x2a
 800867e:	d132      	bne.n	80086e6 <_svfiprintf_r+0x186>
 8008680:	9b03      	ldr	r3, [sp, #12]
 8008682:	3402      	adds	r4, #2
 8008684:	1d1a      	adds	r2, r3, #4
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	9203      	str	r2, [sp, #12]
 800868a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800868e:	9305      	str	r3, [sp, #20]
 8008690:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008748 <_svfiprintf_r+0x1e8>
 8008694:	2203      	movs	r2, #3
 8008696:	4650      	mov	r0, sl
 8008698:	7821      	ldrb	r1, [r4, #0]
 800869a:	f000 fa17 	bl	8008acc <memchr>
 800869e:	b138      	cbz	r0, 80086b0 <_svfiprintf_r+0x150>
 80086a0:	2240      	movs	r2, #64	@ 0x40
 80086a2:	9b04      	ldr	r3, [sp, #16]
 80086a4:	eba0 000a 	sub.w	r0, r0, sl
 80086a8:	4082      	lsls	r2, r0
 80086aa:	4313      	orrs	r3, r2
 80086ac:	3401      	adds	r4, #1
 80086ae:	9304      	str	r3, [sp, #16]
 80086b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086b4:	2206      	movs	r2, #6
 80086b6:	4825      	ldr	r0, [pc, #148]	@ (800874c <_svfiprintf_r+0x1ec>)
 80086b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086bc:	f000 fa06 	bl	8008acc <memchr>
 80086c0:	2800      	cmp	r0, #0
 80086c2:	d036      	beq.n	8008732 <_svfiprintf_r+0x1d2>
 80086c4:	4b22      	ldr	r3, [pc, #136]	@ (8008750 <_svfiprintf_r+0x1f0>)
 80086c6:	bb1b      	cbnz	r3, 8008710 <_svfiprintf_r+0x1b0>
 80086c8:	9b03      	ldr	r3, [sp, #12]
 80086ca:	3307      	adds	r3, #7
 80086cc:	f023 0307 	bic.w	r3, r3, #7
 80086d0:	3308      	adds	r3, #8
 80086d2:	9303      	str	r3, [sp, #12]
 80086d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086d6:	4433      	add	r3, r6
 80086d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80086da:	e76a      	b.n	80085b2 <_svfiprintf_r+0x52>
 80086dc:	460c      	mov	r4, r1
 80086de:	2001      	movs	r0, #1
 80086e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80086e4:	e7a8      	b.n	8008638 <_svfiprintf_r+0xd8>
 80086e6:	2300      	movs	r3, #0
 80086e8:	f04f 0c0a 	mov.w	ip, #10
 80086ec:	4619      	mov	r1, r3
 80086ee:	3401      	adds	r4, #1
 80086f0:	9305      	str	r3, [sp, #20]
 80086f2:	4620      	mov	r0, r4
 80086f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086f8:	3a30      	subs	r2, #48	@ 0x30
 80086fa:	2a09      	cmp	r2, #9
 80086fc:	d903      	bls.n	8008706 <_svfiprintf_r+0x1a6>
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d0c6      	beq.n	8008690 <_svfiprintf_r+0x130>
 8008702:	9105      	str	r1, [sp, #20]
 8008704:	e7c4      	b.n	8008690 <_svfiprintf_r+0x130>
 8008706:	4604      	mov	r4, r0
 8008708:	2301      	movs	r3, #1
 800870a:	fb0c 2101 	mla	r1, ip, r1, r2
 800870e:	e7f0      	b.n	80086f2 <_svfiprintf_r+0x192>
 8008710:	ab03      	add	r3, sp, #12
 8008712:	9300      	str	r3, [sp, #0]
 8008714:	462a      	mov	r2, r5
 8008716:	4638      	mov	r0, r7
 8008718:	4b0e      	ldr	r3, [pc, #56]	@ (8008754 <_svfiprintf_r+0x1f4>)
 800871a:	a904      	add	r1, sp, #16
 800871c:	f3af 8000 	nop.w
 8008720:	1c42      	adds	r2, r0, #1
 8008722:	4606      	mov	r6, r0
 8008724:	d1d6      	bne.n	80086d4 <_svfiprintf_r+0x174>
 8008726:	89ab      	ldrh	r3, [r5, #12]
 8008728:	065b      	lsls	r3, r3, #25
 800872a:	f53f af2d 	bmi.w	8008588 <_svfiprintf_r+0x28>
 800872e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008730:	e72c      	b.n	800858c <_svfiprintf_r+0x2c>
 8008732:	ab03      	add	r3, sp, #12
 8008734:	9300      	str	r3, [sp, #0]
 8008736:	462a      	mov	r2, r5
 8008738:	4638      	mov	r0, r7
 800873a:	4b06      	ldr	r3, [pc, #24]	@ (8008754 <_svfiprintf_r+0x1f4>)
 800873c:	a904      	add	r1, sp, #16
 800873e:	f000 f87d 	bl	800883c <_printf_i>
 8008742:	e7ed      	b.n	8008720 <_svfiprintf_r+0x1c0>
 8008744:	08008c06 	.word	0x08008c06
 8008748:	08008c0c 	.word	0x08008c0c
 800874c:	08008c10 	.word	0x08008c10
 8008750:	00000000 	.word	0x00000000
 8008754:	080084a9 	.word	0x080084a9

08008758 <_printf_common>:
 8008758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800875c:	4616      	mov	r6, r2
 800875e:	4698      	mov	r8, r3
 8008760:	688a      	ldr	r2, [r1, #8]
 8008762:	690b      	ldr	r3, [r1, #16]
 8008764:	4607      	mov	r7, r0
 8008766:	4293      	cmp	r3, r2
 8008768:	bfb8      	it	lt
 800876a:	4613      	movlt	r3, r2
 800876c:	6033      	str	r3, [r6, #0]
 800876e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008772:	460c      	mov	r4, r1
 8008774:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008778:	b10a      	cbz	r2, 800877e <_printf_common+0x26>
 800877a:	3301      	adds	r3, #1
 800877c:	6033      	str	r3, [r6, #0]
 800877e:	6823      	ldr	r3, [r4, #0]
 8008780:	0699      	lsls	r1, r3, #26
 8008782:	bf42      	ittt	mi
 8008784:	6833      	ldrmi	r3, [r6, #0]
 8008786:	3302      	addmi	r3, #2
 8008788:	6033      	strmi	r3, [r6, #0]
 800878a:	6825      	ldr	r5, [r4, #0]
 800878c:	f015 0506 	ands.w	r5, r5, #6
 8008790:	d106      	bne.n	80087a0 <_printf_common+0x48>
 8008792:	f104 0a19 	add.w	sl, r4, #25
 8008796:	68e3      	ldr	r3, [r4, #12]
 8008798:	6832      	ldr	r2, [r6, #0]
 800879a:	1a9b      	subs	r3, r3, r2
 800879c:	42ab      	cmp	r3, r5
 800879e:	dc2b      	bgt.n	80087f8 <_printf_common+0xa0>
 80087a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80087a4:	6822      	ldr	r2, [r4, #0]
 80087a6:	3b00      	subs	r3, #0
 80087a8:	bf18      	it	ne
 80087aa:	2301      	movne	r3, #1
 80087ac:	0692      	lsls	r2, r2, #26
 80087ae:	d430      	bmi.n	8008812 <_printf_common+0xba>
 80087b0:	4641      	mov	r1, r8
 80087b2:	4638      	mov	r0, r7
 80087b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80087b8:	47c8      	blx	r9
 80087ba:	3001      	adds	r0, #1
 80087bc:	d023      	beq.n	8008806 <_printf_common+0xae>
 80087be:	6823      	ldr	r3, [r4, #0]
 80087c0:	6922      	ldr	r2, [r4, #16]
 80087c2:	f003 0306 	and.w	r3, r3, #6
 80087c6:	2b04      	cmp	r3, #4
 80087c8:	bf14      	ite	ne
 80087ca:	2500      	movne	r5, #0
 80087cc:	6833      	ldreq	r3, [r6, #0]
 80087ce:	f04f 0600 	mov.w	r6, #0
 80087d2:	bf08      	it	eq
 80087d4:	68e5      	ldreq	r5, [r4, #12]
 80087d6:	f104 041a 	add.w	r4, r4, #26
 80087da:	bf08      	it	eq
 80087dc:	1aed      	subeq	r5, r5, r3
 80087de:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80087e2:	bf08      	it	eq
 80087e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087e8:	4293      	cmp	r3, r2
 80087ea:	bfc4      	itt	gt
 80087ec:	1a9b      	subgt	r3, r3, r2
 80087ee:	18ed      	addgt	r5, r5, r3
 80087f0:	42b5      	cmp	r5, r6
 80087f2:	d11a      	bne.n	800882a <_printf_common+0xd2>
 80087f4:	2000      	movs	r0, #0
 80087f6:	e008      	b.n	800880a <_printf_common+0xb2>
 80087f8:	2301      	movs	r3, #1
 80087fa:	4652      	mov	r2, sl
 80087fc:	4641      	mov	r1, r8
 80087fe:	4638      	mov	r0, r7
 8008800:	47c8      	blx	r9
 8008802:	3001      	adds	r0, #1
 8008804:	d103      	bne.n	800880e <_printf_common+0xb6>
 8008806:	f04f 30ff 	mov.w	r0, #4294967295
 800880a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800880e:	3501      	adds	r5, #1
 8008810:	e7c1      	b.n	8008796 <_printf_common+0x3e>
 8008812:	2030      	movs	r0, #48	@ 0x30
 8008814:	18e1      	adds	r1, r4, r3
 8008816:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800881a:	1c5a      	adds	r2, r3, #1
 800881c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008820:	4422      	add	r2, r4
 8008822:	3302      	adds	r3, #2
 8008824:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008828:	e7c2      	b.n	80087b0 <_printf_common+0x58>
 800882a:	2301      	movs	r3, #1
 800882c:	4622      	mov	r2, r4
 800882e:	4641      	mov	r1, r8
 8008830:	4638      	mov	r0, r7
 8008832:	47c8      	blx	r9
 8008834:	3001      	adds	r0, #1
 8008836:	d0e6      	beq.n	8008806 <_printf_common+0xae>
 8008838:	3601      	adds	r6, #1
 800883a:	e7d9      	b.n	80087f0 <_printf_common+0x98>

0800883c <_printf_i>:
 800883c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008840:	7e0f      	ldrb	r7, [r1, #24]
 8008842:	4691      	mov	r9, r2
 8008844:	2f78      	cmp	r7, #120	@ 0x78
 8008846:	4680      	mov	r8, r0
 8008848:	460c      	mov	r4, r1
 800884a:	469a      	mov	sl, r3
 800884c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800884e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008852:	d807      	bhi.n	8008864 <_printf_i+0x28>
 8008854:	2f62      	cmp	r7, #98	@ 0x62
 8008856:	d80a      	bhi.n	800886e <_printf_i+0x32>
 8008858:	2f00      	cmp	r7, #0
 800885a:	f000 80d1 	beq.w	8008a00 <_printf_i+0x1c4>
 800885e:	2f58      	cmp	r7, #88	@ 0x58
 8008860:	f000 80b8 	beq.w	80089d4 <_printf_i+0x198>
 8008864:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008868:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800886c:	e03a      	b.n	80088e4 <_printf_i+0xa8>
 800886e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008872:	2b15      	cmp	r3, #21
 8008874:	d8f6      	bhi.n	8008864 <_printf_i+0x28>
 8008876:	a101      	add	r1, pc, #4	@ (adr r1, 800887c <_printf_i+0x40>)
 8008878:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800887c:	080088d5 	.word	0x080088d5
 8008880:	080088e9 	.word	0x080088e9
 8008884:	08008865 	.word	0x08008865
 8008888:	08008865 	.word	0x08008865
 800888c:	08008865 	.word	0x08008865
 8008890:	08008865 	.word	0x08008865
 8008894:	080088e9 	.word	0x080088e9
 8008898:	08008865 	.word	0x08008865
 800889c:	08008865 	.word	0x08008865
 80088a0:	08008865 	.word	0x08008865
 80088a4:	08008865 	.word	0x08008865
 80088a8:	080089e7 	.word	0x080089e7
 80088ac:	08008913 	.word	0x08008913
 80088b0:	080089a1 	.word	0x080089a1
 80088b4:	08008865 	.word	0x08008865
 80088b8:	08008865 	.word	0x08008865
 80088bc:	08008a09 	.word	0x08008a09
 80088c0:	08008865 	.word	0x08008865
 80088c4:	08008913 	.word	0x08008913
 80088c8:	08008865 	.word	0x08008865
 80088cc:	08008865 	.word	0x08008865
 80088d0:	080089a9 	.word	0x080089a9
 80088d4:	6833      	ldr	r3, [r6, #0]
 80088d6:	1d1a      	adds	r2, r3, #4
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	6032      	str	r2, [r6, #0]
 80088dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80088e4:	2301      	movs	r3, #1
 80088e6:	e09c      	b.n	8008a22 <_printf_i+0x1e6>
 80088e8:	6833      	ldr	r3, [r6, #0]
 80088ea:	6820      	ldr	r0, [r4, #0]
 80088ec:	1d19      	adds	r1, r3, #4
 80088ee:	6031      	str	r1, [r6, #0]
 80088f0:	0606      	lsls	r6, r0, #24
 80088f2:	d501      	bpl.n	80088f8 <_printf_i+0xbc>
 80088f4:	681d      	ldr	r5, [r3, #0]
 80088f6:	e003      	b.n	8008900 <_printf_i+0xc4>
 80088f8:	0645      	lsls	r5, r0, #25
 80088fa:	d5fb      	bpl.n	80088f4 <_printf_i+0xb8>
 80088fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008900:	2d00      	cmp	r5, #0
 8008902:	da03      	bge.n	800890c <_printf_i+0xd0>
 8008904:	232d      	movs	r3, #45	@ 0x2d
 8008906:	426d      	negs	r5, r5
 8008908:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800890c:	230a      	movs	r3, #10
 800890e:	4858      	ldr	r0, [pc, #352]	@ (8008a70 <_printf_i+0x234>)
 8008910:	e011      	b.n	8008936 <_printf_i+0xfa>
 8008912:	6821      	ldr	r1, [r4, #0]
 8008914:	6833      	ldr	r3, [r6, #0]
 8008916:	0608      	lsls	r0, r1, #24
 8008918:	f853 5b04 	ldr.w	r5, [r3], #4
 800891c:	d402      	bmi.n	8008924 <_printf_i+0xe8>
 800891e:	0649      	lsls	r1, r1, #25
 8008920:	bf48      	it	mi
 8008922:	b2ad      	uxthmi	r5, r5
 8008924:	2f6f      	cmp	r7, #111	@ 0x6f
 8008926:	6033      	str	r3, [r6, #0]
 8008928:	bf14      	ite	ne
 800892a:	230a      	movne	r3, #10
 800892c:	2308      	moveq	r3, #8
 800892e:	4850      	ldr	r0, [pc, #320]	@ (8008a70 <_printf_i+0x234>)
 8008930:	2100      	movs	r1, #0
 8008932:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008936:	6866      	ldr	r6, [r4, #4]
 8008938:	2e00      	cmp	r6, #0
 800893a:	60a6      	str	r6, [r4, #8]
 800893c:	db05      	blt.n	800894a <_printf_i+0x10e>
 800893e:	6821      	ldr	r1, [r4, #0]
 8008940:	432e      	orrs	r6, r5
 8008942:	f021 0104 	bic.w	r1, r1, #4
 8008946:	6021      	str	r1, [r4, #0]
 8008948:	d04b      	beq.n	80089e2 <_printf_i+0x1a6>
 800894a:	4616      	mov	r6, r2
 800894c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008950:	fb03 5711 	mls	r7, r3, r1, r5
 8008954:	5dc7      	ldrb	r7, [r0, r7]
 8008956:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800895a:	462f      	mov	r7, r5
 800895c:	42bb      	cmp	r3, r7
 800895e:	460d      	mov	r5, r1
 8008960:	d9f4      	bls.n	800894c <_printf_i+0x110>
 8008962:	2b08      	cmp	r3, #8
 8008964:	d10b      	bne.n	800897e <_printf_i+0x142>
 8008966:	6823      	ldr	r3, [r4, #0]
 8008968:	07df      	lsls	r7, r3, #31
 800896a:	d508      	bpl.n	800897e <_printf_i+0x142>
 800896c:	6923      	ldr	r3, [r4, #16]
 800896e:	6861      	ldr	r1, [r4, #4]
 8008970:	4299      	cmp	r1, r3
 8008972:	bfde      	ittt	le
 8008974:	2330      	movle	r3, #48	@ 0x30
 8008976:	f806 3c01 	strble.w	r3, [r6, #-1]
 800897a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800897e:	1b92      	subs	r2, r2, r6
 8008980:	6122      	str	r2, [r4, #16]
 8008982:	464b      	mov	r3, r9
 8008984:	4621      	mov	r1, r4
 8008986:	4640      	mov	r0, r8
 8008988:	f8cd a000 	str.w	sl, [sp]
 800898c:	aa03      	add	r2, sp, #12
 800898e:	f7ff fee3 	bl	8008758 <_printf_common>
 8008992:	3001      	adds	r0, #1
 8008994:	d14a      	bne.n	8008a2c <_printf_i+0x1f0>
 8008996:	f04f 30ff 	mov.w	r0, #4294967295
 800899a:	b004      	add	sp, #16
 800899c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089a0:	6823      	ldr	r3, [r4, #0]
 80089a2:	f043 0320 	orr.w	r3, r3, #32
 80089a6:	6023      	str	r3, [r4, #0]
 80089a8:	2778      	movs	r7, #120	@ 0x78
 80089aa:	4832      	ldr	r0, [pc, #200]	@ (8008a74 <_printf_i+0x238>)
 80089ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80089b0:	6823      	ldr	r3, [r4, #0]
 80089b2:	6831      	ldr	r1, [r6, #0]
 80089b4:	061f      	lsls	r7, r3, #24
 80089b6:	f851 5b04 	ldr.w	r5, [r1], #4
 80089ba:	d402      	bmi.n	80089c2 <_printf_i+0x186>
 80089bc:	065f      	lsls	r7, r3, #25
 80089be:	bf48      	it	mi
 80089c0:	b2ad      	uxthmi	r5, r5
 80089c2:	6031      	str	r1, [r6, #0]
 80089c4:	07d9      	lsls	r1, r3, #31
 80089c6:	bf44      	itt	mi
 80089c8:	f043 0320 	orrmi.w	r3, r3, #32
 80089cc:	6023      	strmi	r3, [r4, #0]
 80089ce:	b11d      	cbz	r5, 80089d8 <_printf_i+0x19c>
 80089d0:	2310      	movs	r3, #16
 80089d2:	e7ad      	b.n	8008930 <_printf_i+0xf4>
 80089d4:	4826      	ldr	r0, [pc, #152]	@ (8008a70 <_printf_i+0x234>)
 80089d6:	e7e9      	b.n	80089ac <_printf_i+0x170>
 80089d8:	6823      	ldr	r3, [r4, #0]
 80089da:	f023 0320 	bic.w	r3, r3, #32
 80089de:	6023      	str	r3, [r4, #0]
 80089e0:	e7f6      	b.n	80089d0 <_printf_i+0x194>
 80089e2:	4616      	mov	r6, r2
 80089e4:	e7bd      	b.n	8008962 <_printf_i+0x126>
 80089e6:	6833      	ldr	r3, [r6, #0]
 80089e8:	6825      	ldr	r5, [r4, #0]
 80089ea:	1d18      	adds	r0, r3, #4
 80089ec:	6961      	ldr	r1, [r4, #20]
 80089ee:	6030      	str	r0, [r6, #0]
 80089f0:	062e      	lsls	r6, r5, #24
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	d501      	bpl.n	80089fa <_printf_i+0x1be>
 80089f6:	6019      	str	r1, [r3, #0]
 80089f8:	e002      	b.n	8008a00 <_printf_i+0x1c4>
 80089fa:	0668      	lsls	r0, r5, #25
 80089fc:	d5fb      	bpl.n	80089f6 <_printf_i+0x1ba>
 80089fe:	8019      	strh	r1, [r3, #0]
 8008a00:	2300      	movs	r3, #0
 8008a02:	4616      	mov	r6, r2
 8008a04:	6123      	str	r3, [r4, #16]
 8008a06:	e7bc      	b.n	8008982 <_printf_i+0x146>
 8008a08:	6833      	ldr	r3, [r6, #0]
 8008a0a:	2100      	movs	r1, #0
 8008a0c:	1d1a      	adds	r2, r3, #4
 8008a0e:	6032      	str	r2, [r6, #0]
 8008a10:	681e      	ldr	r6, [r3, #0]
 8008a12:	6862      	ldr	r2, [r4, #4]
 8008a14:	4630      	mov	r0, r6
 8008a16:	f000 f859 	bl	8008acc <memchr>
 8008a1a:	b108      	cbz	r0, 8008a20 <_printf_i+0x1e4>
 8008a1c:	1b80      	subs	r0, r0, r6
 8008a1e:	6060      	str	r0, [r4, #4]
 8008a20:	6863      	ldr	r3, [r4, #4]
 8008a22:	6123      	str	r3, [r4, #16]
 8008a24:	2300      	movs	r3, #0
 8008a26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a2a:	e7aa      	b.n	8008982 <_printf_i+0x146>
 8008a2c:	4632      	mov	r2, r6
 8008a2e:	4649      	mov	r1, r9
 8008a30:	4640      	mov	r0, r8
 8008a32:	6923      	ldr	r3, [r4, #16]
 8008a34:	47d0      	blx	sl
 8008a36:	3001      	adds	r0, #1
 8008a38:	d0ad      	beq.n	8008996 <_printf_i+0x15a>
 8008a3a:	6823      	ldr	r3, [r4, #0]
 8008a3c:	079b      	lsls	r3, r3, #30
 8008a3e:	d413      	bmi.n	8008a68 <_printf_i+0x22c>
 8008a40:	68e0      	ldr	r0, [r4, #12]
 8008a42:	9b03      	ldr	r3, [sp, #12]
 8008a44:	4298      	cmp	r0, r3
 8008a46:	bfb8      	it	lt
 8008a48:	4618      	movlt	r0, r3
 8008a4a:	e7a6      	b.n	800899a <_printf_i+0x15e>
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	4632      	mov	r2, r6
 8008a50:	4649      	mov	r1, r9
 8008a52:	4640      	mov	r0, r8
 8008a54:	47d0      	blx	sl
 8008a56:	3001      	adds	r0, #1
 8008a58:	d09d      	beq.n	8008996 <_printf_i+0x15a>
 8008a5a:	3501      	adds	r5, #1
 8008a5c:	68e3      	ldr	r3, [r4, #12]
 8008a5e:	9903      	ldr	r1, [sp, #12]
 8008a60:	1a5b      	subs	r3, r3, r1
 8008a62:	42ab      	cmp	r3, r5
 8008a64:	dcf2      	bgt.n	8008a4c <_printf_i+0x210>
 8008a66:	e7eb      	b.n	8008a40 <_printf_i+0x204>
 8008a68:	2500      	movs	r5, #0
 8008a6a:	f104 0619 	add.w	r6, r4, #25
 8008a6e:	e7f5      	b.n	8008a5c <_printf_i+0x220>
 8008a70:	08008c17 	.word	0x08008c17
 8008a74:	08008c28 	.word	0x08008c28

08008a78 <memmove>:
 8008a78:	4288      	cmp	r0, r1
 8008a7a:	b510      	push	{r4, lr}
 8008a7c:	eb01 0402 	add.w	r4, r1, r2
 8008a80:	d902      	bls.n	8008a88 <memmove+0x10>
 8008a82:	4284      	cmp	r4, r0
 8008a84:	4623      	mov	r3, r4
 8008a86:	d807      	bhi.n	8008a98 <memmove+0x20>
 8008a88:	1e43      	subs	r3, r0, #1
 8008a8a:	42a1      	cmp	r1, r4
 8008a8c:	d008      	beq.n	8008aa0 <memmove+0x28>
 8008a8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a96:	e7f8      	b.n	8008a8a <memmove+0x12>
 8008a98:	4601      	mov	r1, r0
 8008a9a:	4402      	add	r2, r0
 8008a9c:	428a      	cmp	r2, r1
 8008a9e:	d100      	bne.n	8008aa2 <memmove+0x2a>
 8008aa0:	bd10      	pop	{r4, pc}
 8008aa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008aa6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008aaa:	e7f7      	b.n	8008a9c <memmove+0x24>

08008aac <_sbrk_r>:
 8008aac:	b538      	push	{r3, r4, r5, lr}
 8008aae:	2300      	movs	r3, #0
 8008ab0:	4d05      	ldr	r5, [pc, #20]	@ (8008ac8 <_sbrk_r+0x1c>)
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	4608      	mov	r0, r1
 8008ab6:	602b      	str	r3, [r5, #0]
 8008ab8:	f7f7 ff8a 	bl	80009d0 <_sbrk>
 8008abc:	1c43      	adds	r3, r0, #1
 8008abe:	d102      	bne.n	8008ac6 <_sbrk_r+0x1a>
 8008ac0:	682b      	ldr	r3, [r5, #0]
 8008ac2:	b103      	cbz	r3, 8008ac6 <_sbrk_r+0x1a>
 8008ac4:	6023      	str	r3, [r4, #0]
 8008ac6:	bd38      	pop	{r3, r4, r5, pc}
 8008ac8:	20001554 	.word	0x20001554

08008acc <memchr>:
 8008acc:	4603      	mov	r3, r0
 8008ace:	b510      	push	{r4, lr}
 8008ad0:	b2c9      	uxtb	r1, r1
 8008ad2:	4402      	add	r2, r0
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	d101      	bne.n	8008ade <memchr+0x12>
 8008ada:	2000      	movs	r0, #0
 8008adc:	e003      	b.n	8008ae6 <memchr+0x1a>
 8008ade:	7804      	ldrb	r4, [r0, #0]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	428c      	cmp	r4, r1
 8008ae4:	d1f6      	bne.n	8008ad4 <memchr+0x8>
 8008ae6:	bd10      	pop	{r4, pc}

08008ae8 <memcpy>:
 8008ae8:	440a      	add	r2, r1
 8008aea:	4291      	cmp	r1, r2
 8008aec:	f100 33ff 	add.w	r3, r0, #4294967295
 8008af0:	d100      	bne.n	8008af4 <memcpy+0xc>
 8008af2:	4770      	bx	lr
 8008af4:	b510      	push	{r4, lr}
 8008af6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008afa:	4291      	cmp	r1, r2
 8008afc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b00:	d1f9      	bne.n	8008af6 <memcpy+0xe>
 8008b02:	bd10      	pop	{r4, pc}

08008b04 <_realloc_r>:
 8008b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b08:	4607      	mov	r7, r0
 8008b0a:	4614      	mov	r4, r2
 8008b0c:	460d      	mov	r5, r1
 8008b0e:	b921      	cbnz	r1, 8008b1a <_realloc_r+0x16>
 8008b10:	4611      	mov	r1, r2
 8008b12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b16:	f7ff bc3b 	b.w	8008390 <_malloc_r>
 8008b1a:	b92a      	cbnz	r2, 8008b28 <_realloc_r+0x24>
 8008b1c:	f7ff fbce 	bl	80082bc <_free_r>
 8008b20:	4625      	mov	r5, r4
 8008b22:	4628      	mov	r0, r5
 8008b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b28:	f000 f81a 	bl	8008b60 <_malloc_usable_size_r>
 8008b2c:	4284      	cmp	r4, r0
 8008b2e:	4606      	mov	r6, r0
 8008b30:	d802      	bhi.n	8008b38 <_realloc_r+0x34>
 8008b32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008b36:	d8f4      	bhi.n	8008b22 <_realloc_r+0x1e>
 8008b38:	4621      	mov	r1, r4
 8008b3a:	4638      	mov	r0, r7
 8008b3c:	f7ff fc28 	bl	8008390 <_malloc_r>
 8008b40:	4680      	mov	r8, r0
 8008b42:	b908      	cbnz	r0, 8008b48 <_realloc_r+0x44>
 8008b44:	4645      	mov	r5, r8
 8008b46:	e7ec      	b.n	8008b22 <_realloc_r+0x1e>
 8008b48:	42b4      	cmp	r4, r6
 8008b4a:	4622      	mov	r2, r4
 8008b4c:	4629      	mov	r1, r5
 8008b4e:	bf28      	it	cs
 8008b50:	4632      	movcs	r2, r6
 8008b52:	f7ff ffc9 	bl	8008ae8 <memcpy>
 8008b56:	4629      	mov	r1, r5
 8008b58:	4638      	mov	r0, r7
 8008b5a:	f7ff fbaf 	bl	80082bc <_free_r>
 8008b5e:	e7f1      	b.n	8008b44 <_realloc_r+0x40>

08008b60 <_malloc_usable_size_r>:
 8008b60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b64:	1f18      	subs	r0, r3, #4
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	bfbc      	itt	lt
 8008b6a:	580b      	ldrlt	r3, [r1, r0]
 8008b6c:	18c0      	addlt	r0, r0, r3
 8008b6e:	4770      	bx	lr

08008b70 <_init>:
 8008b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b72:	bf00      	nop
 8008b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b76:	bc08      	pop	{r3}
 8008b78:	469e      	mov	lr, r3
 8008b7a:	4770      	bx	lr

08008b7c <_fini>:
 8008b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7e:	bf00      	nop
 8008b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b82:	bc08      	pop	{r3}
 8008b84:	469e      	mov	lr, r3
 8008b86:	4770      	bx	lr
