
RFID_Reader_c6t6a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075f8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08007704  08007704  00008704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007770  08007770  0000917c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007770  08007770  0000917c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007770  08007770  0000917c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007770  08007770  00008770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007774  08007774  00008774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  08007778  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001238  2000017c  080078f4  0000917c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013b4  080078f4  000093b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000917c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dbcf  00000000  00000000  000091a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cb2  00000000  00000000  00016d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  00019a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000091a  00000000  00000000  0001a680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019133  00000000  00000000  0001af9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000101db  00000000  00000000  000340cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008404f  00000000  00000000  000442a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c82f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000305c  00000000  00000000  000c833c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000cb398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	080076ec 	.word	0x080076ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	080076ec 	.word	0x080076ec

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f9dc 	bl	800050c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f808 	bl	8000168 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f896 	bl	8000288 <MX_GPIO_Init>
  MX_SPI1_Init();
 800015c:	f000 f85e 	bl	800021c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000160:	f006 fe22 	bl	8006da8 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000164:	bf00      	nop
 8000166:	e7fd      	b.n	8000164 <main+0x18>

08000168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	b094      	sub	sp, #80	@ 0x50
 800016c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800016e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000172:	2228      	movs	r2, #40	@ 0x28
 8000174:	2100      	movs	r1, #0
 8000176:	4618      	mov	r0, r3
 8000178:	f007 fa8c 	bl	8007694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800017c:	f107 0314 	add.w	r3, r7, #20
 8000180:	2200      	movs	r2, #0
 8000182:	601a      	str	r2, [r3, #0]
 8000184:	605a      	str	r2, [r3, #4]
 8000186:	609a      	str	r2, [r3, #8]
 8000188:	60da      	str	r2, [r3, #12]
 800018a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800018c:	1d3b      	adds	r3, r7, #4
 800018e:	2200      	movs	r2, #0
 8000190:	601a      	str	r2, [r3, #0]
 8000192:	605a      	str	r2, [r3, #4]
 8000194:	609a      	str	r2, [r3, #8]
 8000196:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000198:	2301      	movs	r3, #1
 800019a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800019c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001a2:	2300      	movs	r3, #0
 80001a4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a6:	2301      	movs	r3, #1
 80001a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001aa:	2302      	movs	r3, #2
 80001ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001b4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001be:	4618      	mov	r0, r3
 80001c0:	f002 fa08 	bl	80025d4 <HAL_RCC_OscConfig>
 80001c4:	4603      	mov	r3, r0
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d001      	beq.n	80001ce <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001ca:	f000 f8bb 	bl	8000344 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ce:	230f      	movs	r3, #15
 80001d0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d2:	2302      	movs	r3, #2
 80001d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d6:	2300      	movs	r3, #0
 80001d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001de:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e4:	f107 0314 	add.w	r3, r7, #20
 80001e8:	2102      	movs	r1, #2
 80001ea:	4618      	mov	r0, r3
 80001ec:	f002 fc74 	bl	8002ad8 <HAL_RCC_ClockConfig>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80001f6:	f000 f8a5 	bl	8000344 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80001fa:	2310      	movs	r3, #16
 80001fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80001fe:	2300      	movs	r3, #0
 8000200:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000202:	1d3b      	adds	r3, r7, #4
 8000204:	4618      	mov	r0, r3
 8000206:	f002 fdc3 	bl	8002d90 <HAL_RCCEx_PeriphCLKConfig>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000210:	f000 f898 	bl	8000344 <Error_Handler>
  }
}
 8000214:	bf00      	nop
 8000216:	3750      	adds	r7, #80	@ 0x50
 8000218:	46bd      	mov	sp, r7
 800021a:	bd80      	pop	{r7, pc}

0800021c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000220:	4b17      	ldr	r3, [pc, #92]	@ (8000280 <MX_SPI1_Init+0x64>)
 8000222:	4a18      	ldr	r2, [pc, #96]	@ (8000284 <MX_SPI1_Init+0x68>)
 8000224:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000226:	4b16      	ldr	r3, [pc, #88]	@ (8000280 <MX_SPI1_Init+0x64>)
 8000228:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800022c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800022e:	4b14      	ldr	r3, [pc, #80]	@ (8000280 <MX_SPI1_Init+0x64>)
 8000230:	2200      	movs	r2, #0
 8000232:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000234:	4b12      	ldr	r3, [pc, #72]	@ (8000280 <MX_SPI1_Init+0x64>)
 8000236:	2200      	movs	r2, #0
 8000238:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800023a:	4b11      	ldr	r3, [pc, #68]	@ (8000280 <MX_SPI1_Init+0x64>)
 800023c:	2200      	movs	r2, #0
 800023e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000240:	4b0f      	ldr	r3, [pc, #60]	@ (8000280 <MX_SPI1_Init+0x64>)
 8000242:	2200      	movs	r2, #0
 8000244:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000246:	4b0e      	ldr	r3, [pc, #56]	@ (8000280 <MX_SPI1_Init+0x64>)
 8000248:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800024c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800024e:	4b0c      	ldr	r3, [pc, #48]	@ (8000280 <MX_SPI1_Init+0x64>)
 8000250:	2218      	movs	r2, #24
 8000252:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000254:	4b0a      	ldr	r3, [pc, #40]	@ (8000280 <MX_SPI1_Init+0x64>)
 8000256:	2200      	movs	r2, #0
 8000258:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800025a:	4b09      	ldr	r3, [pc, #36]	@ (8000280 <MX_SPI1_Init+0x64>)
 800025c:	2200      	movs	r2, #0
 800025e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000260:	4b07      	ldr	r3, [pc, #28]	@ (8000280 <MX_SPI1_Init+0x64>)
 8000262:	2200      	movs	r2, #0
 8000264:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000266:	4b06      	ldr	r3, [pc, #24]	@ (8000280 <MX_SPI1_Init+0x64>)
 8000268:	220a      	movs	r2, #10
 800026a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800026c:	4804      	ldr	r0, [pc, #16]	@ (8000280 <MX_SPI1_Init+0x64>)
 800026e:	f002 fe45 	bl	8002efc <HAL_SPI_Init>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000278:	f000 f864 	bl	8000344 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800027c:	bf00      	nop
 800027e:	bd80      	pop	{r7, pc}
 8000280:	20000198 	.word	0x20000198
 8000284:	40013000 	.word	0x40013000

08000288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b088      	sub	sp, #32
 800028c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800028e:	f107 0310 	add.w	r3, r7, #16
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800029c:	4b26      	ldr	r3, [pc, #152]	@ (8000338 <MX_GPIO_Init+0xb0>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	4a25      	ldr	r2, [pc, #148]	@ (8000338 <MX_GPIO_Init+0xb0>)
 80002a2:	f043 0320 	orr.w	r3, r3, #32
 80002a6:	6193      	str	r3, [r2, #24]
 80002a8:	4b23      	ldr	r3, [pc, #140]	@ (8000338 <MX_GPIO_Init+0xb0>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	f003 0320 	and.w	r3, r3, #32
 80002b0:	60fb      	str	r3, [r7, #12]
 80002b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b4:	4b20      	ldr	r3, [pc, #128]	@ (8000338 <MX_GPIO_Init+0xb0>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	4a1f      	ldr	r2, [pc, #124]	@ (8000338 <MX_GPIO_Init+0xb0>)
 80002ba:	f043 0304 	orr.w	r3, r3, #4
 80002be:	6193      	str	r3, [r2, #24]
 80002c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000338 <MX_GPIO_Init+0xb0>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	f003 0304 	and.w	r3, r3, #4
 80002c8:	60bb      	str	r3, [r7, #8]
 80002ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000338 <MX_GPIO_Init+0xb0>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a19      	ldr	r2, [pc, #100]	@ (8000338 <MX_GPIO_Init+0xb0>)
 80002d2:	f043 0308 	orr.w	r3, r3, #8
 80002d6:	6193      	str	r3, [r2, #24]
 80002d8:	4b17      	ldr	r3, [pc, #92]	@ (8000338 <MX_GPIO_Init+0xb0>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	f003 0308 	and.w	r3, r3, #8
 80002e0:	607b      	str	r3, [r7, #4]
 80002e2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80002e4:	2200      	movs	r2, #0
 80002e6:	2110      	movs	r1, #16
 80002e8:	4814      	ldr	r0, [pc, #80]	@ (800033c <MX_GPIO_Init+0xb4>)
 80002ea:	f000 fbfb 	bl	8000ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80002ee:	2200      	movs	r2, #0
 80002f0:	2101      	movs	r1, #1
 80002f2:	4813      	ldr	r0, [pc, #76]	@ (8000340 <MX_GPIO_Init+0xb8>)
 80002f4:	f000 fbf6 	bl	8000ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80002f8:	2310      	movs	r3, #16
 80002fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002fc:	2301      	movs	r3, #1
 80002fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000300:	2300      	movs	r3, #0
 8000302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000304:	2302      	movs	r3, #2
 8000306:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000308:	f107 0310 	add.w	r3, r7, #16
 800030c:	4619      	mov	r1, r3
 800030e:	480b      	ldr	r0, [pc, #44]	@ (800033c <MX_GPIO_Init+0xb4>)
 8000310:	f000 fa6c 	bl	80007ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000314:	2301      	movs	r3, #1
 8000316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000318:	2301      	movs	r3, #1
 800031a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031c:	2300      	movs	r3, #0
 800031e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000320:	2302      	movs	r3, #2
 8000322:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000324:	f107 0310 	add.w	r3, r7, #16
 8000328:	4619      	mov	r1, r3
 800032a:	4805      	ldr	r0, [pc, #20]	@ (8000340 <MX_GPIO_Init+0xb8>)
 800032c:	f000 fa5e 	bl	80007ec <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000330:	bf00      	nop
 8000332:	3720      	adds	r7, #32
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	40021000 	.word	0x40021000
 800033c:	40010800 	.word	0x40010800
 8000340:	40010c00 	.word	0x40010c00

08000344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000348:	b672      	cpsid	i
}
 800034a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800034c:	bf00      	nop
 800034e:	e7fd      	b.n	800034c <Error_Handler+0x8>

08000350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000350:	b480      	push	{r7}
 8000352:	b085      	sub	sp, #20
 8000354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000356:	4b15      	ldr	r3, [pc, #84]	@ (80003ac <HAL_MspInit+0x5c>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	4a14      	ldr	r2, [pc, #80]	@ (80003ac <HAL_MspInit+0x5c>)
 800035c:	f043 0301 	orr.w	r3, r3, #1
 8000360:	6193      	str	r3, [r2, #24]
 8000362:	4b12      	ldr	r3, [pc, #72]	@ (80003ac <HAL_MspInit+0x5c>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	f003 0301 	and.w	r3, r3, #1
 800036a:	60bb      	str	r3, [r7, #8]
 800036c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800036e:	4b0f      	ldr	r3, [pc, #60]	@ (80003ac <HAL_MspInit+0x5c>)
 8000370:	69db      	ldr	r3, [r3, #28]
 8000372:	4a0e      	ldr	r2, [pc, #56]	@ (80003ac <HAL_MspInit+0x5c>)
 8000374:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000378:	61d3      	str	r3, [r2, #28]
 800037a:	4b0c      	ldr	r3, [pc, #48]	@ (80003ac <HAL_MspInit+0x5c>)
 800037c:	69db      	ldr	r3, [r3, #28]
 800037e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000382:	607b      	str	r3, [r7, #4]
 8000384:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000386:	4b0a      	ldr	r3, [pc, #40]	@ (80003b0 <HAL_MspInit+0x60>)
 8000388:	685b      	ldr	r3, [r3, #4]
 800038a:	60fb      	str	r3, [r7, #12]
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800039a:	60fb      	str	r3, [r7, #12]
 800039c:	4a04      	ldr	r2, [pc, #16]	@ (80003b0 <HAL_MspInit+0x60>)
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003a2:	bf00      	nop
 80003a4:	3714      	adds	r7, #20
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr
 80003ac:	40021000 	.word	0x40021000
 80003b0:	40010000 	.word	0x40010000

080003b4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b088      	sub	sp, #32
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003bc:	f107 0310 	add.w	r3, r7, #16
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
 80003c4:	605a      	str	r2, [r3, #4]
 80003c6:	609a      	str	r2, [r3, #8]
 80003c8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4a1b      	ldr	r2, [pc, #108]	@ (800043c <HAL_SPI_MspInit+0x88>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d12f      	bne.n	8000434 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80003d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000440 <HAL_SPI_MspInit+0x8c>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a19      	ldr	r2, [pc, #100]	@ (8000440 <HAL_SPI_MspInit+0x8c>)
 80003da:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b17      	ldr	r3, [pc, #92]	@ (8000440 <HAL_SPI_MspInit+0x8c>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80003e8:	60fb      	str	r3, [r7, #12]
 80003ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ec:	4b14      	ldr	r3, [pc, #80]	@ (8000440 <HAL_SPI_MspInit+0x8c>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a13      	ldr	r2, [pc, #76]	@ (8000440 <HAL_SPI_MspInit+0x8c>)
 80003f2:	f043 0304 	orr.w	r3, r3, #4
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b11      	ldr	r3, [pc, #68]	@ (8000440 <HAL_SPI_MspInit+0x8c>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0304 	and.w	r3, r3, #4
 8000400:	60bb      	str	r3, [r7, #8]
 8000402:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000404:	23a0      	movs	r3, #160	@ 0xa0
 8000406:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000408:	2302      	movs	r3, #2
 800040a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800040c:	2303      	movs	r3, #3
 800040e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000410:	f107 0310 	add.w	r3, r7, #16
 8000414:	4619      	mov	r1, r3
 8000416:	480b      	ldr	r0, [pc, #44]	@ (8000444 <HAL_SPI_MspInit+0x90>)
 8000418:	f000 f9e8 	bl	80007ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800041c:	2340      	movs	r3, #64	@ 0x40
 800041e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000420:	2300      	movs	r3, #0
 8000422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000424:	2300      	movs	r3, #0
 8000426:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000428:	f107 0310 	add.w	r3, r7, #16
 800042c:	4619      	mov	r1, r3
 800042e:	4805      	ldr	r0, [pc, #20]	@ (8000444 <HAL_SPI_MspInit+0x90>)
 8000430:	f000 f9dc 	bl	80007ec <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000434:	bf00      	nop
 8000436:	3720      	adds	r7, #32
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	40013000 	.word	0x40013000
 8000440:	40021000 	.word	0x40021000
 8000444:	40010800 	.word	0x40010800

08000448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800044c:	bf00      	nop
 800044e:	e7fd      	b.n	800044c <NMI_Handler+0x4>

08000450 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000454:	bf00      	nop
 8000456:	e7fd      	b.n	8000454 <HardFault_Handler+0x4>

08000458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800045c:	bf00      	nop
 800045e:	e7fd      	b.n	800045c <MemManage_Handler+0x4>

08000460 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000464:	bf00      	nop
 8000466:	e7fd      	b.n	8000464 <BusFault_Handler+0x4>

08000468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800046c:	bf00      	nop
 800046e:	e7fd      	b.n	800046c <UsageFault_Handler+0x4>

08000470 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	bc80      	pop	{r7}
 800047a:	4770      	bx	lr

0800047c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr

08000488 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800048c:	bf00      	nop
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr

08000494 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000498:	f000 f87e 	bl	8000598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800049c:	bf00      	nop
 800049e:	bd80      	pop	{r7, pc}

080004a0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80004a4:	4802      	ldr	r0, [pc, #8]	@ (80004b0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80004a6:	f000 fc51 	bl	8000d4c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	20000ebc 	.word	0x20000ebc

080004b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr

080004c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004c0:	f7ff fff8 	bl	80004b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004c4:	480b      	ldr	r0, [pc, #44]	@ (80004f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80004c6:	490c      	ldr	r1, [pc, #48]	@ (80004f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80004c8:	4a0c      	ldr	r2, [pc, #48]	@ (80004fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80004ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004cc:	e002      	b.n	80004d4 <LoopCopyDataInit>

080004ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004d2:	3304      	adds	r3, #4

080004d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004d8:	d3f9      	bcc.n	80004ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004da:	4a09      	ldr	r2, [pc, #36]	@ (8000500 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80004dc:	4c09      	ldr	r4, [pc, #36]	@ (8000504 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004e0:	e001      	b.n	80004e6 <LoopFillZerobss>

080004e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004e4:	3204      	adds	r2, #4

080004e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004e8:	d3fb      	bcc.n	80004e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004ea:	f007 f8db 	bl	80076a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ee:	f7ff fe2d 	bl	800014c <main>
  bx lr
 80004f2:	4770      	bx	lr
  ldr r0, =_sdata
 80004f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004f8:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80004fc:	08007778 	.word	0x08007778
  ldr r2, =_sbss
 8000500:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000504:	200013b4 	.word	0x200013b4

08000508 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000508:	e7fe      	b.n	8000508 <ADC1_2_IRQHandler>
	...

0800050c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000510:	4b08      	ldr	r3, [pc, #32]	@ (8000534 <HAL_Init+0x28>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a07      	ldr	r2, [pc, #28]	@ (8000534 <HAL_Init+0x28>)
 8000516:	f043 0310 	orr.w	r3, r3, #16
 800051a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051c:	2003      	movs	r0, #3
 800051e:	f000 f923 	bl	8000768 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000522:	200f      	movs	r0, #15
 8000524:	f000 f808 	bl	8000538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000528:	f7ff ff12 	bl	8000350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800052c:	2300      	movs	r3, #0
}
 800052e:	4618      	mov	r0, r3
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40022000 	.word	0x40022000

08000538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000540:	4b12      	ldr	r3, [pc, #72]	@ (800058c <HAL_InitTick+0x54>)
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	4b12      	ldr	r3, [pc, #72]	@ (8000590 <HAL_InitTick+0x58>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	4619      	mov	r1, r3
 800054a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800054e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000552:	fbb2 f3f3 	udiv	r3, r2, r3
 8000556:	4618      	mov	r0, r3
 8000558:	f000 f93b 	bl	80007d2 <HAL_SYSTICK_Config>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000562:	2301      	movs	r3, #1
 8000564:	e00e      	b.n	8000584 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2b0f      	cmp	r3, #15
 800056a:	d80a      	bhi.n	8000582 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800056c:	2200      	movs	r2, #0
 800056e:	6879      	ldr	r1, [r7, #4]
 8000570:	f04f 30ff 	mov.w	r0, #4294967295
 8000574:	f000 f903 	bl	800077e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000578:	4a06      	ldr	r2, [pc, #24]	@ (8000594 <HAL_InitTick+0x5c>)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800057e:	2300      	movs	r3, #0
 8000580:	e000      	b.n	8000584 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000582:	2301      	movs	r3, #1
}
 8000584:	4618      	mov	r0, r3
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000000 	.word	0x20000000
 8000590:	20000008 	.word	0x20000008
 8000594:	20000004 	.word	0x20000004

08000598 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800059c:	4b05      	ldr	r3, [pc, #20]	@ (80005b4 <HAL_IncTick+0x1c>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	461a      	mov	r2, r3
 80005a2:	4b05      	ldr	r3, [pc, #20]	@ (80005b8 <HAL_IncTick+0x20>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4413      	add	r3, r2
 80005a8:	4a03      	ldr	r2, [pc, #12]	@ (80005b8 <HAL_IncTick+0x20>)
 80005aa:	6013      	str	r3, [r2, #0]
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr
 80005b4:	20000008 	.word	0x20000008
 80005b8:	200001f0 	.word	0x200001f0

080005bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  return uwTick;
 80005c0:	4b02      	ldr	r3, [pc, #8]	@ (80005cc <HAL_GetTick+0x10>)
 80005c2:	681b      	ldr	r3, [r3, #0]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	200001f0 	.word	0x200001f0

080005d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f003 0307 	and.w	r3, r3, #7
 80005de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <__NVIC_SetPriorityGrouping+0x44>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005e6:	68ba      	ldr	r2, [r7, #8]
 80005e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80005ec:	4013      	ands	r3, r2
 80005ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80005fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000602:	4a04      	ldr	r2, [pc, #16]	@ (8000614 <__NVIC_SetPriorityGrouping+0x44>)
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	60d3      	str	r3, [r2, #12]
}
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800061c:	4b04      	ldr	r3, [pc, #16]	@ (8000630 <__NVIC_GetPriorityGrouping+0x18>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	0a1b      	lsrs	r3, r3, #8
 8000622:	f003 0307 	and.w	r3, r3, #7
}
 8000626:	4618      	mov	r0, r3
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800063e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000642:	2b00      	cmp	r3, #0
 8000644:	db0b      	blt.n	800065e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	f003 021f 	and.w	r2, r3, #31
 800064c:	4906      	ldr	r1, [pc, #24]	@ (8000668 <__NVIC_EnableIRQ+0x34>)
 800064e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000652:	095b      	lsrs	r3, r3, #5
 8000654:	2001      	movs	r0, #1
 8000656:	fa00 f202 	lsl.w	r2, r0, r2
 800065a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr
 8000668:	e000e100 	.word	0xe000e100

0800066c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	6039      	str	r1, [r7, #0]
 8000676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067c:	2b00      	cmp	r3, #0
 800067e:	db0a      	blt.n	8000696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	b2da      	uxtb	r2, r3
 8000684:	490c      	ldr	r1, [pc, #48]	@ (80006b8 <__NVIC_SetPriority+0x4c>)
 8000686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068a:	0112      	lsls	r2, r2, #4
 800068c:	b2d2      	uxtb	r2, r2
 800068e:	440b      	add	r3, r1
 8000690:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000694:	e00a      	b.n	80006ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4908      	ldr	r1, [pc, #32]	@ (80006bc <__NVIC_SetPriority+0x50>)
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	f003 030f 	and.w	r3, r3, #15
 80006a2:	3b04      	subs	r3, #4
 80006a4:	0112      	lsls	r2, r2, #4
 80006a6:	b2d2      	uxtb	r2, r2
 80006a8:	440b      	add	r3, r1
 80006aa:	761a      	strb	r2, [r3, #24]
}
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	e000e100 	.word	0xe000e100
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b089      	sub	sp, #36	@ 0x24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	f003 0307 	and.w	r3, r3, #7
 80006d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d4:	69fb      	ldr	r3, [r7, #28]
 80006d6:	f1c3 0307 	rsb	r3, r3, #7
 80006da:	2b04      	cmp	r3, #4
 80006dc:	bf28      	it	cs
 80006de:	2304      	movcs	r3, #4
 80006e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	3304      	adds	r3, #4
 80006e6:	2b06      	cmp	r3, #6
 80006e8:	d902      	bls.n	80006f0 <NVIC_EncodePriority+0x30>
 80006ea:	69fb      	ldr	r3, [r7, #28]
 80006ec:	3b03      	subs	r3, #3
 80006ee:	e000      	b.n	80006f2 <NVIC_EncodePriority+0x32>
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	f04f 32ff 	mov.w	r2, #4294967295
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	fa02 f303 	lsl.w	r3, r2, r3
 80006fe:	43da      	mvns	r2, r3
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	401a      	ands	r2, r3
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000708:	f04f 31ff 	mov.w	r1, #4294967295
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	fa01 f303 	lsl.w	r3, r1, r3
 8000712:	43d9      	mvns	r1, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	4313      	orrs	r3, r2
         );
}
 800071a:	4618      	mov	r0, r3
 800071c:	3724      	adds	r7, #36	@ 0x24
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr

08000724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3b01      	subs	r3, #1
 8000730:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000734:	d301      	bcc.n	800073a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000736:	2301      	movs	r3, #1
 8000738:	e00f      	b.n	800075a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800073a:	4a0a      	ldr	r2, [pc, #40]	@ (8000764 <SysTick_Config+0x40>)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3b01      	subs	r3, #1
 8000740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000742:	210f      	movs	r1, #15
 8000744:	f04f 30ff 	mov.w	r0, #4294967295
 8000748:	f7ff ff90 	bl	800066c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800074c:	4b05      	ldr	r3, [pc, #20]	@ (8000764 <SysTick_Config+0x40>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000752:	4b04      	ldr	r3, [pc, #16]	@ (8000764 <SysTick_Config+0x40>)
 8000754:	2207      	movs	r2, #7
 8000756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000758:	2300      	movs	r3, #0
}
 800075a:	4618      	mov	r0, r3
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	e000e010 	.word	0xe000e010

08000768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f7ff ff2d 	bl	80005d0 <__NVIC_SetPriorityGrouping>
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800077e:	b580      	push	{r7, lr}
 8000780:	b086      	sub	sp, #24
 8000782:	af00      	add	r7, sp, #0
 8000784:	4603      	mov	r3, r0
 8000786:	60b9      	str	r1, [r7, #8]
 8000788:	607a      	str	r2, [r7, #4]
 800078a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000790:	f7ff ff42 	bl	8000618 <__NVIC_GetPriorityGrouping>
 8000794:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	68b9      	ldr	r1, [r7, #8]
 800079a:	6978      	ldr	r0, [r7, #20]
 800079c:	f7ff ff90 	bl	80006c0 <NVIC_EncodePriority>
 80007a0:	4602      	mov	r2, r0
 80007a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007a6:	4611      	mov	r1, r2
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ff5f 	bl	800066c <__NVIC_SetPriority>
}
 80007ae:	bf00      	nop
 80007b0:	3718      	adds	r7, #24
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b082      	sub	sp, #8
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	4603      	mov	r3, r0
 80007be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff35 	bl	8000634 <__NVIC_EnableIRQ>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f7ff ffa2 	bl	8000724 <SysTick_Config>
 80007e0:	4603      	mov	r3, r0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b08b      	sub	sp, #44	@ 0x2c
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007f6:	2300      	movs	r3, #0
 80007f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80007fa:	2300      	movs	r3, #0
 80007fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007fe:	e161      	b.n	8000ac4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000800:	2201      	movs	r2, #1
 8000802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000804:	fa02 f303 	lsl.w	r3, r2, r3
 8000808:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	69fa      	ldr	r2, [r7, #28]
 8000810:	4013      	ands	r3, r2
 8000812:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000814:	69ba      	ldr	r2, [r7, #24]
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	429a      	cmp	r2, r3
 800081a:	f040 8150 	bne.w	8000abe <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	4a97      	ldr	r2, [pc, #604]	@ (8000a80 <HAL_GPIO_Init+0x294>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d05e      	beq.n	80008e6 <HAL_GPIO_Init+0xfa>
 8000828:	4a95      	ldr	r2, [pc, #596]	@ (8000a80 <HAL_GPIO_Init+0x294>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d875      	bhi.n	800091a <HAL_GPIO_Init+0x12e>
 800082e:	4a95      	ldr	r2, [pc, #596]	@ (8000a84 <HAL_GPIO_Init+0x298>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d058      	beq.n	80008e6 <HAL_GPIO_Init+0xfa>
 8000834:	4a93      	ldr	r2, [pc, #588]	@ (8000a84 <HAL_GPIO_Init+0x298>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d86f      	bhi.n	800091a <HAL_GPIO_Init+0x12e>
 800083a:	4a93      	ldr	r2, [pc, #588]	@ (8000a88 <HAL_GPIO_Init+0x29c>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d052      	beq.n	80008e6 <HAL_GPIO_Init+0xfa>
 8000840:	4a91      	ldr	r2, [pc, #580]	@ (8000a88 <HAL_GPIO_Init+0x29c>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d869      	bhi.n	800091a <HAL_GPIO_Init+0x12e>
 8000846:	4a91      	ldr	r2, [pc, #580]	@ (8000a8c <HAL_GPIO_Init+0x2a0>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d04c      	beq.n	80008e6 <HAL_GPIO_Init+0xfa>
 800084c:	4a8f      	ldr	r2, [pc, #572]	@ (8000a8c <HAL_GPIO_Init+0x2a0>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d863      	bhi.n	800091a <HAL_GPIO_Init+0x12e>
 8000852:	4a8f      	ldr	r2, [pc, #572]	@ (8000a90 <HAL_GPIO_Init+0x2a4>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d046      	beq.n	80008e6 <HAL_GPIO_Init+0xfa>
 8000858:	4a8d      	ldr	r2, [pc, #564]	@ (8000a90 <HAL_GPIO_Init+0x2a4>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d85d      	bhi.n	800091a <HAL_GPIO_Init+0x12e>
 800085e:	2b12      	cmp	r3, #18
 8000860:	d82a      	bhi.n	80008b8 <HAL_GPIO_Init+0xcc>
 8000862:	2b12      	cmp	r3, #18
 8000864:	d859      	bhi.n	800091a <HAL_GPIO_Init+0x12e>
 8000866:	a201      	add	r2, pc, #4	@ (adr r2, 800086c <HAL_GPIO_Init+0x80>)
 8000868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800086c:	080008e7 	.word	0x080008e7
 8000870:	080008c1 	.word	0x080008c1
 8000874:	080008d3 	.word	0x080008d3
 8000878:	08000915 	.word	0x08000915
 800087c:	0800091b 	.word	0x0800091b
 8000880:	0800091b 	.word	0x0800091b
 8000884:	0800091b 	.word	0x0800091b
 8000888:	0800091b 	.word	0x0800091b
 800088c:	0800091b 	.word	0x0800091b
 8000890:	0800091b 	.word	0x0800091b
 8000894:	0800091b 	.word	0x0800091b
 8000898:	0800091b 	.word	0x0800091b
 800089c:	0800091b 	.word	0x0800091b
 80008a0:	0800091b 	.word	0x0800091b
 80008a4:	0800091b 	.word	0x0800091b
 80008a8:	0800091b 	.word	0x0800091b
 80008ac:	0800091b 	.word	0x0800091b
 80008b0:	080008c9 	.word	0x080008c9
 80008b4:	080008dd 	.word	0x080008dd
 80008b8:	4a76      	ldr	r2, [pc, #472]	@ (8000a94 <HAL_GPIO_Init+0x2a8>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d013      	beq.n	80008e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008be:	e02c      	b.n	800091a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	623b      	str	r3, [r7, #32]
          break;
 80008c6:	e029      	b.n	800091c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	3304      	adds	r3, #4
 80008ce:	623b      	str	r3, [r7, #32]
          break;
 80008d0:	e024      	b.n	800091c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	68db      	ldr	r3, [r3, #12]
 80008d6:	3308      	adds	r3, #8
 80008d8:	623b      	str	r3, [r7, #32]
          break;
 80008da:	e01f      	b.n	800091c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	330c      	adds	r3, #12
 80008e2:	623b      	str	r3, [r7, #32]
          break;
 80008e4:	e01a      	b.n	800091c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	689b      	ldr	r3, [r3, #8]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d102      	bne.n	80008f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008ee:	2304      	movs	r3, #4
 80008f0:	623b      	str	r3, [r7, #32]
          break;
 80008f2:	e013      	b.n	800091c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	689b      	ldr	r3, [r3, #8]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d105      	bne.n	8000908 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008fc:	2308      	movs	r3, #8
 80008fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	69fa      	ldr	r2, [r7, #28]
 8000904:	611a      	str	r2, [r3, #16]
          break;
 8000906:	e009      	b.n	800091c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000908:	2308      	movs	r3, #8
 800090a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	69fa      	ldr	r2, [r7, #28]
 8000910:	615a      	str	r2, [r3, #20]
          break;
 8000912:	e003      	b.n	800091c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]
          break;
 8000918:	e000      	b.n	800091c <HAL_GPIO_Init+0x130>
          break;
 800091a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800091c:	69bb      	ldr	r3, [r7, #24]
 800091e:	2bff      	cmp	r3, #255	@ 0xff
 8000920:	d801      	bhi.n	8000926 <HAL_GPIO_Init+0x13a>
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	e001      	b.n	800092a <HAL_GPIO_Init+0x13e>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3304      	adds	r3, #4
 800092a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	2bff      	cmp	r3, #255	@ 0xff
 8000930:	d802      	bhi.n	8000938 <HAL_GPIO_Init+0x14c>
 8000932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	e002      	b.n	800093e <HAL_GPIO_Init+0x152>
 8000938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800093a:	3b08      	subs	r3, #8
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	210f      	movs	r1, #15
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	fa01 f303 	lsl.w	r3, r1, r3
 800094c:	43db      	mvns	r3, r3
 800094e:	401a      	ands	r2, r3
 8000950:	6a39      	ldr	r1, [r7, #32]
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	fa01 f303 	lsl.w	r3, r1, r3
 8000958:	431a      	orrs	r2, r3
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000966:	2b00      	cmp	r3, #0
 8000968:	f000 80a9 	beq.w	8000abe <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800096c:	4b4a      	ldr	r3, [pc, #296]	@ (8000a98 <HAL_GPIO_Init+0x2ac>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	4a49      	ldr	r2, [pc, #292]	@ (8000a98 <HAL_GPIO_Init+0x2ac>)
 8000972:	f043 0301 	orr.w	r3, r3, #1
 8000976:	6193      	str	r3, [r2, #24]
 8000978:	4b47      	ldr	r3, [pc, #284]	@ (8000a98 <HAL_GPIO_Init+0x2ac>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000984:	4a45      	ldr	r2, [pc, #276]	@ (8000a9c <HAL_GPIO_Init+0x2b0>)
 8000986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000988:	089b      	lsrs	r3, r3, #2
 800098a:	3302      	adds	r3, #2
 800098c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000990:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000994:	f003 0303 	and.w	r3, r3, #3
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	220f      	movs	r2, #15
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
 80009a0:	43db      	mvns	r3, r3
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	4013      	ands	r3, r2
 80009a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a3d      	ldr	r2, [pc, #244]	@ (8000aa0 <HAL_GPIO_Init+0x2b4>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d00d      	beq.n	80009cc <HAL_GPIO_Init+0x1e0>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a3c      	ldr	r2, [pc, #240]	@ (8000aa4 <HAL_GPIO_Init+0x2b8>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d007      	beq.n	80009c8 <HAL_GPIO_Init+0x1dc>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a3b      	ldr	r2, [pc, #236]	@ (8000aa8 <HAL_GPIO_Init+0x2bc>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d101      	bne.n	80009c4 <HAL_GPIO_Init+0x1d8>
 80009c0:	2302      	movs	r3, #2
 80009c2:	e004      	b.n	80009ce <HAL_GPIO_Init+0x1e2>
 80009c4:	2303      	movs	r3, #3
 80009c6:	e002      	b.n	80009ce <HAL_GPIO_Init+0x1e2>
 80009c8:	2301      	movs	r3, #1
 80009ca:	e000      	b.n	80009ce <HAL_GPIO_Init+0x1e2>
 80009cc:	2300      	movs	r3, #0
 80009ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009d0:	f002 0203 	and.w	r2, r2, #3
 80009d4:	0092      	lsls	r2, r2, #2
 80009d6:	4093      	lsls	r3, r2
 80009d8:	68fa      	ldr	r2, [r7, #12]
 80009da:	4313      	orrs	r3, r2
 80009dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009de:	492f      	ldr	r1, [pc, #188]	@ (8000a9c <HAL_GPIO_Init+0x2b0>)
 80009e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e2:	089b      	lsrs	r3, r3, #2
 80009e4:	3302      	adds	r3, #2
 80009e6:	68fa      	ldr	r2, [r7, #12]
 80009e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d006      	beq.n	8000a06 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009f8:	4b2c      	ldr	r3, [pc, #176]	@ (8000aac <HAL_GPIO_Init+0x2c0>)
 80009fa:	689a      	ldr	r2, [r3, #8]
 80009fc:	492b      	ldr	r1, [pc, #172]	@ (8000aac <HAL_GPIO_Init+0x2c0>)
 80009fe:	69bb      	ldr	r3, [r7, #24]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	608b      	str	r3, [r1, #8]
 8000a04:	e006      	b.n	8000a14 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a06:	4b29      	ldr	r3, [pc, #164]	@ (8000aac <HAL_GPIO_Init+0x2c0>)
 8000a08:	689a      	ldr	r2, [r3, #8]
 8000a0a:	69bb      	ldr	r3, [r7, #24]
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	4927      	ldr	r1, [pc, #156]	@ (8000aac <HAL_GPIO_Init+0x2c0>)
 8000a10:	4013      	ands	r3, r2
 8000a12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d006      	beq.n	8000a2e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a20:	4b22      	ldr	r3, [pc, #136]	@ (8000aac <HAL_GPIO_Init+0x2c0>)
 8000a22:	68da      	ldr	r2, [r3, #12]
 8000a24:	4921      	ldr	r1, [pc, #132]	@ (8000aac <HAL_GPIO_Init+0x2c0>)
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	60cb      	str	r3, [r1, #12]
 8000a2c:	e006      	b.n	8000a3c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000aac <HAL_GPIO_Init+0x2c0>)
 8000a30:	68da      	ldr	r2, [r3, #12]
 8000a32:	69bb      	ldr	r3, [r7, #24]
 8000a34:	43db      	mvns	r3, r3
 8000a36:	491d      	ldr	r1, [pc, #116]	@ (8000aac <HAL_GPIO_Init+0x2c0>)
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d006      	beq.n	8000a56 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a48:	4b18      	ldr	r3, [pc, #96]	@ (8000aac <HAL_GPIO_Init+0x2c0>)
 8000a4a:	685a      	ldr	r2, [r3, #4]
 8000a4c:	4917      	ldr	r1, [pc, #92]	@ (8000aac <HAL_GPIO_Init+0x2c0>)
 8000a4e:	69bb      	ldr	r3, [r7, #24]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	604b      	str	r3, [r1, #4]
 8000a54:	e006      	b.n	8000a64 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a56:	4b15      	ldr	r3, [pc, #84]	@ (8000aac <HAL_GPIO_Init+0x2c0>)
 8000a58:	685a      	ldr	r2, [r3, #4]
 8000a5a:	69bb      	ldr	r3, [r7, #24]
 8000a5c:	43db      	mvns	r3, r3
 8000a5e:	4913      	ldr	r1, [pc, #76]	@ (8000aac <HAL_GPIO_Init+0x2c0>)
 8000a60:	4013      	ands	r3, r2
 8000a62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d01f      	beq.n	8000ab0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a70:	4b0e      	ldr	r3, [pc, #56]	@ (8000aac <HAL_GPIO_Init+0x2c0>)
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	490d      	ldr	r1, [pc, #52]	@ (8000aac <HAL_GPIO_Init+0x2c0>)
 8000a76:	69bb      	ldr	r3, [r7, #24]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	600b      	str	r3, [r1, #0]
 8000a7c:	e01f      	b.n	8000abe <HAL_GPIO_Init+0x2d2>
 8000a7e:	bf00      	nop
 8000a80:	10320000 	.word	0x10320000
 8000a84:	10310000 	.word	0x10310000
 8000a88:	10220000 	.word	0x10220000
 8000a8c:	10210000 	.word	0x10210000
 8000a90:	10120000 	.word	0x10120000
 8000a94:	10110000 	.word	0x10110000
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40010000 	.word	0x40010000
 8000aa0:	40010800 	.word	0x40010800
 8000aa4:	40010c00 	.word	0x40010c00
 8000aa8:	40011000 	.word	0x40011000
 8000aac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae0 <HAL_GPIO_Init+0x2f4>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	4909      	ldr	r1, [pc, #36]	@ (8000ae0 <HAL_GPIO_Init+0x2f4>)
 8000aba:	4013      	ands	r3, r2
 8000abc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aca:	fa22 f303 	lsr.w	r3, r2, r3
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	f47f ae96 	bne.w	8000800 <HAL_GPIO_Init+0x14>
  }
}
 8000ad4:	bf00      	nop
 8000ad6:	bf00      	nop
 8000ad8:	372c      	adds	r7, #44	@ 0x2c
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr
 8000ae0:	40010400 	.word	0x40010400

08000ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	460b      	mov	r3, r1
 8000aee:	807b      	strh	r3, [r7, #2]
 8000af0:	4613      	mov	r3, r2
 8000af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000af4:	787b      	ldrb	r3, [r7, #1]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d003      	beq.n	8000b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000afa:	887a      	ldrh	r2, [r7, #2]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b00:	e003      	b.n	8000b0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b02:	887b      	ldrh	r3, [r7, #2]
 8000b04:	041a      	lsls	r2, r3, #16
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	611a      	str	r2, [r3, #16]
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr

08000b14 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d101      	bne.n	8000b26 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	e0e8      	b.n	8000cf8 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d106      	bne.n	8000b40 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2200      	movs	r2, #0
 8000b36:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f006 fb00 	bl	8007140 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2203      	movs	r2, #3
 8000b44:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f002 fa79 	bl	800304a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6818      	ldr	r0, [r3, #0]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3304      	adds	r3, #4
 8000b60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b62:	f002 fa4f 	bl	8003004 <USB_CoreInit>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d005      	beq.n	8000b78 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2202      	movs	r2, #2
 8000b70:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000b74:	2301      	movs	r3, #1
 8000b76:	e0bf      	b.n	8000cf8 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f002 fa7d 	bl	800307e <USB_SetCurrentMode>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d005      	beq.n	8000b96 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e0b0      	b.n	8000cf8 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b96:	2300      	movs	r3, #0
 8000b98:	73fb      	strb	r3, [r7, #15]
 8000b9a:	e03e      	b.n	8000c1a <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000b9c:	7bfa      	ldrb	r2, [r7, #15]
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	4413      	add	r3, r2
 8000ba6:	00db      	lsls	r3, r3, #3
 8000ba8:	440b      	add	r3, r1
 8000baa:	3311      	adds	r3, #17
 8000bac:	2201      	movs	r2, #1
 8000bae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000bb0:	7bfa      	ldrb	r2, [r7, #15]
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	4413      	add	r3, r2
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	440b      	add	r3, r1
 8000bbe:	3310      	adds	r3, #16
 8000bc0:	7bfa      	ldrb	r2, [r7, #15]
 8000bc2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000bc4:	7bfa      	ldrb	r2, [r7, #15]
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	4413      	add	r3, r2
 8000bce:	00db      	lsls	r3, r3, #3
 8000bd0:	440b      	add	r3, r1
 8000bd2:	3313      	adds	r3, #19
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000bd8:	7bfa      	ldrb	r2, [r7, #15]
 8000bda:	6879      	ldr	r1, [r7, #4]
 8000bdc:	4613      	mov	r3, r2
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	4413      	add	r3, r2
 8000be2:	00db      	lsls	r3, r3, #3
 8000be4:	440b      	add	r3, r1
 8000be6:	3320      	adds	r3, #32
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000bec:	7bfa      	ldrb	r2, [r7, #15]
 8000bee:	6879      	ldr	r1, [r7, #4]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	4413      	add	r3, r2
 8000bf6:	00db      	lsls	r3, r3, #3
 8000bf8:	440b      	add	r3, r1
 8000bfa:	3324      	adds	r3, #36	@ 0x24
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	1c5a      	adds	r2, r3, #1
 8000c06:	4613      	mov	r3, r2
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	4413      	add	r3, r2
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	440b      	add	r3, r1
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
 8000c16:	3301      	adds	r3, #1
 8000c18:	73fb      	strb	r3, [r7, #15]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	791b      	ldrb	r3, [r3, #4]
 8000c1e:	7bfa      	ldrb	r2, [r7, #15]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d3bb      	bcc.n	8000b9c <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c24:	2300      	movs	r3, #0
 8000c26:	73fb      	strb	r3, [r7, #15]
 8000c28:	e044      	b.n	8000cb4 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c2a:	7bfa      	ldrb	r2, [r7, #15]
 8000c2c:	6879      	ldr	r1, [r7, #4]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	4413      	add	r3, r2
 8000c34:	00db      	lsls	r3, r3, #3
 8000c36:	440b      	add	r3, r1
 8000c38:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000c40:	7bfa      	ldrb	r2, [r7, #15]
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	4613      	mov	r3, r2
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	4413      	add	r3, r2
 8000c4a:	00db      	lsls	r3, r3, #3
 8000c4c:	440b      	add	r3, r1
 8000c4e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000c52:	7bfa      	ldrb	r2, [r7, #15]
 8000c54:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c56:	7bfa      	ldrb	r2, [r7, #15]
 8000c58:	6879      	ldr	r1, [r7, #4]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	4413      	add	r3, r2
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	440b      	add	r3, r1
 8000c64:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8000c68:	2200      	movs	r2, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000c6c:	7bfa      	ldrb	r2, [r7, #15]
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	4613      	mov	r3, r2
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	4413      	add	r3, r2
 8000c76:	00db      	lsls	r3, r3, #3
 8000c78:	440b      	add	r3, r1
 8000c7a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000c82:	7bfa      	ldrb	r2, [r7, #15]
 8000c84:	6879      	ldr	r1, [r7, #4]
 8000c86:	4613      	mov	r3, r2
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	4413      	add	r3, r2
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	440b      	add	r3, r1
 8000c90:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000c98:	7bfa      	ldrb	r2, [r7, #15]
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	4413      	add	r3, r2
 8000ca2:	00db      	lsls	r3, r3, #3
 8000ca4:	440b      	add	r3, r1
 8000ca6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	73fb      	strb	r3, [r7, #15]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	791b      	ldrb	r3, [r3, #4]
 8000cb8:	7bfa      	ldrb	r2, [r7, #15]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d3b5      	bcc.n	8000c2a <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6818      	ldr	r0, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cc8:	f002 f9e5 	bl	8003096 <USB_DevInit>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d005      	beq.n	8000cde <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00c      	b.n	8000cf8 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f004 fc64 	bl	80055be <USB_DevDisconnect>

  return HAL_OK;
 8000cf6:	2300      	movs	r3, #0
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d101      	bne.n	8000d16 <HAL_PCD_Start+0x16>
 8000d12:	2302      	movs	r3, #2
 8000d14:	e016      	b.n	8000d44 <HAL_PCD_Start+0x44>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2201      	movs	r2, #1
 8000d1a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f002 f97b 	bl	800301e <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000d28:	2101      	movs	r1, #1
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f006 fc7b 	bl	8007626 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f004 fc38 	bl	80055aa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8000d42:	2300      	movs	r3, #0
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b088      	sub	sp, #32
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f004 fc3a 	bl	80055d2 <USB_ReadInterrupts>
 8000d5e:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d003      	beq.n	8000d72 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f000 fb1a 	bl	80013a4 <PCD_EP_ISR_Handler>

    return;
 8000d70:	e119      	b.n	8000fa6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d013      	beq.n	8000da4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000d8e:	b292      	uxth	r2, r2
 8000d90:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f006 fa4e 	bl	8007236 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f000 f905 	bl	8000fac <HAL_PCD_SetAddress>

    return;
 8000da2:	e100      	b.n	8000fa6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d00c      	beq.n	8000dc8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000dc0:	b292      	uxth	r2, r2
 8000dc2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000dc6:	e0ee      	b.n	8000fa6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d00c      	beq.n	8000dec <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000de4:	b292      	uxth	r2, r2
 8000de6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000dea:	e0dc      	b.n	8000fa6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d027      	beq.n	8000e46 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f022 0204 	bic.w	r2, r2, #4
 8000e08:	b292      	uxth	r2, r2
 8000e0a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000e16:	b29a      	uxth	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f022 0208 	bic.w	r2, r2, #8
 8000e20:	b292      	uxth	r2, r2
 8000e22:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f006 fa3e 	bl	80072a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000e3e:	b292      	uxth	r2, r2
 8000e40:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000e44:	e0af      	b.n	8000fa6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	f000 8083 	beq.w	8000f58 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8000e52:	2300      	movs	r3, #0
 8000e54:	77fb      	strb	r3, [r7, #31]
 8000e56:	e010      	b.n	8000e7a <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	7ffb      	ldrb	r3, [r7, #31]
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	441a      	add	r2, r3
 8000e64:	7ffb      	ldrb	r3, [r7, #31]
 8000e66:	8812      	ldrh	r2, [r2, #0]
 8000e68:	b292      	uxth	r2, r2
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	3320      	adds	r3, #32
 8000e6e:	443b      	add	r3, r7
 8000e70:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8000e74:	7ffb      	ldrb	r3, [r7, #31]
 8000e76:	3301      	adds	r3, #1
 8000e78:	77fb      	strb	r3, [r7, #31]
 8000e7a:	7ffb      	ldrb	r3, [r7, #31]
 8000e7c:	2b07      	cmp	r3, #7
 8000e7e:	d9eb      	bls.n	8000e58 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f042 0201 	orr.w	r2, r2, #1
 8000e92:	b292      	uxth	r2, r2
 8000e94:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f022 0201 	bic.w	r2, r2, #1
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000eb0:	bf00      	nop
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d0f6      	beq.n	8000eb2 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000ed6:	b292      	uxth	r2, r2
 8000ed8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000edc:	2300      	movs	r3, #0
 8000ede:	77fb      	strb	r3, [r7, #31]
 8000ee0:	e00f      	b.n	8000f02 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000ee2:	7ffb      	ldrb	r3, [r7, #31]
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	6812      	ldr	r2, [r2, #0]
 8000ee8:	4611      	mov	r1, r2
 8000eea:	7ffa      	ldrb	r2, [r7, #31]
 8000eec:	0092      	lsls	r2, r2, #2
 8000eee:	440a      	add	r2, r1
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	3320      	adds	r3, #32
 8000ef4:	443b      	add	r3, r7
 8000ef6:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000efa:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000efc:	7ffb      	ldrb	r3, [r7, #31]
 8000efe:	3301      	adds	r3, #1
 8000f00:	77fb      	strb	r3, [r7, #31]
 8000f02:	7ffb      	ldrb	r3, [r7, #31]
 8000f04:	2b07      	cmp	r3, #7
 8000f06:	d9ec      	bls.n	8000ee2 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f042 0208 	orr.w	r2, r2, #8
 8000f1a:	b292      	uxth	r2, r2
 8000f1c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000f32:	b292      	uxth	r2, r2
 8000f34:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f042 0204 	orr.w	r2, r2, #4
 8000f4a:	b292      	uxth	r2, r2
 8000f4c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f006 f98f 	bl	8007274 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000f56:	e026      	b.n	8000fa6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d00f      	beq.n	8000f82 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000f74:	b292      	uxth	r2, r2
 8000f76:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f006 f94d 	bl	800721a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000f80:	e011      	b.n	8000fa6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d00c      	beq.n	8000fa6 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000fa4:	bf00      	nop
  }
}
 8000fa6:	3720      	adds	r7, #32
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d101      	bne.n	8000fc6 <HAL_PCD_SetAddress+0x1a>
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	e012      	b.n	8000fec <HAL_PCD_SetAddress+0x40>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	78fa      	ldrb	r2, [r7, #3]
 8000fd2:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	78fa      	ldrb	r2, [r7, #3]
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f004 fad1 	bl	8005584 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8000fea:	2300      	movs	r3, #0
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	4611      	mov	r1, r2
 8001000:	461a      	mov	r2, r3
 8001002:	4603      	mov	r3, r0
 8001004:	70fb      	strb	r3, [r7, #3]
 8001006:	460b      	mov	r3, r1
 8001008:	803b      	strh	r3, [r7, #0]
 800100a:	4613      	mov	r3, r2
 800100c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800100e:	2300      	movs	r3, #0
 8001010:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001012:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001016:	2b00      	cmp	r3, #0
 8001018:	da0e      	bge.n	8001038 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800101a:	78fb      	ldrb	r3, [r7, #3]
 800101c:	f003 0207 	and.w	r2, r3, #7
 8001020:	4613      	mov	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4413      	add	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	3310      	adds	r3, #16
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2201      	movs	r2, #1
 8001034:	705a      	strb	r2, [r3, #1]
 8001036:	e00e      	b.n	8001056 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001038:	78fb      	ldrb	r3, [r7, #3]
 800103a:	f003 0207 	and.w	r2, r3, #7
 800103e:	4613      	mov	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	4413      	add	r3, r2
 800104e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2200      	movs	r2, #0
 8001054:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001056:	78fb      	ldrb	r3, [r7, #3]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	b2da      	uxtb	r2, r3
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001062:	883a      	ldrh	r2, [r7, #0]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	78ba      	ldrb	r2, [r7, #2]
 800106c:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800106e:	78bb      	ldrb	r3, [r7, #2]
 8001070:	2b02      	cmp	r3, #2
 8001072:	d102      	bne.n	800107a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2200      	movs	r2, #0
 8001078:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001080:	2b01      	cmp	r3, #1
 8001082:	d101      	bne.n	8001088 <HAL_PCD_EP_Open+0x94>
 8001084:	2302      	movs	r3, #2
 8001086:	e00e      	b.n	80010a6 <HAL_PCD_EP_Open+0xb2>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2201      	movs	r2, #1
 800108c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	68f9      	ldr	r1, [r7, #12]
 8001096:	4618      	mov	r0, r3
 8001098:	f002 f81a 	bl	80030d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80010a4:	7afb      	ldrb	r3, [r7, #11]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b084      	sub	sp, #16
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
 80010b6:	460b      	mov	r3, r1
 80010b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80010ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	da0e      	bge.n	80010e0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010c2:	78fb      	ldrb	r3, [r7, #3]
 80010c4:	f003 0207 	and.w	r2, r3, #7
 80010c8:	4613      	mov	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	3310      	adds	r3, #16
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2201      	movs	r2, #1
 80010dc:	705a      	strb	r2, [r3, #1]
 80010de:	e00e      	b.n	80010fe <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010e0:	78fb      	ldrb	r3, [r7, #3]
 80010e2:	f003 0207 	and.w	r2, r3, #7
 80010e6:	4613      	mov	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4413      	add	r3, r2
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2200      	movs	r2, #0
 80010fc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80010fe:	78fb      	ldrb	r3, [r7, #3]
 8001100:	f003 0307 	and.w	r3, r3, #7
 8001104:	b2da      	uxtb	r2, r3
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001110:	2b01      	cmp	r3, #1
 8001112:	d101      	bne.n	8001118 <HAL_PCD_EP_Close+0x6a>
 8001114:	2302      	movs	r3, #2
 8001116:	e00e      	b.n	8001136 <HAL_PCD_EP_Close+0x88>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2201      	movs	r2, #1
 800111c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	68f9      	ldr	r1, [r7, #12]
 8001126:	4618      	mov	r0, r3
 8001128:	f002 fb92 	bl	8003850 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b086      	sub	sp, #24
 8001142:	af00      	add	r7, sp, #0
 8001144:	60f8      	str	r0, [r7, #12]
 8001146:	607a      	str	r2, [r7, #4]
 8001148:	603b      	str	r3, [r7, #0]
 800114a:	460b      	mov	r3, r1
 800114c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800114e:	7afb      	ldrb	r3, [r7, #11]
 8001150:	f003 0207 	and.w	r2, r3, #7
 8001154:	4613      	mov	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001160:	68fa      	ldr	r2, [r7, #12]
 8001162:	4413      	add	r3, r2
 8001164:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	683a      	ldr	r2, [r7, #0]
 8001170:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	2200      	movs	r2, #0
 8001176:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	2200      	movs	r2, #0
 800117c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800117e:	7afb      	ldrb	r3, [r7, #11]
 8001180:	f003 0307 	and.w	r3, r3, #7
 8001184:	b2da      	uxtb	r2, r3
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	6979      	ldr	r1, [r7, #20]
 8001190:	4618      	mov	r0, r3
 8001192:	f002 fd49 	bl	8003c28 <USB_EPStartXfer>

  return HAL_OK;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	f003 0207 	and.w	r2, r3, #7
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	4613      	mov	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	440b      	add	r3, r1
 80011be:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80011c2:	681b      	ldr	r3, [r3, #0]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr

080011ce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b086      	sub	sp, #24
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	60f8      	str	r0, [r7, #12]
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	603b      	str	r3, [r7, #0]
 80011da:	460b      	mov	r3, r1
 80011dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011de:	7afb      	ldrb	r3, [r7, #11]
 80011e0:	f003 0207 	and.w	r2, r3, #7
 80011e4:	4613      	mov	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	3310      	adds	r3, #16
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	4413      	add	r3, r2
 80011f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	2201      	movs	r2, #1
 8001204:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	2200      	movs	r2, #0
 8001212:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	2201      	movs	r2, #1
 8001218:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800121a:	7afb      	ldrb	r3, [r7, #11]
 800121c:	f003 0307 	and.w	r3, r3, #7
 8001220:	b2da      	uxtb	r2, r3
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	6979      	ldr	r1, [r7, #20]
 800122c:	4618      	mov	r0, r3
 800122e:	f002 fcfb 	bl	8003c28 <USB_EPStartXfer>

  return HAL_OK;
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001248:	78fb      	ldrb	r3, [r7, #3]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	7912      	ldrb	r2, [r2, #4]
 8001252:	4293      	cmp	r3, r2
 8001254:	d901      	bls.n	800125a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e04c      	b.n	80012f4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800125a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800125e:	2b00      	cmp	r3, #0
 8001260:	da0e      	bge.n	8001280 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001262:	78fb      	ldrb	r3, [r7, #3]
 8001264:	f003 0207 	and.w	r2, r3, #7
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	3310      	adds	r3, #16
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2201      	movs	r2, #1
 800127c:	705a      	strb	r2, [r3, #1]
 800127e:	e00c      	b.n	800129a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001280:	78fa      	ldrb	r2, [r7, #3]
 8001282:	4613      	mov	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2200      	movs	r2, #0
 8001298:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2201      	movs	r2, #1
 800129e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012a0:	78fb      	ldrb	r3, [r7, #3]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d101      	bne.n	80012ba <HAL_PCD_EP_SetStall+0x7e>
 80012b6:	2302      	movs	r3, #2
 80012b8:	e01c      	b.n	80012f4 <HAL_PCD_EP_SetStall+0xb8>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2201      	movs	r2, #1
 80012be:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	68f9      	ldr	r1, [r7, #12]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f004 f85e 	bl	800538a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80012ce:	78fb      	ldrb	r3, [r7, #3]
 80012d0:	f003 0307 	and.w	r3, r3, #7
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d108      	bne.n	80012ea <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80012e2:	4619      	mov	r1, r3
 80012e4:	4610      	mov	r0, r2
 80012e6:	f004 f983 	bl	80055f0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001308:	78fb      	ldrb	r3, [r7, #3]
 800130a:	f003 030f 	and.w	r3, r3, #15
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	7912      	ldrb	r2, [r2, #4]
 8001312:	4293      	cmp	r3, r2
 8001314:	d901      	bls.n	800131a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e040      	b.n	800139c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800131a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800131e:	2b00      	cmp	r3, #0
 8001320:	da0e      	bge.n	8001340 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001322:	78fb      	ldrb	r3, [r7, #3]
 8001324:	f003 0207 	and.w	r2, r3, #7
 8001328:	4613      	mov	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4413      	add	r3, r2
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	3310      	adds	r3, #16
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2201      	movs	r2, #1
 800133c:	705a      	strb	r2, [r3, #1]
 800133e:	e00e      	b.n	800135e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001340:	78fb      	ldrb	r3, [r7, #3]
 8001342:	f003 0207 	and.w	r2, r3, #7
 8001346:	4613      	mov	r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4413      	add	r3, r2
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2200      	movs	r2, #0
 800135c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2200      	movs	r2, #0
 8001362:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001364:	78fb      	ldrb	r3, [r7, #3]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	b2da      	uxtb	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001376:	2b01      	cmp	r3, #1
 8001378:	d101      	bne.n	800137e <HAL_PCD_EP_ClrStall+0x82>
 800137a:	2302      	movs	r3, #2
 800137c:	e00e      	b.n	800139c <HAL_PCD_EP_ClrStall+0xa0>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2201      	movs	r2, #1
 8001382:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	68f9      	ldr	r1, [r7, #12]
 800138c:	4618      	mov	r0, r3
 800138e:	f004 f84c 	bl	800542a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b096      	sub	sp, #88	@ 0x58
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80013ac:	e3bb      	b.n	8001b26 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80013b6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80013ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	f003 030f 	and.w	r3, r3, #15
 80013c4:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80013c8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f040 8175 	bne.w	80016bc <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80013d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80013d6:	f003 0310 	and.w	r3, r3, #16
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d14e      	bne.n	800147c <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80013ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80013ee:	81fb      	strh	r3, [r7, #14]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	89fb      	ldrh	r3, [r7, #14]
 80013f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80013fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80013fe:	b29b      	uxth	r3, r3
 8001400:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3310      	adds	r3, #16
 8001406:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001410:	b29b      	uxth	r3, r3
 8001412:	461a      	mov	r2, r3
 8001414:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	4413      	add	r3, r2
 800141c:	3302      	adds	r3, #2
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	6812      	ldr	r2, [r2, #0]
 8001424:	4413      	add	r3, r2
 8001426:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001430:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001432:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001434:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001436:	695a      	ldr	r2, [r3, #20]
 8001438:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800143a:	69db      	ldr	r3, [r3, #28]
 800143c:	441a      	add	r2, r3
 800143e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001440:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001442:	2100      	movs	r1, #0
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f005 fece 	bl	80071e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	7b5b      	ldrb	r3, [r3, #13]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	f000 8368 	beq.w	8001b26 <PCD_EP_ISR_Handler+0x782>
 8001456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	2b00      	cmp	r3, #0
 800145c:	f040 8363 	bne.w	8001b26 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	7b5b      	ldrb	r3, [r3, #13]
 8001464:	b2db      	uxtb	r3, r3
 8001466:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800146a:	b2da      	uxtb	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	735a      	strb	r2, [r3, #13]
 800147a:	e354      	b.n	8001b26 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001482:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800148e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001492:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001496:	2b00      	cmp	r3, #0
 8001498:	d034      	beq.n	8001504 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	461a      	mov	r2, r3
 80014a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	4413      	add	r3, r2
 80014ae:	3306      	adds	r3, #6
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	6812      	ldr	r2, [r2, #0]
 80014b6:	4413      	add	r3, r2
 80014b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80014bc:	881b      	ldrh	r3, [r3, #0]
 80014be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80014c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014c4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6818      	ldr	r0, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80014d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014d2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80014d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014d6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80014d8:	b29b      	uxth	r3, r3
 80014da:	f004 f8da 	bl	8005692 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80014ea:	4013      	ands	r3, r2
 80014ec:	823b      	strh	r3, [r7, #16]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	8a3a      	ldrh	r2, [r7, #16]
 80014f4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80014f8:	b292      	uxth	r2, r2
 80014fa:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f005 fe45 	bl	800718c <HAL_PCD_SetupStageCallback>
 8001502:	e310      	b.n	8001b26 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001504:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001508:	2b00      	cmp	r3, #0
 800150a:	f280 830c 	bge.w	8001b26 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	b29a      	uxth	r2, r3
 8001516:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800151a:	4013      	ands	r3, r2
 800151c:	83fb      	strh	r3, [r7, #30]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	8bfa      	ldrh	r2, [r7, #30]
 8001524:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001528:	b292      	uxth	r2, r2
 800152a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001534:	b29b      	uxth	r3, r3
 8001536:	461a      	mov	r2, r3
 8001538:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	4413      	add	r3, r2
 8001540:	3306      	adds	r3, #6
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	6812      	ldr	r2, [r2, #0]
 8001548:	4413      	add	r3, r2
 800154a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001554:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001556:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001558:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800155a:	69db      	ldr	r3, [r3, #28]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d019      	beq.n	8001594 <PCD_EP_ISR_Handler+0x1f0>
 8001560:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001562:	695b      	ldr	r3, [r3, #20]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d015      	beq.n	8001594 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6818      	ldr	r0, [r3, #0]
 800156c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800156e:	6959      	ldr	r1, [r3, #20]
 8001570:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001572:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001574:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001576:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001578:	b29b      	uxth	r3, r3
 800157a:	f004 f88a 	bl	8005692 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800157e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001580:	695a      	ldr	r2, [r3, #20]
 8001582:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	441a      	add	r2, r3
 8001588:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800158a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800158c:	2100      	movs	r1, #0
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f005 fe0e 	bl	80071b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800159e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80015a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f040 82bd 	bne.w	8001b26 <PCD_EP_ISR_Handler+0x782>
 80015ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80015b0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80015b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80015b8:	f000 82b5 	beq.w	8001b26 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	61bb      	str	r3, [r7, #24]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	461a      	mov	r2, r3
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	4413      	add	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	801a      	strh	r2, [r3, #0]
 80015ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80015f2:	d91d      	bls.n	8001630 <PCD_EP_ISR_Handler+0x28c>
 80015f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	095b      	lsrs	r3, r3, #5
 80015fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80015fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	f003 031f 	and.w	r3, r3, #31
 8001604:	2b00      	cmp	r3, #0
 8001606:	d102      	bne.n	800160e <PCD_EP_ISR_Handler+0x26a>
 8001608:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800160a:	3b01      	subs	r3, #1
 800160c:	647b      	str	r3, [r7, #68]	@ 0x44
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	b29a      	uxth	r2, r3
 8001614:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001616:	b29b      	uxth	r3, r3
 8001618:	029b      	lsls	r3, r3, #10
 800161a:	b29b      	uxth	r3, r3
 800161c:	4313      	orrs	r3, r2
 800161e:	b29b      	uxth	r3, r3
 8001620:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001624:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001628:	b29a      	uxth	r2, r3
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	801a      	strh	r2, [r3, #0]
 800162e:	e026      	b.n	800167e <PCD_EP_ISR_Handler+0x2da>
 8001630:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d10a      	bne.n	800164e <PCD_EP_ISR_Handler+0x2aa>
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	b29b      	uxth	r3, r3
 800163e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001642:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001646:	b29a      	uxth	r2, r3
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	801a      	strh	r2, [r3, #0]
 800164c:	e017      	b.n	800167e <PCD_EP_ISR_Handler+0x2da>
 800164e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	085b      	lsrs	r3, r3, #1
 8001654:	647b      	str	r3, [r7, #68]	@ 0x44
 8001656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b00      	cmp	r3, #0
 8001660:	d002      	beq.n	8001668 <PCD_EP_ISR_Handler+0x2c4>
 8001662:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001664:	3301      	adds	r3, #1
 8001666:	647b      	str	r3, [r7, #68]	@ 0x44
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	b29a      	uxth	r2, r3
 800166e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001670:	b29b      	uxth	r3, r3
 8001672:	029b      	lsls	r3, r3, #10
 8001674:	b29b      	uxth	r3, r3
 8001676:	4313      	orrs	r3, r2
 8001678:	b29a      	uxth	r2, r3
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	b29b      	uxth	r3, r3
 8001686:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800168a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800168e:	827b      	strh	r3, [r7, #18]
 8001690:	8a7b      	ldrh	r3, [r7, #18]
 8001692:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001696:	827b      	strh	r3, [r7, #18]
 8001698:	8a7b      	ldrh	r3, [r7, #18]
 800169a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800169e:	827b      	strh	r3, [r7, #18]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	8a7b      	ldrh	r3, [r7, #18]
 80016a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80016aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80016ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	8013      	strh	r3, [r2, #0]
 80016ba:	e234      	b.n	8001b26 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80016d0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f280 80fc 	bge.w	80018d2 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	461a      	mov	r2, r3
 80016e0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80016f0:	4013      	ands	r3, r2
 80016f2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	461a      	mov	r2, r3
 80016fc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001708:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800170c:	b292      	uxth	r2, r2
 800170e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001710:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	4413      	add	r3, r2
 8001724:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001726:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001728:	7b1b      	ldrb	r3, [r3, #12]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d125      	bne.n	800177a <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001736:	b29b      	uxth	r3, r3
 8001738:	461a      	mov	r2, r3
 800173a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	4413      	add	r3, r2
 8001742:	3306      	adds	r3, #6
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	6812      	ldr	r2, [r2, #0]
 800174a:	4413      	add	r3, r2
 800174c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001756:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800175a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 8092 	beq.w	8001888 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6818      	ldr	r0, [r3, #0]
 8001768:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800176a:	6959      	ldr	r1, [r3, #20]
 800176c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800176e:	88da      	ldrh	r2, [r3, #6]
 8001770:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001774:	f003 ff8d 	bl	8005692 <USB_ReadPMA>
 8001778:	e086      	b.n	8001888 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800177a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800177c:	78db      	ldrb	r3, [r3, #3]
 800177e:	2b02      	cmp	r3, #2
 8001780:	d10a      	bne.n	8001798 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001782:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001786:	461a      	mov	r2, r3
 8001788:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f9d9 	bl	8001b42 <HAL_PCD_EP_DB_Receive>
 8001790:	4603      	mov	r3, r0
 8001792:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001796:	e077      	b.n	8001888 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80017ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80017b2:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	461a      	mov	r2, r3
 80017bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	441a      	add	r2, r3
 80017c4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80017c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80017cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80017d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017d4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80017d8:	b29b      	uxth	r3, r3
 80017da:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	461a      	mov	r2, r3
 80017e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d024      	beq.n	8001840 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80017fe:	b29b      	uxth	r3, r3
 8001800:	461a      	mov	r2, r3
 8001802:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	4413      	add	r3, r2
 800180a:	3302      	adds	r3, #2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6812      	ldr	r2, [r2, #0]
 8001812:	4413      	add	r3, r2
 8001814:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800181e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001822:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001826:	2b00      	cmp	r3, #0
 8001828:	d02e      	beq.n	8001888 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6818      	ldr	r0, [r3, #0]
 800182e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001830:	6959      	ldr	r1, [r3, #20]
 8001832:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001834:	891a      	ldrh	r2, [r3, #8]
 8001836:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800183a:	f003 ff2a 	bl	8005692 <USB_ReadPMA>
 800183e:	e023      	b.n	8001888 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001848:	b29b      	uxth	r3, r3
 800184a:	461a      	mov	r2, r3
 800184c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	4413      	add	r3, r2
 8001854:	3306      	adds	r3, #6
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	6812      	ldr	r2, [r2, #0]
 800185c:	4413      	add	r3, r2
 800185e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001868:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800186c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001870:	2b00      	cmp	r3, #0
 8001872:	d009      	beq.n	8001888 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6818      	ldr	r0, [r3, #0]
 8001878:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800187a:	6959      	ldr	r1, [r3, #20]
 800187c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800187e:	895a      	ldrh	r2, [r3, #10]
 8001880:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001884:	f003 ff05 	bl	8005692 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001888:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800188a:	69da      	ldr	r2, [r3, #28]
 800188c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001890:	441a      	add	r2, r3
 8001892:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001894:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001896:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001898:	695a      	ldr	r2, [r3, #20]
 800189a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800189e:	441a      	add	r2, r3
 80018a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018a2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80018a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <PCD_EP_ISR_Handler+0x514>
 80018ac:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80018b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d206      	bcs.n	80018c6 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80018b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4619      	mov	r1, r3
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f005 fc76 	bl	80071b0 <HAL_PCD_DataOutStageCallback>
 80018c4:	e005      	b.n	80018d2 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80018cc:	4618      	mov	r0, r3
 80018ce:	f002 f9ab 	bl	8003c28 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80018d2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80018d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f000 8123 	beq.w	8001b26 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80018e0:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	3310      	adds	r3, #16
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	b29b      	uxth	r3, r3
 8001906:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800190a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800190e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	441a      	add	r2, r3
 8001920:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800192c:	b29b      	uxth	r3, r3
 800192e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001930:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001932:	78db      	ldrb	r3, [r3, #3]
 8001934:	2b01      	cmp	r3, #1
 8001936:	f040 80a2 	bne.w	8001a7e <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 800193a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001940:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001942:	7b1b      	ldrb	r3, [r3, #12]
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 8093 	beq.w	8001a70 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800194a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800194e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001952:	2b00      	cmp	r3, #0
 8001954:	d046      	beq.n	80019e4 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001956:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001958:	785b      	ldrb	r3, [r3, #1]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d126      	bne.n	80019ac <PCD_EP_ISR_Handler+0x608>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	627b      	str	r3, [r7, #36]	@ 0x24
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800196c:	b29b      	uxth	r3, r3
 800196e:	461a      	mov	r2, r3
 8001970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001972:	4413      	add	r3, r2
 8001974:	627b      	str	r3, [r7, #36]	@ 0x24
 8001976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	011a      	lsls	r2, r3, #4
 800197c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197e:	4413      	add	r3, r2
 8001980:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001984:	623b      	str	r3, [r7, #32]
 8001986:	6a3b      	ldr	r3, [r7, #32]
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	b29b      	uxth	r3, r3
 800198c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001990:	b29a      	uxth	r2, r3
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	801a      	strh	r2, [r3, #0]
 8001996:	6a3b      	ldr	r3, [r7, #32]
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	b29b      	uxth	r3, r3
 800199c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	6a3b      	ldr	r3, [r7, #32]
 80019a8:	801a      	strh	r2, [r3, #0]
 80019aa:	e061      	b.n	8001a70 <PCD_EP_ISR_Handler+0x6cc>
 80019ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019ae:	785b      	ldrb	r3, [r3, #1]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d15d      	bne.n	8001a70 <PCD_EP_ISR_Handler+0x6cc>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	461a      	mov	r2, r3
 80019c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019c8:	4413      	add	r3, r2
 80019ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	011a      	lsls	r2, r3, #4
 80019d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019d4:	4413      	add	r3, r2
 80019d6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80019da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019de:	2200      	movs	r2, #0
 80019e0:	801a      	strh	r2, [r3, #0]
 80019e2:	e045      	b.n	8001a70 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019ec:	785b      	ldrb	r3, [r3, #1]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d126      	bne.n	8001a40 <PCD_EP_ISR_Handler+0x69c>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	461a      	mov	r2, r3
 8001a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a06:	4413      	add	r3, r2
 8001a08:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	011a      	lsls	r2, r3, #4
 8001a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a12:	4413      	add	r3, r2
 8001a14:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001a18:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a28:	801a      	strh	r2, [r3, #0]
 8001a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a3c:	801a      	strh	r2, [r3, #0]
 8001a3e:	e017      	b.n	8001a70 <PCD_EP_ISR_Handler+0x6cc>
 8001a40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a42:	785b      	ldrb	r3, [r3, #1]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d113      	bne.n	8001a70 <PCD_EP_ISR_Handler+0x6cc>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	461a      	mov	r2, r3
 8001a54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a56:	4413      	add	r3, r2
 8001a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	011a      	lsls	r2, r3, #4
 8001a60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a62:	4413      	add	r3, r2
 8001a64:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001a68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	4619      	mov	r1, r3
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f005 fbb5 	bl	80071e6 <HAL_PCD_DataInStageCallback>
 8001a7c:	e053      	b.n	8001b26 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001a7e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d146      	bne.n	8001b18 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	461a      	mov	r2, r3
 8001a96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	3302      	adds	r3, #2
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	6812      	ldr	r2, [r2, #0]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001aac:	881b      	ldrh	r3, [r3, #0]
 8001aae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ab2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ab8:	699a      	ldr	r2, [r3, #24]
 8001aba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d907      	bls.n	8001ad2 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8001ac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ac4:	699a      	ldr	r2, [r3, #24]
 8001ac6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001aca:	1ad2      	subs	r2, r2, r3
 8001acc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ace:	619a      	str	r2, [r3, #24]
 8001ad0:	e002      	b.n	8001ad8 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8001ad2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d106      	bne.n	8001aee <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f005 fb7d 	bl	80071e6 <HAL_PCD_DataInStageCallback>
 8001aec:	e01b      	b.n	8001b26 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001aee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001af0:	695a      	ldr	r2, [r3, #20]
 8001af2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001af6:	441a      	add	r2, r3
 8001af8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001afa:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001afc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001afe:	69da      	ldr	r2, [r3, #28]
 8001b00:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001b04:	441a      	add	r2, r3
 8001b06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b08:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001b10:	4618      	mov	r0, r3
 8001b12:	f002 f889 	bl	8003c28 <USB_EPStartXfer>
 8001b16:	e006      	b.n	8001b26 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001b18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 f91b 	bl	8001d5c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	b21b      	sxth	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f6ff ac3b 	blt.w	80013ae <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3758      	adds	r7, #88	@ 0x58
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b088      	sub	sp, #32
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	60f8      	str	r0, [r7, #12]
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b50:	88fb      	ldrh	r3, [r7, #6]
 8001b52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d07e      	beq.n	8001c58 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	461a      	mov	r2, r3
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	4413      	add	r3, r2
 8001b6e:	3302      	adds	r3, #2
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	6812      	ldr	r2, [r2, #0]
 8001b76:	4413      	add	r3, r2
 8001b78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b82:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	699a      	ldr	r2, [r3, #24]
 8001b88:	8b7b      	ldrh	r3, [r7, #26]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d306      	bcc.n	8001b9c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	699a      	ldr	r2, [r3, #24]
 8001b92:	8b7b      	ldrh	r3, [r7, #26]
 8001b94:	1ad2      	subs	r2, r2, r3
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	619a      	str	r2, [r3, #24]
 8001b9a:	e002      	b.n	8001ba2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d123      	bne.n	8001bf2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001bc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001bc4:	833b      	strh	r3, [r7, #24]
 8001bc6:	8b3b      	ldrh	r3, [r7, #24]
 8001bc8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001bcc:	833b      	strh	r3, [r7, #24]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	441a      	add	r2, r3
 8001bdc:	8b3b      	ldrh	r3, [r7, #24]
 8001bde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001be2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001be6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001bf2:	88fb      	ldrh	r3, [r7, #6]
 8001bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d01f      	beq.n	8001c3c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	461a      	mov	r2, r3
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c16:	82fb      	strh	r3, [r7, #22]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	441a      	add	r2, r3
 8001c26:	8afb      	ldrh	r3, [r7, #22]
 8001c28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001c2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001c30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c34:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001c3c:	8b7b      	ldrh	r3, [r7, #26]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 8087 	beq.w	8001d52 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6818      	ldr	r0, [r3, #0]
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	6959      	ldr	r1, [r3, #20]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	891a      	ldrh	r2, [r3, #8]
 8001c50:	8b7b      	ldrh	r3, [r7, #26]
 8001c52:	f003 fd1e 	bl	8005692 <USB_ReadPMA>
 8001c56:	e07c      	b.n	8001d52 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	461a      	mov	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3306      	adds	r3, #6
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	4413      	add	r3, r2
 8001c76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c80:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	699a      	ldr	r2, [r3, #24]
 8001c86:	8b7b      	ldrh	r3, [r7, #26]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d306      	bcc.n	8001c9a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	699a      	ldr	r2, [r3, #24]
 8001c90:	8b7b      	ldrh	r3, [r7, #26]
 8001c92:	1ad2      	subs	r2, r2, r3
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	619a      	str	r2, [r3, #24]
 8001c98:	e002      	b.n	8001ca0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d123      	bne.n	8001cf0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001cc2:	83fb      	strh	r3, [r7, #30]
 8001cc4:	8bfb      	ldrh	r3, [r7, #30]
 8001cc6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001cca:	83fb      	strh	r3, [r7, #30]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	441a      	add	r2, r3
 8001cda:	8bfb      	ldrh	r3, [r7, #30]
 8001cdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001ce0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001ce4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ce8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001cf0:	88fb      	ldrh	r3, [r7, #6]
 8001cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d11f      	bne.n	8001d3a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001d10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d14:	83bb      	strh	r3, [r7, #28]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	441a      	add	r2, r3
 8001d24:	8bbb      	ldrh	r3, [r7, #28]
 8001d26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001d2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001d2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d32:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001d3a:	8b7b      	ldrh	r3, [r7, #26]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d008      	beq.n	8001d52 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	6959      	ldr	r1, [r3, #20]
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	895a      	ldrh	r2, [r3, #10]
 8001d4c:	8b7b      	ldrh	r3, [r7, #26]
 8001d4e:	f003 fca0 	bl	8005692 <USB_ReadPMA>
    }
  }

  return count;
 8001d52:	8b7b      	ldrh	r3, [r7, #26]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3720      	adds	r7, #32
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b0a4      	sub	sp, #144	@ 0x90
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	4613      	mov	r3, r2
 8001d68:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d6a:	88fb      	ldrh	r3, [r7, #6]
 8001d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 81dd 	beq.w	8002130 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	461a      	mov	r2, r3
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	4413      	add	r3, r2
 8001d8a:	3302      	adds	r3, #2
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	6812      	ldr	r2, [r2, #0]
 8001d92:	4413      	add	r3, r2
 8001d94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d9e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	699a      	ldr	r2, [r3, #24]
 8001da6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d907      	bls.n	8001dbe <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	699a      	ldr	r2, [r3, #24]
 8001db2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001db6:	1ad2      	subs	r2, r2, r3
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	619a      	str	r2, [r3, #24]
 8001dbc:	e002      	b.n	8001dc4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f040 80b9 	bne.w	8001f40 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	785b      	ldrb	r3, [r3, #1]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d126      	bne.n	8001e24 <HAL_PCD_EP_DB_Transmit+0xc8>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	461a      	mov	r2, r3
 8001de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dea:	4413      	add	r3, r2
 8001dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	011a      	lsls	r2, r3, #4
 8001df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001df6:	4413      	add	r3, r2
 8001df8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e0c:	801a      	strh	r2, [r3, #0]
 8001e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e20:	801a      	strh	r2, [r3, #0]
 8001e22:	e01a      	b.n	8001e5a <HAL_PCD_EP_DB_Transmit+0xfe>
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	785b      	ldrb	r3, [r3, #1]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d116      	bne.n	8001e5a <HAL_PCD_EP_DB_Transmit+0xfe>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e40:	4413      	add	r3, r2
 8001e42:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	011a      	lsls	r2, r3, #4
 8001e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001e52:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e56:	2200      	movs	r2, #0
 8001e58:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	785b      	ldrb	r3, [r3, #1]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d126      	bne.n	8001eb6 <HAL_PCD_EP_DB_Transmit+0x15a>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	61fb      	str	r3, [r7, #28]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	461a      	mov	r2, r3
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	61fb      	str	r3, [r7, #28]
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	011a      	lsls	r2, r3, #4
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	4413      	add	r3, r2
 8001e8a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001e8e:	61bb      	str	r3, [r7, #24]
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	801a      	strh	r2, [r3, #0]
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001eaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	801a      	strh	r2, [r3, #0]
 8001eb4:	e017      	b.n	8001ee6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	785b      	ldrb	r3, [r3, #1]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d113      	bne.n	8001ee6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	461a      	mov	r2, r3
 8001eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ecc:	4413      	add	r3, r2
 8001ece:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	011a      	lsls	r2, r3, #4
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed8:	4413      	add	r3, r2
 8001eda:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001ede:	623b      	str	r3, [r7, #32]
 8001ee0:	6a3b      	ldr	r3, [r7, #32]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	4619      	mov	r1, r3
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f005 f97a 	bl	80071e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 82fc 	beq.w	80024f6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	881b      	ldrh	r3, [r3, #0]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001f14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f18:	82fb      	strh	r3, [r7, #22]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	441a      	add	r2, r3
 8001f28:	8afb      	ldrh	r3, [r7, #22]
 8001f2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001f2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001f32:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	8013      	strh	r3, [r2, #0]
 8001f3e:	e2da      	b.n	80024f6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f40:	88fb      	ldrh	r3, [r7, #6]
 8001f42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d021      	beq.n	8001f8e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001f60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f64:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	441a      	add	r2, r3
 8001f76:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8001f7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001f7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001f82:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	f040 82ae 	bne.w	80024f6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	695a      	ldr	r2, [r3, #20]
 8001f9e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001fa2:	441a      	add	r2, r3
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	69da      	ldr	r2, [r3, #28]
 8001fac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001fb0:	441a      	add	r2, r3
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	6a1a      	ldr	r2, [r3, #32]
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d30b      	bcc.n	8001fda <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	6a1a      	ldr	r2, [r3, #32]
 8001fce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fd2:	1ad2      	subs	r2, r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	621a      	str	r2, [r3, #32]
 8001fd8:	e017      	b.n	800200a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d108      	bne.n	8001ff4 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8001fe2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001fe6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001ff2:	e00a      	b.n	800200a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2200      	movs	r2, #0
 8002008:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	785b      	ldrb	r3, [r3, #1]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d165      	bne.n	80020de <HAL_PCD_EP_DB_Transmit+0x382>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002020:	b29b      	uxth	r3, r3
 8002022:	461a      	mov	r2, r3
 8002024:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002026:	4413      	add	r3, r2
 8002028:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	011a      	lsls	r2, r3, #4
 8002030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002032:	4413      	add	r3, r2
 8002034:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002038:	63bb      	str	r3, [r7, #56]	@ 0x38
 800203a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	b29b      	uxth	r3, r3
 8002040:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002044:	b29a      	uxth	r2, r3
 8002046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002048:	801a      	strh	r2, [r3, #0]
 800204a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800204e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002050:	d91d      	bls.n	800208e <HAL_PCD_EP_DB_Transmit+0x332>
 8002052:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002056:	095b      	lsrs	r3, r3, #5
 8002058:	64bb      	str	r3, [r7, #72]	@ 0x48
 800205a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800205e:	f003 031f 	and.w	r3, r3, #31
 8002062:	2b00      	cmp	r3, #0
 8002064:	d102      	bne.n	800206c <HAL_PCD_EP_DB_Transmit+0x310>
 8002066:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002068:	3b01      	subs	r3, #1
 800206a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800206c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	b29a      	uxth	r2, r3
 8002072:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002074:	b29b      	uxth	r3, r3
 8002076:	029b      	lsls	r3, r3, #10
 8002078:	b29b      	uxth	r3, r3
 800207a:	4313      	orrs	r3, r2
 800207c:	b29b      	uxth	r3, r3
 800207e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002082:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002086:	b29a      	uxth	r2, r3
 8002088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800208a:	801a      	strh	r2, [r3, #0]
 800208c:	e044      	b.n	8002118 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800208e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10a      	bne.n	80020ac <HAL_PCD_EP_DB_Transmit+0x350>
 8002096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	b29b      	uxth	r3, r3
 800209c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020a8:	801a      	strh	r2, [r3, #0]
 80020aa:	e035      	b.n	8002118 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80020ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020b0:	085b      	lsrs	r3, r3, #1
 80020b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80020b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d002      	beq.n	80020c6 <HAL_PCD_EP_DB_Transmit+0x36a>
 80020c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020c2:	3301      	adds	r3, #1
 80020c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80020c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	029b      	lsls	r3, r3, #10
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	4313      	orrs	r3, r2
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020da:	801a      	strh	r2, [r3, #0]
 80020dc:	e01c      	b.n	8002118 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	785b      	ldrb	r3, [r3, #1]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d118      	bne.n	8002118 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	461a      	mov	r2, r3
 80020f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020fa:	4413      	add	r3, r2
 80020fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	011a      	lsls	r2, r3, #4
 8002104:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002106:	4413      	add	r3, r2
 8002108:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800210c:	643b      	str	r3, [r7, #64]	@ 0x40
 800210e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002112:	b29a      	uxth	r2, r3
 8002114:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002116:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	6959      	ldr	r1, [r3, #20]
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	891a      	ldrh	r2, [r3, #8]
 8002124:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002128:	b29b      	uxth	r3, r3
 800212a:	f003 fa6c 	bl	8005606 <USB_WritePMA>
 800212e:	e1e2      	b.n	80024f6 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002138:	b29b      	uxth	r3, r3
 800213a:	461a      	mov	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	4413      	add	r3, r2
 8002144:	3306      	adds	r3, #6
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	6812      	ldr	r2, [r2, #0]
 800214c:	4413      	add	r3, r2
 800214e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002158:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	699a      	ldr	r2, [r3, #24]
 8002160:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002164:	429a      	cmp	r2, r3
 8002166:	d307      	bcc.n	8002178 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	699a      	ldr	r2, [r3, #24]
 800216c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002170:	1ad2      	subs	r2, r2, r3
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	619a      	str	r2, [r3, #24]
 8002176:	e002      	b.n	800217e <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2200      	movs	r2, #0
 800217c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	2b00      	cmp	r3, #0
 8002184:	f040 80c0 	bne.w	8002308 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	785b      	ldrb	r3, [r3, #1]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d126      	bne.n	80021de <HAL_PCD_EP_DB_Transmit+0x482>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800219e:	b29b      	uxth	r3, r3
 80021a0:	461a      	mov	r2, r3
 80021a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80021a4:	4413      	add	r3, r2
 80021a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	011a      	lsls	r2, r3, #4
 80021ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80021b0:	4413      	add	r3, r2
 80021b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80021b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80021b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	b29b      	uxth	r3, r3
 80021be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021c6:	801a      	strh	r2, [r3, #0]
 80021c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021da:	801a      	strh	r2, [r3, #0]
 80021dc:	e01a      	b.n	8002214 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	785b      	ldrb	r3, [r3, #1]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d116      	bne.n	8002214 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	461a      	mov	r2, r3
 80021f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80021fa:	4413      	add	r3, r2
 80021fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	011a      	lsls	r2, r3, #4
 8002204:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002206:	4413      	add	r3, r2
 8002208:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800220c:	663b      	str	r3, [r7, #96]	@ 0x60
 800220e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002210:	2200      	movs	r2, #0
 8002212:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	677b      	str	r3, [r7, #116]	@ 0x74
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	785b      	ldrb	r3, [r3, #1]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d12b      	bne.n	800227a <HAL_PCD_EP_DB_Transmit+0x51e>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002230:	b29b      	uxth	r3, r3
 8002232:	461a      	mov	r2, r3
 8002234:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002236:	4413      	add	r3, r2
 8002238:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	011a      	lsls	r2, r3, #4
 8002240:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002242:	4413      	add	r3, r2
 8002244:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002248:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800224c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	b29b      	uxth	r3, r3
 8002254:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002258:	b29a      	uxth	r2, r3
 800225a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800225e:	801a      	strh	r2, [r3, #0]
 8002260:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002264:	881b      	ldrh	r3, [r3, #0]
 8002266:	b29b      	uxth	r3, r3
 8002268:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800226c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002270:	b29a      	uxth	r2, r3
 8002272:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002276:	801a      	strh	r2, [r3, #0]
 8002278:	e017      	b.n	80022aa <HAL_PCD_EP_DB_Transmit+0x54e>
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	785b      	ldrb	r3, [r3, #1]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d113      	bne.n	80022aa <HAL_PCD_EP_DB_Transmit+0x54e>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800228a:	b29b      	uxth	r3, r3
 800228c:	461a      	mov	r2, r3
 800228e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002290:	4413      	add	r3, r2
 8002292:	677b      	str	r3, [r7, #116]	@ 0x74
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	011a      	lsls	r2, r3, #4
 800229a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800229c:	4413      	add	r3, r2
 800229e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80022a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80022a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022a6:	2200      	movs	r2, #0
 80022a8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	4619      	mov	r1, r3
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f004 ff98 	bl	80071e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80022b6:	88fb      	ldrh	r3, [r7, #6]
 80022b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f040 811a 	bne.w	80024f6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80022d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022dc:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	441a      	add	r2, r3
 80022ee:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80022f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80022fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002302:	b29b      	uxth	r3, r3
 8002304:	8013      	strh	r3, [r2, #0]
 8002306:	e0f6      	b.n	80024f6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002308:	88fb      	ldrh	r3, [r7, #6]
 800230a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d121      	bne.n	8002356 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	461a      	mov	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	b29b      	uxth	r3, r3
 8002324:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002328:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800232c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	441a      	add	r2, r3
 800233e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002342:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002346:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800234a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800234e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002352:	b29b      	uxth	r3, r3
 8002354:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800235c:	2b01      	cmp	r3, #1
 800235e:	f040 80ca 	bne.w	80024f6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800236a:	441a      	add	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	69da      	ldr	r2, [r3, #28]
 8002374:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002378:	441a      	add	r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	6a1a      	ldr	r2, [r3, #32]
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	429a      	cmp	r2, r3
 8002388:	d30b      	bcc.n	80023a2 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	6a1a      	ldr	r2, [r3, #32]
 8002396:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800239a:	1ad2      	subs	r2, r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	621a      	str	r2, [r3, #32]
 80023a0:	e017      	b.n	80023d2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d108      	bne.n	80023bc <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80023aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80023ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80023ba:	e00a      	b.n	80023d2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2200      	movs	r2, #0
 80023c8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	785b      	ldrb	r3, [r3, #1]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d165      	bne.n	80024ac <HAL_PCD_EP_DB_Transmit+0x750>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023f4:	4413      	add	r3, r2
 80023f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	011a      	lsls	r2, r3, #4
 80023fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002400:	4413      	add	r3, r2
 8002402:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002406:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002408:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800240a:	881b      	ldrh	r3, [r3, #0]
 800240c:	b29b      	uxth	r3, r3
 800240e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002412:	b29a      	uxth	r2, r3
 8002414:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002416:	801a      	strh	r2, [r3, #0]
 8002418:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800241c:	2b3e      	cmp	r3, #62	@ 0x3e
 800241e:	d91d      	bls.n	800245c <HAL_PCD_EP_DB_Transmit+0x700>
 8002420:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002424:	095b      	lsrs	r3, r3, #5
 8002426:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002428:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800242c:	f003 031f 	and.w	r3, r3, #31
 8002430:	2b00      	cmp	r3, #0
 8002432:	d102      	bne.n	800243a <HAL_PCD_EP_DB_Transmit+0x6de>
 8002434:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002436:	3b01      	subs	r3, #1
 8002438:	66bb      	str	r3, [r7, #104]	@ 0x68
 800243a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	b29a      	uxth	r2, r3
 8002440:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002442:	b29b      	uxth	r3, r3
 8002444:	029b      	lsls	r3, r3, #10
 8002446:	b29b      	uxth	r3, r3
 8002448:	4313      	orrs	r3, r2
 800244a:	b29b      	uxth	r3, r3
 800244c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002450:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002454:	b29a      	uxth	r2, r3
 8002456:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002458:	801a      	strh	r2, [r3, #0]
 800245a:	e041      	b.n	80024e0 <HAL_PCD_EP_DB_Transmit+0x784>
 800245c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10a      	bne.n	800247a <HAL_PCD_EP_DB_Transmit+0x71e>
 8002464:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	b29b      	uxth	r3, r3
 800246a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800246e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002472:	b29a      	uxth	r2, r3
 8002474:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002476:	801a      	strh	r2, [r3, #0]
 8002478:	e032      	b.n	80024e0 <HAL_PCD_EP_DB_Transmit+0x784>
 800247a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800247e:	085b      	lsrs	r3, r3, #1
 8002480:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002482:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d002      	beq.n	8002494 <HAL_PCD_EP_DB_Transmit+0x738>
 800248e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002490:	3301      	adds	r3, #1
 8002492:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002494:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002496:	881b      	ldrh	r3, [r3, #0]
 8002498:	b29a      	uxth	r2, r3
 800249a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800249c:	b29b      	uxth	r3, r3
 800249e:	029b      	lsls	r3, r3, #10
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	4313      	orrs	r3, r2
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024a8:	801a      	strh	r2, [r3, #0]
 80024aa:	e019      	b.n	80024e0 <HAL_PCD_EP_DB_Transmit+0x784>
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	785b      	ldrb	r3, [r3, #1]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d115      	bne.n	80024e0 <HAL_PCD_EP_DB_Transmit+0x784>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024bc:	b29b      	uxth	r3, r3
 80024be:	461a      	mov	r2, r3
 80024c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024c2:	4413      	add	r3, r2
 80024c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	011a      	lsls	r2, r3, #4
 80024cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024ce:	4413      	add	r3, r2
 80024d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80024d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80024d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024da:	b29a      	uxth	r2, r3
 80024dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024de:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	6959      	ldr	r1, [r3, #20]
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	895a      	ldrh	r2, [r3, #10]
 80024ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	f003 f888 	bl	8005606 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	b29b      	uxth	r3, r3
 8002508:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800250c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002510:	82bb      	strh	r3, [r7, #20]
 8002512:	8abb      	ldrh	r3, [r7, #20]
 8002514:	f083 0310 	eor.w	r3, r3, #16
 8002518:	82bb      	strh	r3, [r7, #20]
 800251a:	8abb      	ldrh	r3, [r7, #20]
 800251c:	f083 0320 	eor.w	r3, r3, #32
 8002520:	82bb      	strh	r3, [r7, #20]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	441a      	add	r2, r3
 8002530:	8abb      	ldrh	r3, [r7, #20]
 8002532:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002536:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800253a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800253e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002542:	b29b      	uxth	r3, r3
 8002544:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3790      	adds	r7, #144	@ 0x90
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002550:	b480      	push	{r7}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	607b      	str	r3, [r7, #4]
 800255a:	460b      	mov	r3, r1
 800255c:	817b      	strh	r3, [r7, #10]
 800255e:	4613      	mov	r3, r2
 8002560:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002562:	897b      	ldrh	r3, [r7, #10]
 8002564:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002568:	b29b      	uxth	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00b      	beq.n	8002586 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800256e:	897b      	ldrh	r3, [r7, #10]
 8002570:	f003 0207 	and.w	r2, r3, #7
 8002574:	4613      	mov	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	3310      	adds	r3, #16
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4413      	add	r3, r2
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	e009      	b.n	800259a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002586:	897a      	ldrh	r2, [r7, #10]
 8002588:	4613      	mov	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	4413      	add	r3, r2
 8002598:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800259a:	893b      	ldrh	r3, [r7, #8]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d107      	bne.n	80025b0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	2200      	movs	r2, #0
 80025a4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	80da      	strh	r2, [r3, #6]
 80025ae:	e00b      	b.n	80025c8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	2201      	movs	r2, #1
 80025b4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	0c1b      	lsrs	r3, r3, #16
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	371c      	adds	r7, #28
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr

080025d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e272      	b.n	8002acc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 8087 	beq.w	8002702 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025f4:	4b92      	ldr	r3, [pc, #584]	@ (8002840 <HAL_RCC_OscConfig+0x26c>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 030c 	and.w	r3, r3, #12
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d00c      	beq.n	800261a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002600:	4b8f      	ldr	r3, [pc, #572]	@ (8002840 <HAL_RCC_OscConfig+0x26c>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 030c 	and.w	r3, r3, #12
 8002608:	2b08      	cmp	r3, #8
 800260a:	d112      	bne.n	8002632 <HAL_RCC_OscConfig+0x5e>
 800260c:	4b8c      	ldr	r3, [pc, #560]	@ (8002840 <HAL_RCC_OscConfig+0x26c>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002618:	d10b      	bne.n	8002632 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800261a:	4b89      	ldr	r3, [pc, #548]	@ (8002840 <HAL_RCC_OscConfig+0x26c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d06c      	beq.n	8002700 <HAL_RCC_OscConfig+0x12c>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d168      	bne.n	8002700 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e24c      	b.n	8002acc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800263a:	d106      	bne.n	800264a <HAL_RCC_OscConfig+0x76>
 800263c:	4b80      	ldr	r3, [pc, #512]	@ (8002840 <HAL_RCC_OscConfig+0x26c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a7f      	ldr	r2, [pc, #508]	@ (8002840 <HAL_RCC_OscConfig+0x26c>)
 8002642:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	e02e      	b.n	80026a8 <HAL_RCC_OscConfig+0xd4>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10c      	bne.n	800266c <HAL_RCC_OscConfig+0x98>
 8002652:	4b7b      	ldr	r3, [pc, #492]	@ (8002840 <HAL_RCC_OscConfig+0x26c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a7a      	ldr	r2, [pc, #488]	@ (8002840 <HAL_RCC_OscConfig+0x26c>)
 8002658:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	4b78      	ldr	r3, [pc, #480]	@ (8002840 <HAL_RCC_OscConfig+0x26c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a77      	ldr	r2, [pc, #476]	@ (8002840 <HAL_RCC_OscConfig+0x26c>)
 8002664:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	e01d      	b.n	80026a8 <HAL_RCC_OscConfig+0xd4>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002674:	d10c      	bne.n	8002690 <HAL_RCC_OscConfig+0xbc>
 8002676:	4b72      	ldr	r3, [pc, #456]	@ (8002840 <HAL_RCC_OscConfig+0x26c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a71      	ldr	r2, [pc, #452]	@ (8002840 <HAL_RCC_OscConfig+0x26c>)
 800267c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	4b6f      	ldr	r3, [pc, #444]	@ (8002840 <HAL_RCC_OscConfig+0x26c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a6e      	ldr	r2, [pc, #440]	@ (8002840 <HAL_RCC_OscConfig+0x26c>)
 8002688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	e00b      	b.n	80026a8 <HAL_RCC_OscConfig+0xd4>
 8002690:	4b6b      	ldr	r3, [pc, #428]	@ (8002840 <HAL_RCC_OscConfig+0x26c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a6a      	ldr	r2, [pc, #424]	@ (8002840 <HAL_RCC_OscConfig+0x26c>)
 8002696:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	4b68      	ldr	r3, [pc, #416]	@ (8002840 <HAL_RCC_OscConfig+0x26c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a67      	ldr	r2, [pc, #412]	@ (8002840 <HAL_RCC_OscConfig+0x26c>)
 80026a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d013      	beq.n	80026d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7fd ff84 	bl	80005bc <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b8:	f7fd ff80 	bl	80005bc <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b64      	cmp	r3, #100	@ 0x64
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e200      	b.n	8002acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ca:	4b5d      	ldr	r3, [pc, #372]	@ (8002840 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCC_OscConfig+0xe4>
 80026d6:	e014      	b.n	8002702 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d8:	f7fd ff70 	bl	80005bc <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e0:	f7fd ff6c 	bl	80005bc <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b64      	cmp	r3, #100	@ 0x64
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e1ec      	b.n	8002acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026f2:	4b53      	ldr	r3, [pc, #332]	@ (8002840 <HAL_RCC_OscConfig+0x26c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0x10c>
 80026fe:	e000      	b.n	8002702 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d063      	beq.n	80027d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800270e:	4b4c      	ldr	r3, [pc, #304]	@ (8002840 <HAL_RCC_OscConfig+0x26c>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00b      	beq.n	8002732 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800271a:	4b49      	ldr	r3, [pc, #292]	@ (8002840 <HAL_RCC_OscConfig+0x26c>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f003 030c 	and.w	r3, r3, #12
 8002722:	2b08      	cmp	r3, #8
 8002724:	d11c      	bne.n	8002760 <HAL_RCC_OscConfig+0x18c>
 8002726:	4b46      	ldr	r3, [pc, #280]	@ (8002840 <HAL_RCC_OscConfig+0x26c>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d116      	bne.n	8002760 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002732:	4b43      	ldr	r3, [pc, #268]	@ (8002840 <HAL_RCC_OscConfig+0x26c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d005      	beq.n	800274a <HAL_RCC_OscConfig+0x176>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d001      	beq.n	800274a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e1c0      	b.n	8002acc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274a:	4b3d      	ldr	r3, [pc, #244]	@ (8002840 <HAL_RCC_OscConfig+0x26c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4939      	ldr	r1, [pc, #228]	@ (8002840 <HAL_RCC_OscConfig+0x26c>)
 800275a:	4313      	orrs	r3, r2
 800275c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800275e:	e03a      	b.n	80027d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d020      	beq.n	80027aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002768:	4b36      	ldr	r3, [pc, #216]	@ (8002844 <HAL_RCC_OscConfig+0x270>)
 800276a:	2201      	movs	r2, #1
 800276c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276e:	f7fd ff25 	bl	80005bc <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002776:	f7fd ff21 	bl	80005bc <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e1a1      	b.n	8002acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002788:	4b2d      	ldr	r3, [pc, #180]	@ (8002840 <HAL_RCC_OscConfig+0x26c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0f0      	beq.n	8002776 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002794:	4b2a      	ldr	r3, [pc, #168]	@ (8002840 <HAL_RCC_OscConfig+0x26c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4927      	ldr	r1, [pc, #156]	@ (8002840 <HAL_RCC_OscConfig+0x26c>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	600b      	str	r3, [r1, #0]
 80027a8:	e015      	b.n	80027d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027aa:	4b26      	ldr	r3, [pc, #152]	@ (8002844 <HAL_RCC_OscConfig+0x270>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b0:	f7fd ff04 	bl	80005bc <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b8:	f7fd ff00 	bl	80005bc <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e180      	b.n	8002acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002840 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d03a      	beq.n	8002858 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d019      	beq.n	800281e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ea:	4b17      	ldr	r3, [pc, #92]	@ (8002848 <HAL_RCC_OscConfig+0x274>)
 80027ec:	2201      	movs	r2, #1
 80027ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f0:	f7fd fee4 	bl	80005bc <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027f8:	f7fd fee0 	bl	80005bc <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e160      	b.n	8002acc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280a:	4b0d      	ldr	r3, [pc, #52]	@ (8002840 <HAL_RCC_OscConfig+0x26c>)
 800280c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002816:	2001      	movs	r0, #1
 8002818:	f000 fa9c 	bl	8002d54 <RCC_Delay>
 800281c:	e01c      	b.n	8002858 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800281e:	4b0a      	ldr	r3, [pc, #40]	@ (8002848 <HAL_RCC_OscConfig+0x274>)
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002824:	f7fd feca 	bl	80005bc <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800282a:	e00f      	b.n	800284c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800282c:	f7fd fec6 	bl	80005bc <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d908      	bls.n	800284c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e146      	b.n	8002acc <HAL_RCC_OscConfig+0x4f8>
 800283e:	bf00      	nop
 8002840:	40021000 	.word	0x40021000
 8002844:	42420000 	.word	0x42420000
 8002848:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800284c:	4b92      	ldr	r3, [pc, #584]	@ (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 800284e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1e9      	bne.n	800282c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 80a6 	beq.w	80029b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002866:	2300      	movs	r3, #0
 8002868:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800286a:	4b8b      	ldr	r3, [pc, #556]	@ (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10d      	bne.n	8002892 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002876:	4b88      	ldr	r3, [pc, #544]	@ (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	4a87      	ldr	r2, [pc, #540]	@ (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 800287c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002880:	61d3      	str	r3, [r2, #28]
 8002882:	4b85      	ldr	r3, [pc, #532]	@ (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800288a:	60bb      	str	r3, [r7, #8]
 800288c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800288e:	2301      	movs	r3, #1
 8002890:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002892:	4b82      	ldr	r3, [pc, #520]	@ (8002a9c <HAL_RCC_OscConfig+0x4c8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289a:	2b00      	cmp	r3, #0
 800289c:	d118      	bne.n	80028d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800289e:	4b7f      	ldr	r3, [pc, #508]	@ (8002a9c <HAL_RCC_OscConfig+0x4c8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a7e      	ldr	r2, [pc, #504]	@ (8002a9c <HAL_RCC_OscConfig+0x4c8>)
 80028a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028aa:	f7fd fe87 	bl	80005bc <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b2:	f7fd fe83 	bl	80005bc <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b64      	cmp	r3, #100	@ 0x64
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e103      	b.n	8002acc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c4:	4b75      	ldr	r3, [pc, #468]	@ (8002a9c <HAL_RCC_OscConfig+0x4c8>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0f0      	beq.n	80028b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d106      	bne.n	80028e6 <HAL_RCC_OscConfig+0x312>
 80028d8:	4b6f      	ldr	r3, [pc, #444]	@ (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	4a6e      	ldr	r2, [pc, #440]	@ (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	6213      	str	r3, [r2, #32]
 80028e4:	e02d      	b.n	8002942 <HAL_RCC_OscConfig+0x36e>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10c      	bne.n	8002908 <HAL_RCC_OscConfig+0x334>
 80028ee:	4b6a      	ldr	r3, [pc, #424]	@ (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	4a69      	ldr	r2, [pc, #420]	@ (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 80028f4:	f023 0301 	bic.w	r3, r3, #1
 80028f8:	6213      	str	r3, [r2, #32]
 80028fa:	4b67      	ldr	r3, [pc, #412]	@ (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	4a66      	ldr	r2, [pc, #408]	@ (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 8002900:	f023 0304 	bic.w	r3, r3, #4
 8002904:	6213      	str	r3, [r2, #32]
 8002906:	e01c      	b.n	8002942 <HAL_RCC_OscConfig+0x36e>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	2b05      	cmp	r3, #5
 800290e:	d10c      	bne.n	800292a <HAL_RCC_OscConfig+0x356>
 8002910:	4b61      	ldr	r3, [pc, #388]	@ (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	4a60      	ldr	r2, [pc, #384]	@ (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 8002916:	f043 0304 	orr.w	r3, r3, #4
 800291a:	6213      	str	r3, [r2, #32]
 800291c:	4b5e      	ldr	r3, [pc, #376]	@ (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	4a5d      	ldr	r2, [pc, #372]	@ (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	6213      	str	r3, [r2, #32]
 8002928:	e00b      	b.n	8002942 <HAL_RCC_OscConfig+0x36e>
 800292a:	4b5b      	ldr	r3, [pc, #364]	@ (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	4a5a      	ldr	r2, [pc, #360]	@ (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 8002930:	f023 0301 	bic.w	r3, r3, #1
 8002934:	6213      	str	r3, [r2, #32]
 8002936:	4b58      	ldr	r3, [pc, #352]	@ (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	4a57      	ldr	r2, [pc, #348]	@ (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 800293c:	f023 0304 	bic.w	r3, r3, #4
 8002940:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d015      	beq.n	8002976 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294a:	f7fd fe37 	bl	80005bc <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002950:	e00a      	b.n	8002968 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002952:	f7fd fe33 	bl	80005bc <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002960:	4293      	cmp	r3, r2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e0b1      	b.n	8002acc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002968:	4b4b      	ldr	r3, [pc, #300]	@ (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0ee      	beq.n	8002952 <HAL_RCC_OscConfig+0x37e>
 8002974:	e014      	b.n	80029a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002976:	f7fd fe21 	bl	80005bc <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800297c:	e00a      	b.n	8002994 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800297e:	f7fd fe1d 	bl	80005bc <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	f241 3288 	movw	r2, #5000	@ 0x1388
 800298c:	4293      	cmp	r3, r2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e09b      	b.n	8002acc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002994:	4b40      	ldr	r3, [pc, #256]	@ (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1ee      	bne.n	800297e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029a0:	7dfb      	ldrb	r3, [r7, #23]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d105      	bne.n	80029b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a6:	4b3c      	ldr	r3, [pc, #240]	@ (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	4a3b      	ldr	r2, [pc, #236]	@ (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 80029ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f000 8087 	beq.w	8002aca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029bc:	4b36      	ldr	r3, [pc, #216]	@ (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 030c 	and.w	r3, r3, #12
 80029c4:	2b08      	cmp	r3, #8
 80029c6:	d061      	beq.n	8002a8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d146      	bne.n	8002a5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d0:	4b33      	ldr	r3, [pc, #204]	@ (8002aa0 <HAL_RCC_OscConfig+0x4cc>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d6:	f7fd fdf1 	bl	80005bc <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029de:	f7fd fded 	bl	80005bc <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e06d      	b.n	8002acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029f0:	4b29      	ldr	r3, [pc, #164]	@ (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1f0      	bne.n	80029de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a04:	d108      	bne.n	8002a18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a06:	4b24      	ldr	r3, [pc, #144]	@ (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	4921      	ldr	r1, [pc, #132]	@ (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a18:	4b1f      	ldr	r3, [pc, #124]	@ (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a19      	ldr	r1, [r3, #32]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	491b      	ldr	r1, [pc, #108]	@ (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a30:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa0 <HAL_RCC_OscConfig+0x4cc>)
 8002a32:	2201      	movs	r2, #1
 8002a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a36:	f7fd fdc1 	bl	80005bc <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a3e:	f7fd fdbd 	bl	80005bc <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e03d      	b.n	8002acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a50:	4b11      	ldr	r3, [pc, #68]	@ (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0f0      	beq.n	8002a3e <HAL_RCC_OscConfig+0x46a>
 8002a5c:	e035      	b.n	8002aca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5e:	4b10      	ldr	r3, [pc, #64]	@ (8002aa0 <HAL_RCC_OscConfig+0x4cc>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a64:	f7fd fdaa 	bl	80005bc <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6c:	f7fd fda6 	bl	80005bc <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e026      	b.n	8002acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a7e:	4b06      	ldr	r3, [pc, #24]	@ (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x498>
 8002a8a:	e01e      	b.n	8002aca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d107      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e019      	b.n	8002acc <HAL_RCC_OscConfig+0x4f8>
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40007000 	.word	0x40007000
 8002aa0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad4 <HAL_RCC_OscConfig+0x500>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d106      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d001      	beq.n	8002aca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40021000 	.word	0x40021000

08002ad8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e0d0      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002aec:	4b6a      	ldr	r3, [pc, #424]	@ (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d910      	bls.n	8002b1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afa:	4b67      	ldr	r3, [pc, #412]	@ (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 0207 	bic.w	r2, r3, #7
 8002b02:	4965      	ldr	r1, [pc, #404]	@ (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0a:	4b63      	ldr	r3, [pc, #396]	@ (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d001      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0b8      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d020      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b34:	4b59      	ldr	r3, [pc, #356]	@ (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	4a58      	ldr	r2, [pc, #352]	@ (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0308 	and.w	r3, r3, #8
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b4c:	4b53      	ldr	r3, [pc, #332]	@ (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	4a52      	ldr	r2, [pc, #328]	@ (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b52:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002b56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b58:	4b50      	ldr	r3, [pc, #320]	@ (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	494d      	ldr	r1, [pc, #308]	@ (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d040      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d107      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7e:	4b47      	ldr	r3, [pc, #284]	@ (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d115      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e07f      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d107      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b96:	4b41      	ldr	r3, [pc, #260]	@ (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d109      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e073      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba6:	4b3d      	ldr	r3, [pc, #244]	@ (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e06b      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bb6:	4b39      	ldr	r3, [pc, #228]	@ (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f023 0203 	bic.w	r2, r3, #3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	4936      	ldr	r1, [pc, #216]	@ (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bc8:	f7fd fcf8 	bl	80005bc <HAL_GetTick>
 8002bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bce:	e00a      	b.n	8002be6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd0:	f7fd fcf4 	bl	80005bc <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e053      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be6:	4b2d      	ldr	r3, [pc, #180]	@ (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 020c 	and.w	r2, r3, #12
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d1eb      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bf8:	4b27      	ldr	r3, [pc, #156]	@ (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d210      	bcs.n	8002c28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c06:	4b24      	ldr	r3, [pc, #144]	@ (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f023 0207 	bic.w	r2, r3, #7
 8002c0e:	4922      	ldr	r1, [pc, #136]	@ (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c16:	4b20      	ldr	r3, [pc, #128]	@ (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d001      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e032      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d008      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c34:	4b19      	ldr	r3, [pc, #100]	@ (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	4916      	ldr	r1, [pc, #88]	@ (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d009      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c52:	4b12      	ldr	r3, [pc, #72]	@ (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	490e      	ldr	r1, [pc, #56]	@ (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c66:	f000 f821 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	091b      	lsrs	r3, r3, #4
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	490a      	ldr	r1, [pc, #40]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c78:	5ccb      	ldrb	r3, [r1, r3]
 8002c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7e:	4a09      	ldr	r2, [pc, #36]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1cc>)
 8002c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c82:	4b09      	ldr	r3, [pc, #36]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1d0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fd fc56 	bl	8000538 <HAL_InitTick>

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40022000 	.word	0x40022000
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	0800774c 	.word	0x0800774c
 8002ca4:	20000000 	.word	0x20000000
 8002ca8:	20000004 	.word	0x20000004

08002cac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f003 030c 	and.w	r3, r3, #12
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d002      	beq.n	8002cdc <HAL_RCC_GetSysClockFreq+0x30>
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d003      	beq.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x36>
 8002cda:	e027      	b.n	8002d2c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cdc:	4b19      	ldr	r3, [pc, #100]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cde:	613b      	str	r3, [r7, #16]
      break;
 8002ce0:	e027      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	0c9b      	lsrs	r3, r3, #18
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	4a17      	ldr	r2, [pc, #92]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cec:	5cd3      	ldrb	r3, [r2, r3]
 8002cee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d010      	beq.n	8002d1c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cfa:	4b11      	ldr	r3, [pc, #68]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	0c5b      	lsrs	r3, r3, #17
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	4a11      	ldr	r2, [pc, #68]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d06:	5cd3      	ldrb	r3, [r2, r3]
 8002d08:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d0e:	fb03 f202 	mul.w	r2, r3, r2
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	e004      	b.n	8002d26 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a0c      	ldr	r2, [pc, #48]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d20:	fb02 f303 	mul.w	r3, r2, r3
 8002d24:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	613b      	str	r3, [r7, #16]
      break;
 8002d2a:	e002      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d2c:	4b05      	ldr	r3, [pc, #20]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d2e:	613b      	str	r3, [r7, #16]
      break;
 8002d30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d32:	693b      	ldr	r3, [r7, #16]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	371c      	adds	r7, #28
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bc80      	pop	{r7}
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40021000 	.word	0x40021000
 8002d44:	007a1200 	.word	0x007a1200
 8002d48:	0800775c 	.word	0x0800775c
 8002d4c:	0800776c 	.word	0x0800776c
 8002d50:	003d0900 	.word	0x003d0900

08002d54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d88 <RCC_Delay+0x34>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a0a      	ldr	r2, [pc, #40]	@ (8002d8c <RCC_Delay+0x38>)
 8002d62:	fba2 2303 	umull	r2, r3, r2, r3
 8002d66:	0a5b      	lsrs	r3, r3, #9
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	fb02 f303 	mul.w	r3, r2, r3
 8002d6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d70:	bf00      	nop
  }
  while (Delay --);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	1e5a      	subs	r2, r3, #1
 8002d76:	60fa      	str	r2, [r7, #12]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1f9      	bne.n	8002d70 <RCC_Delay+0x1c>
}
 8002d7c:	bf00      	nop
 8002d7e:	bf00      	nop
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr
 8002d88:	20000000 	.word	0x20000000
 8002d8c:	10624dd3 	.word	0x10624dd3

08002d90 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d07d      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002dac:	2300      	movs	r3, #0
 8002dae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002db0:	4b4f      	ldr	r3, [pc, #316]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10d      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dbc:	4b4c      	ldr	r3, [pc, #304]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	4a4b      	ldr	r2, [pc, #300]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dc6:	61d3      	str	r3, [r2, #28]
 8002dc8:	4b49      	ldr	r3, [pc, #292]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dd0:	60bb      	str	r3, [r7, #8]
 8002dd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd8:	4b46      	ldr	r3, [pc, #280]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d118      	bne.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002de4:	4b43      	ldr	r3, [pc, #268]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a42      	ldr	r2, [pc, #264]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002df0:	f7fd fbe4 	bl	80005bc <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df6:	e008      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df8:	f7fd fbe0 	bl	80005bc <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b64      	cmp	r3, #100	@ 0x64
 8002e04:	d901      	bls.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e06d      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0a:	4b3a      	ldr	r3, [pc, #232]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0f0      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e16:	4b36      	ldr	r3, [pc, #216]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e1e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d02e      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d027      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e34:	4b2e      	ldr	r3, [pc, #184]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e3c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e3e:	4b2e      	ldr	r3, [pc, #184]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e40:	2201      	movs	r2, #1
 8002e42:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e44:	4b2c      	ldr	r3, [pc, #176]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e4a:	4a29      	ldr	r2, [pc, #164]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d014      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5a:	f7fd fbaf 	bl	80005bc <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e60:	e00a      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e62:	f7fd fbab 	bl	80005bc <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e036      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e78:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0ee      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e84:	4b1a      	ldr	r3, [pc, #104]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	4917      	ldr	r1, [pc, #92]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e96:	7dfb      	ldrb	r3, [r7, #23]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d105      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e9c:	4b14      	ldr	r3, [pc, #80]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	4a13      	ldr	r2, [pc, #76]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ea6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d008      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	490b      	ldr	r1, [pc, #44]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0310 	and.w	r3, r3, #16
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d008      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ed2:	4b07      	ldr	r3, [pc, #28]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	4904      	ldr	r1, [pc, #16]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3718      	adds	r7, #24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	40007000 	.word	0x40007000
 8002ef8:	42420440 	.word	0x42420440

08002efc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e076      	b.n	8002ffc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d108      	bne.n	8002f28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f1e:	d009      	beq.n	8002f34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	61da      	str	r2, [r3, #28]
 8002f26:	e005      	b.n	8002f34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d106      	bne.n	8002f54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7fd fa30 	bl	80003b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f86:	431a      	orrs	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	431a      	orrs	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fb8:	ea42 0103 	orr.w	r1, r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	0c1a      	lsrs	r2, r3, #16
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f002 0204 	and.w	r2, r2, #4
 8002fda:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	69da      	ldr	r2, [r3, #28]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	4638      	mov	r0, r7
 800300e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	bc80      	pop	{r7}
 800301c:	4770      	bx	lr

0800301e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800301e:	b480      	push	{r7}
 8003020:	b085      	sub	sp, #20
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800302e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003032:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	b29a      	uxth	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	bc80      	pop	{r7}
 8003048:	4770      	bx	lr

0800304a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800304a:	b480      	push	{r7}
 800304c:	b085      	sub	sp, #20
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003052:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003056:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800305e:	b29a      	uxth	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	b29b      	uxth	r3, r3
 8003064:	43db      	mvns	r3, r3
 8003066:	b29b      	uxth	r3, r3
 8003068:	4013      	ands	r3, r2
 800306a:	b29a      	uxth	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr

0800307e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
 8003086:	460b      	mov	r3, r1
 8003088:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	bc80      	pop	{r7}
 8003094:	4770      	bx	lr

08003096 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003096:	b480      	push	{r7}
 8003098:	b085      	sub	sp, #20
 800309a:	af00      	add	r7, sp, #0
 800309c:	60f8      	str	r0, [r7, #12]
 800309e:	4638      	mov	r0, r7
 80030a0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr

080030d0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b09d      	sub	sp, #116	@ 0x74
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80030f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030f6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	78db      	ldrb	r3, [r3, #3]
 80030fe:	2b03      	cmp	r3, #3
 8003100:	d81f      	bhi.n	8003142 <USB_ActivateEndpoint+0x72>
 8003102:	a201      	add	r2, pc, #4	@ (adr r2, 8003108 <USB_ActivateEndpoint+0x38>)
 8003104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003108:	08003119 	.word	0x08003119
 800310c:	08003135 	.word	0x08003135
 8003110:	0800314b 	.word	0x0800314b
 8003114:	08003127 	.word	0x08003127
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003118:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800311c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003120:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003124:	e012      	b.n	800314c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003126:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800312a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800312e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003132:	e00b      	b.n	800314c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003134:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003138:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800313c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003140:	e004      	b.n	800314c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8003148:	e000      	b.n	800314c <USB_ActivateEndpoint+0x7c>
      break;
 800314a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	441a      	add	r2, r3
 8003156:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800315a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800315e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003162:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800316a:	b29b      	uxth	r3, r3
 800316c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	b29b      	uxth	r3, r3
 800317c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003180:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003184:	b29b      	uxth	r3, r3
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	7812      	ldrb	r2, [r2, #0]
 800318a:	4313      	orrs	r3, r2
 800318c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	441a      	add	r2, r3
 800319a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800319e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80031a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80031a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	7b1b      	ldrb	r3, [r3, #12]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f040 8178 	bne.w	80034ac <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	785b      	ldrb	r3, [r3, #1]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 8084 	beq.w	80032ce <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	61bb      	str	r3, [r7, #24]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	461a      	mov	r2, r3
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	4413      	add	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	011a      	lsls	r2, r3, #4
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80031e8:	617b      	str	r3, [r7, #20]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	88db      	ldrh	r3, [r3, #6]
 80031ee:	085b      	lsrs	r3, r3, #1
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	881b      	ldrh	r3, [r3, #0]
 8003206:	827b      	strh	r3, [r7, #18]
 8003208:	8a7b      	ldrh	r3, [r7, #18]
 800320a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800320e:	2b00      	cmp	r3, #0
 8003210:	d01b      	beq.n	800324a <USB_ActivateEndpoint+0x17a>
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	b29b      	uxth	r3, r3
 8003220:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003224:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003228:	823b      	strh	r3, [r7, #16]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	441a      	add	r2, r3
 8003234:	8a3b      	ldrh	r3, [r7, #16]
 8003236:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800323a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800323e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003242:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003246:	b29b      	uxth	r3, r3
 8003248:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	78db      	ldrb	r3, [r3, #3]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d020      	beq.n	8003294 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	881b      	ldrh	r3, [r3, #0]
 800325e:	b29b      	uxth	r3, r3
 8003260:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003264:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003268:	81bb      	strh	r3, [r7, #12]
 800326a:	89bb      	ldrh	r3, [r7, #12]
 800326c:	f083 0320 	eor.w	r3, r3, #32
 8003270:	81bb      	strh	r3, [r7, #12]
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	441a      	add	r2, r3
 800327c:	89bb      	ldrh	r3, [r7, #12]
 800327e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003282:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003286:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800328a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800328e:	b29b      	uxth	r3, r3
 8003290:	8013      	strh	r3, [r2, #0]
 8003292:	e2d5      	b.n	8003840 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032aa:	81fb      	strh	r3, [r7, #14]
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	441a      	add	r2, r3
 80032b6:	89fb      	ldrh	r3, [r7, #14]
 80032b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80032c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	8013      	strh	r3, [r2, #0]
 80032cc:	e2b8      	b.n	8003840 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032d8:	b29b      	uxth	r3, r3
 80032da:	461a      	mov	r2, r3
 80032dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032de:	4413      	add	r3, r2
 80032e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	011a      	lsls	r2, r3, #4
 80032e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ea:	4413      	add	r3, r2
 80032ec:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80032f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	88db      	ldrh	r3, [r3, #6]
 80032f6:	085b      	lsrs	r3, r3, #1
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003300:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800330c:	b29b      	uxth	r3, r3
 800330e:	461a      	mov	r2, r3
 8003310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003312:	4413      	add	r3, r2
 8003314:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	011a      	lsls	r2, r3, #4
 800331c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800331e:	4413      	add	r3, r2
 8003320:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003324:	627b      	str	r3, [r7, #36]	@ 0x24
 8003326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	b29b      	uxth	r3, r3
 800332c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003330:	b29a      	uxth	r2, r3
 8003332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003334:	801a      	strh	r2, [r3, #0]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	2b3e      	cmp	r3, #62	@ 0x3e
 800333c:	d91d      	bls.n	800337a <USB_ActivateEndpoint+0x2aa>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	095b      	lsrs	r3, r3, #5
 8003344:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	f003 031f 	and.w	r3, r3, #31
 800334e:	2b00      	cmp	r3, #0
 8003350:	d102      	bne.n	8003358 <USB_ActivateEndpoint+0x288>
 8003352:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003354:	3b01      	subs	r3, #1
 8003356:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335a:	881b      	ldrh	r3, [r3, #0]
 800335c:	b29a      	uxth	r2, r3
 800335e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003360:	b29b      	uxth	r3, r3
 8003362:	029b      	lsls	r3, r3, #10
 8003364:	b29b      	uxth	r3, r3
 8003366:	4313      	orrs	r3, r2
 8003368:	b29b      	uxth	r3, r3
 800336a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800336e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003372:	b29a      	uxth	r2, r3
 8003374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003376:	801a      	strh	r2, [r3, #0]
 8003378:	e026      	b.n	80033c8 <USB_ActivateEndpoint+0x2f8>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10a      	bne.n	8003398 <USB_ActivateEndpoint+0x2c8>
 8003382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	b29b      	uxth	r3, r3
 8003388:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800338c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003390:	b29a      	uxth	r2, r3
 8003392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003394:	801a      	strh	r2, [r3, #0]
 8003396:	e017      	b.n	80033c8 <USB_ActivateEndpoint+0x2f8>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	085b      	lsrs	r3, r3, #1
 800339e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d002      	beq.n	80033b2 <USB_ActivateEndpoint+0x2e2>
 80033ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033ae:	3301      	adds	r3, #1
 80033b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	029b      	lsls	r3, r3, #10
 80033be:	b29b      	uxth	r3, r3
 80033c0:	4313      	orrs	r3, r2
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	881b      	ldrh	r3, [r3, #0]
 80033d4:	847b      	strh	r3, [r7, #34]	@ 0x22
 80033d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80033d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d01b      	beq.n	8003418 <USB_ActivateEndpoint+0x348>
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4413      	add	r3, r2
 80033ea:	881b      	ldrh	r3, [r3, #0]
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033f6:	843b      	strh	r3, [r7, #32]
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	441a      	add	r2, r3
 8003402:	8c3b      	ldrh	r3, [r7, #32]
 8003404:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003408:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800340c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003410:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003414:	b29b      	uxth	r3, r3
 8003416:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d124      	bne.n	800346a <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	881b      	ldrh	r3, [r3, #0]
 800342c:	b29b      	uxth	r3, r3
 800342e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003432:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003436:	83bb      	strh	r3, [r7, #28]
 8003438:	8bbb      	ldrh	r3, [r7, #28]
 800343a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800343e:	83bb      	strh	r3, [r7, #28]
 8003440:	8bbb      	ldrh	r3, [r7, #28]
 8003442:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003446:	83bb      	strh	r3, [r7, #28]
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	441a      	add	r2, r3
 8003452:	8bbb      	ldrh	r3, [r7, #28]
 8003454:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003458:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800345c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003460:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003464:	b29b      	uxth	r3, r3
 8003466:	8013      	strh	r3, [r2, #0]
 8003468:	e1ea      	b.n	8003840 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	b29b      	uxth	r3, r3
 8003478:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800347c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003480:	83fb      	strh	r3, [r7, #30]
 8003482:	8bfb      	ldrh	r3, [r7, #30]
 8003484:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003488:	83fb      	strh	r3, [r7, #30]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	441a      	add	r2, r3
 8003494:	8bfb      	ldrh	r3, [r7, #30]
 8003496:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800349a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800349e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	8013      	strh	r3, [r2, #0]
 80034aa:	e1c9      	b.n	8003840 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	78db      	ldrb	r3, [r3, #3]
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d11e      	bne.n	80034f2 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	881b      	ldrh	r3, [r3, #0]
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034ca:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	441a      	add	r2, r3
 80034d8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80034dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034e4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80034e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	8013      	strh	r3, [r2, #0]
 80034f0:	e01d      	b.n	800352e <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8003504:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003508:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	441a      	add	r2, r3
 8003516:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800351a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800351e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003522:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003526:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800352a:	b29b      	uxth	r3, r3
 800352c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003538:	b29b      	uxth	r3, r3
 800353a:	461a      	mov	r2, r3
 800353c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800353e:	4413      	add	r3, r2
 8003540:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	011a      	lsls	r2, r3, #4
 8003548:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800354a:	4413      	add	r3, r2
 800354c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003550:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	891b      	ldrh	r3, [r3, #8]
 8003556:	085b      	lsrs	r3, r3, #1
 8003558:	b29b      	uxth	r3, r3
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	b29a      	uxth	r2, r3
 800355e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003560:	801a      	strh	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	657b      	str	r3, [r7, #84]	@ 0x54
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800356c:	b29b      	uxth	r3, r3
 800356e:	461a      	mov	r2, r3
 8003570:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003572:	4413      	add	r3, r2
 8003574:	657b      	str	r3, [r7, #84]	@ 0x54
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	011a      	lsls	r2, r3, #4
 800357c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800357e:	4413      	add	r3, r2
 8003580:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8003584:	653b      	str	r3, [r7, #80]	@ 0x50
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	895b      	ldrh	r3, [r3, #10]
 800358a:	085b      	lsrs	r3, r3, #1
 800358c:	b29b      	uxth	r3, r3
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	b29a      	uxth	r2, r3
 8003592:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003594:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	785b      	ldrb	r3, [r3, #1]
 800359a:	2b00      	cmp	r3, #0
 800359c:	f040 8093 	bne.w	80036c6 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	881b      	ldrh	r3, [r3, #0]
 80035ac:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80035b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80035b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d01b      	beq.n	80035f4 <USB_ActivateEndpoint+0x524>
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	881b      	ldrh	r3, [r3, #0]
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035d2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	441a      	add	r2, r3
 80035de:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80035e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	881b      	ldrh	r3, [r3, #0]
 8003600:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8003602:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003608:	2b00      	cmp	r3, #0
 800360a:	d01b      	beq.n	8003644 <USB_ActivateEndpoint+0x574>
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	881b      	ldrh	r3, [r3, #0]
 8003618:	b29b      	uxth	r3, r3
 800361a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800361e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003622:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	441a      	add	r2, r3
 800362e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003630:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003634:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003638:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800363c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003640:	b29b      	uxth	r3, r3
 8003642:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	b29b      	uxth	r3, r3
 8003652:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800365a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800365c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800365e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003662:	873b      	strh	r3, [r7, #56]	@ 0x38
 8003664:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003666:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800366a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	441a      	add	r2, r3
 8003676:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003678:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800367c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003680:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003684:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003688:	b29b      	uxth	r3, r3
 800368a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	881b      	ldrh	r3, [r3, #0]
 8003698:	b29b      	uxth	r3, r3
 800369a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800369e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036a2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	441a      	add	r2, r3
 80036ae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80036b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	8013      	strh	r3, [r2, #0]
 80036c4:	e0bc      	b.n	8003840 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80036d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80036da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d01d      	beq.n	800371e <USB_ActivateEndpoint+0x64e>
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4413      	add	r3, r2
 80036ec:	881b      	ldrh	r3, [r3, #0]
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036f8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	441a      	add	r2, r3
 8003706:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800370a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800370e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003712:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003716:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800371a:	b29b      	uxth	r3, r3
 800371c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	881b      	ldrh	r3, [r3, #0]
 800372a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800372e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003736:	2b00      	cmp	r3, #0
 8003738:	d01d      	beq.n	8003776 <USB_ActivateEndpoint+0x6a6>
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	b29b      	uxth	r3, r3
 8003748:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800374c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003750:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	441a      	add	r2, r3
 800375e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003762:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003766:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800376a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800376e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003772:	b29b      	uxth	r3, r3
 8003774:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	78db      	ldrb	r3, [r3, #3]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d024      	beq.n	80037c8 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	b29b      	uxth	r3, r3
 800378c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003790:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003794:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8003798:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800379c:	f083 0320 	eor.w	r3, r3, #32
 80037a0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	441a      	add	r2, r3
 80037ae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80037b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80037b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80037ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	8013      	strh	r3, [r2, #0]
 80037c6:	e01d      	b.n	8003804 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037de:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	441a      	add	r2, r3
 80037ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80037f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80037f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80037f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003800:	b29b      	uxth	r3, r3
 8003802:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	b29b      	uxth	r3, r3
 8003812:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800381a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	441a      	add	r2, r3
 8003828:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800382c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003830:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003834:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003838:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800383c:	b29b      	uxth	r3, r3
 800383e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8003840:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8003844:	4618      	mov	r0, r3
 8003846:	3774      	adds	r7, #116	@ 0x74
 8003848:	46bd      	mov	sp, r7
 800384a:	bc80      	pop	{r7}
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop

08003850 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003850:	b480      	push	{r7}
 8003852:	b08d      	sub	sp, #52	@ 0x34
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	7b1b      	ldrb	r3, [r3, #12]
 800385e:	2b00      	cmp	r3, #0
 8003860:	f040 808e 	bne.w	8003980 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	785b      	ldrb	r3, [r3, #1]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d044      	beq.n	80038f6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	881b      	ldrh	r3, [r3, #0]
 8003878:	81bb      	strh	r3, [r7, #12]
 800387a:	89bb      	ldrh	r3, [r7, #12]
 800387c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003880:	2b00      	cmp	r3, #0
 8003882:	d01b      	beq.n	80038bc <USB_DeactivateEndpoint+0x6c>
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	b29b      	uxth	r3, r3
 8003892:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800389a:	817b      	strh	r3, [r7, #10]
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	441a      	add	r2, r3
 80038a6:	897b      	ldrh	r3, [r7, #10]
 80038a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038d2:	813b      	strh	r3, [r7, #8]
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	441a      	add	r2, r3
 80038de:	893b      	ldrh	r3, [r7, #8]
 80038e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	8013      	strh	r3, [r2, #0]
 80038f4:	e192      	b.n	8003c1c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	827b      	strh	r3, [r7, #18]
 8003904:	8a7b      	ldrh	r3, [r7, #18]
 8003906:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d01b      	beq.n	8003946 <USB_DeactivateEndpoint+0xf6>
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4413      	add	r3, r2
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	b29b      	uxth	r3, r3
 800391c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003920:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003924:	823b      	strh	r3, [r7, #16]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	441a      	add	r2, r3
 8003930:	8a3b      	ldrh	r3, [r7, #16]
 8003932:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003936:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800393a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800393e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003942:	b29b      	uxth	r3, r3
 8003944:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	881b      	ldrh	r3, [r3, #0]
 8003952:	b29b      	uxth	r3, r3
 8003954:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003958:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800395c:	81fb      	strh	r3, [r7, #14]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	441a      	add	r2, r3
 8003968:	89fb      	ldrh	r3, [r7, #14]
 800396a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800396e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003972:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800397a:	b29b      	uxth	r3, r3
 800397c:	8013      	strh	r3, [r2, #0]
 800397e:	e14d      	b.n	8003c1c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	785b      	ldrb	r3, [r3, #1]
 8003984:	2b00      	cmp	r3, #0
 8003986:	f040 80a5 	bne.w	8003ad4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	843b      	strh	r3, [r7, #32]
 8003998:	8c3b      	ldrh	r3, [r7, #32]
 800399a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d01b      	beq.n	80039da <USB_DeactivateEndpoint+0x18a>
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	881b      	ldrh	r3, [r3, #0]
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039b8:	83fb      	strh	r3, [r7, #30]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	441a      	add	r2, r3
 80039c4:	8bfb      	ldrh	r3, [r7, #30]
 80039c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80039d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	83bb      	strh	r3, [r7, #28]
 80039e8:	8bbb      	ldrh	r3, [r7, #28]
 80039ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d01b      	beq.n	8003a2a <USB_DeactivateEndpoint+0x1da>
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a08:	837b      	strh	r3, [r7, #26]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	441a      	add	r2, r3
 8003a14:	8b7b      	ldrh	r3, [r7, #26]
 8003a16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a22:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	881b      	ldrh	r3, [r3, #0]
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a40:	833b      	strh	r3, [r7, #24]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	441a      	add	r2, r3
 8003a4c:	8b3b      	ldrh	r3, [r7, #24]
 8003a4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a5a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a78:	82fb      	strh	r3, [r7, #22]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	441a      	add	r2, r3
 8003a84:	8afb      	ldrh	r3, [r7, #22]
 8003a86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003aac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ab0:	82bb      	strh	r3, [r7, #20]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	441a      	add	r2, r3
 8003abc:	8abb      	ldrh	r3, [r7, #20]
 8003abe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ac2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ac6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003aca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	8013      	strh	r3, [r2, #0]
 8003ad2:	e0a3      	b.n	8003c1c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8003ae2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003ae4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d01b      	beq.n	8003b24 <USB_DeactivateEndpoint+0x2d4>
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	881b      	ldrh	r3, [r3, #0]
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b02:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	441a      	add	r2, r3
 8003b0e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003b10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8003b32:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d01b      	beq.n	8003b74 <USB_DeactivateEndpoint+0x324>
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	881b      	ldrh	r3, [r3, #0]
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b52:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	441a      	add	r2, r3
 8003b5e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003b60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b6c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	881b      	ldrh	r3, [r3, #0]
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b8a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	441a      	add	r2, r3
 8003b96:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003b98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ba0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ba4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bc2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	441a      	add	r2, r3
 8003bce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003bd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003bf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bfa:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	441a      	add	r2, r3
 8003c06:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003c08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3734      	adds	r7, #52	@ 0x34
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bc80      	pop	{r7}
 8003c26:	4770      	bx	lr

08003c28 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b0c2      	sub	sp, #264	@ 0x108
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003c36:	6018      	str	r0, [r3, #0]
 8003c38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c40:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003c42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	785b      	ldrb	r3, [r3, #1]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	f040 86b7 	bne.w	80049c2 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003c54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	699a      	ldr	r2, [r3, #24]
 8003c60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d908      	bls.n	8003c82 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8003c70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003c80:	e007      	b.n	8003c92 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8003c82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003c92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	7b1b      	ldrb	r3, [r3, #12]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d13a      	bne.n	8003d18 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003ca2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ca6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6959      	ldr	r1, [r3, #20]
 8003cae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003cb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	88da      	ldrh	r2, [r3, #6]
 8003cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003cc4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003cc8:	6800      	ldr	r0, [r0, #0]
 8003cca:	f001 fc9c 	bl	8005606 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003cce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003cd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	613b      	str	r3, [r7, #16]
 8003cda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003cde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	461a      	mov	r2, r3
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	4413      	add	r3, r2
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003cf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	011a      	lsls	r2, r3, #4
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	4413      	add	r3, r2
 8003d04:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003d08:	60fb      	str	r3, [r7, #12]
 8003d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	801a      	strh	r2, [r3, #0]
 8003d14:	f000 be1f 	b.w	8004956 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003d18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	78db      	ldrb	r3, [r3, #3]
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	f040 8462 	bne.w	80045ee <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003d2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6a1a      	ldr	r2, [r3, #32]
 8003d36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	f240 83df 	bls.w	8004506 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003d48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4413      	add	r3, r2
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d6e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8003d72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	441a      	add	r2, r3
 8003d8c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003d90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d98:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8003d9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003da4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003da8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6a1a      	ldr	r2, [r3, #32]
 8003db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003db4:	1ad2      	subs	r2, r2, r3
 8003db6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003dba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003dc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003dc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003dd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4413      	add	r3, r2
 8003ddc:	881b      	ldrh	r3, [r3, #0]
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 81c7 	beq.w	8004178 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003dea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003dee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003df6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003dfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	785b      	ldrb	r3, [r3, #1]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d177      	bne.n	8003ef6 <USB_EPStartXfer+0x2ce>
 8003e06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	461a      	mov	r2, r3
 8003e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e26:	4413      	add	r3, r2
 8003e28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	011a      	lsls	r2, r3, #4
 8003e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003e40:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e50:	801a      	strh	r2, [r3, #0]
 8003e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e56:	2b3e      	cmp	r3, #62	@ 0x3e
 8003e58:	d921      	bls.n	8003e9e <USB_EPStartXfer+0x276>
 8003e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e5e:	095b      	lsrs	r3, r3, #5
 8003e60:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e68:	f003 031f 	and.w	r3, r3, #31
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d104      	bne.n	8003e7a <USB_EPStartXfer+0x252>
 8003e70:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003e74:	3b01      	subs	r3, #1
 8003e76:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	029b      	lsls	r3, r3, #10
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9a:	801a      	strh	r2, [r3, #0]
 8003e9c:	e050      	b.n	8003f40 <USB_EPStartXfer+0x318>
 8003e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10a      	bne.n	8003ebc <USB_EPStartXfer+0x294>
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea8:	881b      	ldrh	r3, [r3, #0]
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb8:	801a      	strh	r2, [r3, #0]
 8003eba:	e041      	b.n	8003f40 <USB_EPStartXfer+0x318>
 8003ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ec0:	085b      	lsrs	r3, r3, #1
 8003ec2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d004      	beq.n	8003edc <USB_EPStartXfer+0x2b4>
 8003ed2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ede:	881b      	ldrh	r3, [r3, #0]
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	029b      	lsls	r3, r3, #10
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	4313      	orrs	r3, r2
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef2:	801a      	strh	r2, [r3, #0]
 8003ef4:	e024      	b.n	8003f40 <USB_EPStartXfer+0x318>
 8003ef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003efa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	785b      	ldrb	r3, [r3, #1]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d11c      	bne.n	8003f40 <USB_EPStartXfer+0x318>
 8003f06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	461a      	mov	r2, r3
 8003f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f1a:	4413      	add	r3, r2
 8003f1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	011a      	lsls	r2, r3, #4
 8003f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f2e:	4413      	add	r3, r2
 8003f30:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f3e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003f40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	895b      	ldrh	r3, [r3, #10]
 8003f4c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003f50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6959      	ldr	r1, [r3, #20]
 8003f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8003f66:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003f6a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003f6e:	6800      	ldr	r0, [r0, #0]
 8003f70:	f001 fb49 	bl	8005606 <USB_WritePMA>
            ep->xfer_buff += len;
 8003f74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	695a      	ldr	r2, [r3, #20]
 8003f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f84:	441a      	add	r2, r3
 8003f86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6a1a      	ldr	r2, [r3, #32]
 8003f9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d90f      	bls.n	8003fce <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8003fae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6a1a      	ldr	r2, [r3, #32]
 8003fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fbe:	1ad2      	subs	r2, r2, r3
 8003fc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	621a      	str	r2, [r3, #32]
 8003fcc:	e00e      	b.n	8003fec <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8003fce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8003fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003fec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ff0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	785b      	ldrb	r3, [r3, #1]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d177      	bne.n	80040ec <USB_EPStartXfer+0x4c4>
 8003ffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004000:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	61bb      	str	r3, [r7, #24]
 8004008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800400c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004016:	b29b      	uxth	r3, r3
 8004018:	461a      	mov	r2, r3
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	4413      	add	r3, r2
 800401e:	61bb      	str	r3, [r7, #24]
 8004020:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004024:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	011a      	lsls	r2, r3, #4
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	4413      	add	r3, r2
 8004032:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	b29b      	uxth	r3, r3
 800403e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004042:	b29a      	uxth	r2, r3
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	801a      	strh	r2, [r3, #0]
 8004048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800404c:	2b3e      	cmp	r3, #62	@ 0x3e
 800404e:	d921      	bls.n	8004094 <USB_EPStartXfer+0x46c>
 8004050:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004054:	095b      	lsrs	r3, r3, #5
 8004056:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800405a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800405e:	f003 031f 	and.w	r3, r3, #31
 8004062:	2b00      	cmp	r3, #0
 8004064:	d104      	bne.n	8004070 <USB_EPStartXfer+0x448>
 8004066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800406a:	3b01      	subs	r3, #1
 800406c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	881b      	ldrh	r3, [r3, #0]
 8004074:	b29a      	uxth	r2, r3
 8004076:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800407a:	b29b      	uxth	r3, r3
 800407c:	029b      	lsls	r3, r3, #10
 800407e:	b29b      	uxth	r3, r3
 8004080:	4313      	orrs	r3, r2
 8004082:	b29b      	uxth	r3, r3
 8004084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800408c:	b29a      	uxth	r2, r3
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	801a      	strh	r2, [r3, #0]
 8004092:	e056      	b.n	8004142 <USB_EPStartXfer+0x51a>
 8004094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10a      	bne.n	80040b2 <USB_EPStartXfer+0x48a>
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	801a      	strh	r2, [r3, #0]
 80040b0:	e047      	b.n	8004142 <USB_EPStartXfer+0x51a>
 80040b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040b6:	085b      	lsrs	r3, r3, #1
 80040b8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80040bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d004      	beq.n	80040d2 <USB_EPStartXfer+0x4aa>
 80040c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040cc:	3301      	adds	r3, #1
 80040ce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	881b      	ldrh	r3, [r3, #0]
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040dc:	b29b      	uxth	r3, r3
 80040de:	029b      	lsls	r3, r3, #10
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	4313      	orrs	r3, r2
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	801a      	strh	r2, [r3, #0]
 80040ea:	e02a      	b.n	8004142 <USB_EPStartXfer+0x51a>
 80040ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	785b      	ldrb	r3, [r3, #1]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d122      	bne.n	8004142 <USB_EPStartXfer+0x51a>
 80040fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004100:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	623b      	str	r3, [r7, #32]
 8004108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800410c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004116:	b29b      	uxth	r3, r3
 8004118:	461a      	mov	r2, r3
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	4413      	add	r3, r2
 800411e:	623b      	str	r3, [r7, #32]
 8004120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004124:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	011a      	lsls	r2, r3, #4
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	4413      	add	r3, r2
 8004132:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004136:	61fb      	str	r3, [r7, #28]
 8004138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800413c:	b29a      	uxth	r2, r3
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004146:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	891b      	ldrh	r3, [r3, #8]
 800414e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6959      	ldr	r1, [r3, #20]
 800415e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004162:	b29b      	uxth	r3, r3
 8004164:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004168:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800416c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004170:	6800      	ldr	r0, [r0, #0]
 8004172:	f001 fa48 	bl	8005606 <USB_WritePMA>
 8004176:	e3ee      	b.n	8004956 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004178:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800417c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	785b      	ldrb	r3, [r3, #1]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d177      	bne.n	8004278 <USB_EPStartXfer+0x650>
 8004188:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800418c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004198:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	461a      	mov	r2, r3
 80041a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041a8:	4413      	add	r3, r2
 80041aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	011a      	lsls	r2, r3, #4
 80041ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041bc:	4413      	add	r3, r2
 80041be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80041c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80041c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041c6:	881b      	ldrh	r3, [r3, #0]
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041d2:	801a      	strh	r2, [r3, #0]
 80041d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80041da:	d921      	bls.n	8004220 <USB_EPStartXfer+0x5f8>
 80041dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041e0:	095b      	lsrs	r3, r3, #5
 80041e2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80041e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041ea:	f003 031f 	and.w	r3, r3, #31
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d104      	bne.n	80041fc <USB_EPStartXfer+0x5d4>
 80041f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80041f6:	3b01      	subs	r3, #1
 80041f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80041fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041fe:	881b      	ldrh	r3, [r3, #0]
 8004200:	b29a      	uxth	r2, r3
 8004202:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004206:	b29b      	uxth	r3, r3
 8004208:	029b      	lsls	r3, r3, #10
 800420a:	b29b      	uxth	r3, r3
 800420c:	4313      	orrs	r3, r2
 800420e:	b29b      	uxth	r3, r3
 8004210:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004214:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004218:	b29a      	uxth	r2, r3
 800421a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800421c:	801a      	strh	r2, [r3, #0]
 800421e:	e056      	b.n	80042ce <USB_EPStartXfer+0x6a6>
 8004220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10a      	bne.n	800423e <USB_EPStartXfer+0x616>
 8004228:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	b29b      	uxth	r3, r3
 800422e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004232:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004236:	b29a      	uxth	r2, r3
 8004238:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800423a:	801a      	strh	r2, [r3, #0]
 800423c:	e047      	b.n	80042ce <USB_EPStartXfer+0x6a6>
 800423e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004242:	085b      	lsrs	r3, r3, #1
 8004244:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b00      	cmp	r3, #0
 8004252:	d004      	beq.n	800425e <USB_EPStartXfer+0x636>
 8004254:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004258:	3301      	adds	r3, #1
 800425a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800425e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	b29a      	uxth	r2, r3
 8004264:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004268:	b29b      	uxth	r3, r3
 800426a:	029b      	lsls	r3, r3, #10
 800426c:	b29b      	uxth	r3, r3
 800426e:	4313      	orrs	r3, r2
 8004270:	b29a      	uxth	r2, r3
 8004272:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004274:	801a      	strh	r2, [r3, #0]
 8004276:	e02a      	b.n	80042ce <USB_EPStartXfer+0x6a6>
 8004278:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800427c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	785b      	ldrb	r3, [r3, #1]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d122      	bne.n	80042ce <USB_EPStartXfer+0x6a6>
 8004288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800428c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	653b      	str	r3, [r7, #80]	@ 0x50
 8004294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004298:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	461a      	mov	r2, r3
 80042a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042a8:	4413      	add	r3, r2
 80042aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80042ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80042b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	011a      	lsls	r2, r3, #4
 80042ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042bc:	4413      	add	r3, r2
 80042be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80042c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80042ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80042d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	891b      	ldrh	r3, [r3, #8]
 80042da:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80042de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80042e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6959      	ldr	r1, [r3, #20]
 80042ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80042f4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80042f8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80042fc:	6800      	ldr	r0, [r0, #0]
 80042fe:	f001 f982 	bl	8005606 <USB_WritePMA>
            ep->xfer_buff += len;
 8004302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004306:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695a      	ldr	r2, [r3, #20]
 800430e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004312:	441a      	add	r2, r3
 8004314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004320:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004324:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6a1a      	ldr	r2, [r3, #32]
 800432c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004330:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	429a      	cmp	r2, r3
 800433a:	d90f      	bls.n	800435c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800433c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004340:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6a1a      	ldr	r2, [r3, #32]
 8004348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800434c:	1ad2      	subs	r2, r2, r3
 800434e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004352:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	621a      	str	r2, [r3, #32]
 800435a:	e00e      	b.n	800437a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800435c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004360:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800436c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004370:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2200      	movs	r2, #0
 8004378:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800437a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800437e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	643b      	str	r3, [r7, #64]	@ 0x40
 8004386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800438a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	785b      	ldrb	r3, [r3, #1]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d177      	bne.n	8004486 <USB_EPStartXfer+0x85e>
 8004396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800439a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	461a      	mov	r2, r3
 80043b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b6:	4413      	add	r3, r2
 80043b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	011a      	lsls	r2, r3, #4
 80043c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ca:	4413      	add	r3, r2
 80043cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80043d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80043d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043d4:	881b      	ldrh	r3, [r3, #0]
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043dc:	b29a      	uxth	r2, r3
 80043de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043e0:	801a      	strh	r2, [r3, #0]
 80043e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80043e8:	d921      	bls.n	800442e <USB_EPStartXfer+0x806>
 80043ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80043f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043f8:	f003 031f 	and.w	r3, r3, #31
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d104      	bne.n	800440a <USB_EPStartXfer+0x7e2>
 8004400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004404:	3b01      	subs	r3, #1
 8004406:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800440a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	b29a      	uxth	r2, r3
 8004410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004414:	b29b      	uxth	r3, r3
 8004416:	029b      	lsls	r3, r3, #10
 8004418:	b29b      	uxth	r3, r3
 800441a:	4313      	orrs	r3, r2
 800441c:	b29b      	uxth	r3, r3
 800441e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004426:	b29a      	uxth	r2, r3
 8004428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800442a:	801a      	strh	r2, [r3, #0]
 800442c:	e050      	b.n	80044d0 <USB_EPStartXfer+0x8a8>
 800442e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10a      	bne.n	800444c <USB_EPStartXfer+0x824>
 8004436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004438:	881b      	ldrh	r3, [r3, #0]
 800443a:	b29b      	uxth	r3, r3
 800443c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004444:	b29a      	uxth	r2, r3
 8004446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004448:	801a      	strh	r2, [r3, #0]
 800444a:	e041      	b.n	80044d0 <USB_EPStartXfer+0x8a8>
 800444c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004450:	085b      	lsrs	r3, r3, #1
 8004452:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d004      	beq.n	800446c <USB_EPStartXfer+0x844>
 8004462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004466:	3301      	adds	r3, #1
 8004468:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800446c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	b29a      	uxth	r2, r3
 8004472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004476:	b29b      	uxth	r3, r3
 8004478:	029b      	lsls	r3, r3, #10
 800447a:	b29b      	uxth	r3, r3
 800447c:	4313      	orrs	r3, r2
 800447e:	b29a      	uxth	r2, r3
 8004480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004482:	801a      	strh	r2, [r3, #0]
 8004484:	e024      	b.n	80044d0 <USB_EPStartXfer+0x8a8>
 8004486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800448a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	785b      	ldrb	r3, [r3, #1]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d11c      	bne.n	80044d0 <USB_EPStartXfer+0x8a8>
 8004496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800449a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	461a      	mov	r2, r3
 80044a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044aa:	4413      	add	r3, r2
 80044ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80044ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	011a      	lsls	r2, r3, #4
 80044bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044be:	4413      	add	r3, r2
 80044c0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80044c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044ce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80044d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	895b      	ldrh	r3, [r3, #10]
 80044dc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80044e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6959      	ldr	r1, [r3, #20]
 80044ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80044f6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80044fa:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80044fe:	6800      	ldr	r0, [r0, #0]
 8004500:	f001 f881 	bl	8005606 <USB_WritePMA>
 8004504:	e227      	b.n	8004956 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800450a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004516:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800451a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004524:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4413      	add	r3, r2
 8004530:	881b      	ldrh	r3, [r3, #0]
 8004532:	b29b      	uxth	r3, r3
 8004534:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004538:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800453c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004544:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800454e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	441a      	add	r2, r3
 800455a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800455e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004562:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004566:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800456a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800456e:	b29b      	uxth	r3, r3
 8004570:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004572:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004576:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800457e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004582:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800458c:	b29b      	uxth	r3, r3
 800458e:	461a      	mov	r2, r3
 8004590:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004592:	4413      	add	r3, r2
 8004594:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004596:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800459a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	011a      	lsls	r2, r3, #4
 80045a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045a6:	4413      	add	r3, r2
 80045a8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80045ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80045b6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80045b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	891b      	ldrh	r3, [r3, #8]
 80045c4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80045c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6959      	ldr	r1, [r3, #20]
 80045d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045d8:	b29b      	uxth	r3, r3
 80045da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80045de:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80045e2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80045e6:	6800      	ldr	r0, [r0, #0]
 80045e8:	f001 f80d 	bl	8005606 <USB_WritePMA>
 80045ec:	e1b3      	b.n	8004956 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80045ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6a1a      	ldr	r2, [r3, #32]
 80045fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045fe:	1ad2      	subs	r2, r2, r3
 8004600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004604:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800460c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004610:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800461a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	881b      	ldrh	r3, [r3, #0]
 8004628:	b29b      	uxth	r3, r3
 800462a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 80c6 	beq.w	80047c0 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004634:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004638:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004644:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	785b      	ldrb	r3, [r3, #1]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d177      	bne.n	8004740 <USB_EPStartXfer+0xb18>
 8004650:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004654:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800465c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004660:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800466a:	b29b      	uxth	r3, r3
 800466c:	461a      	mov	r2, r3
 800466e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004670:	4413      	add	r3, r2
 8004672:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004678:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	011a      	lsls	r2, r3, #4
 8004682:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004684:	4413      	add	r3, r2
 8004686:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800468a:	667b      	str	r3, [r7, #100]	@ 0x64
 800468c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	b29b      	uxth	r3, r3
 8004692:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004696:	b29a      	uxth	r2, r3
 8004698:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800469a:	801a      	strh	r2, [r3, #0]
 800469c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80046a2:	d921      	bls.n	80046e8 <USB_EPStartXfer+0xac0>
 80046a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046a8:	095b      	lsrs	r3, r3, #5
 80046aa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80046ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046b2:	f003 031f 	and.w	r3, r3, #31
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d104      	bne.n	80046c4 <USB_EPStartXfer+0xa9c>
 80046ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80046be:	3b01      	subs	r3, #1
 80046c0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80046c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	029b      	lsls	r3, r3, #10
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	4313      	orrs	r3, r2
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046e4:	801a      	strh	r2, [r3, #0]
 80046e6:	e050      	b.n	800478a <USB_EPStartXfer+0xb62>
 80046e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10a      	bne.n	8004706 <USB_EPStartXfer+0xade>
 80046f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046fe:	b29a      	uxth	r2, r3
 8004700:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004702:	801a      	strh	r2, [r3, #0]
 8004704:	e041      	b.n	800478a <USB_EPStartXfer+0xb62>
 8004706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800470a:	085b      	lsrs	r3, r3, #1
 800470c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	d004      	beq.n	8004726 <USB_EPStartXfer+0xafe>
 800471c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004720:	3301      	adds	r3, #1
 8004722:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004726:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	b29a      	uxth	r2, r3
 800472c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004730:	b29b      	uxth	r3, r3
 8004732:	029b      	lsls	r3, r3, #10
 8004734:	b29b      	uxth	r3, r3
 8004736:	4313      	orrs	r3, r2
 8004738:	b29a      	uxth	r2, r3
 800473a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800473c:	801a      	strh	r2, [r3, #0]
 800473e:	e024      	b.n	800478a <USB_EPStartXfer+0xb62>
 8004740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004744:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	785b      	ldrb	r3, [r3, #1]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d11c      	bne.n	800478a <USB_EPStartXfer+0xb62>
 8004750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004754:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800475e:	b29b      	uxth	r3, r3
 8004760:	461a      	mov	r2, r3
 8004762:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004764:	4413      	add	r3, r2
 8004766:	673b      	str	r3, [r7, #112]	@ 0x70
 8004768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800476c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	011a      	lsls	r2, r3, #4
 8004776:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004778:	4413      	add	r3, r2
 800477a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800477e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004784:	b29a      	uxth	r2, r3
 8004786:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004788:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800478a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800478e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	895b      	ldrh	r3, [r3, #10]
 8004796:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800479a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800479e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6959      	ldr	r1, [r3, #20]
 80047a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80047b0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80047b4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80047b8:	6800      	ldr	r0, [r0, #0]
 80047ba:	f000 ff24 	bl	8005606 <USB_WritePMA>
 80047be:	e0ca      	b.n	8004956 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80047c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	785b      	ldrb	r3, [r3, #1]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d177      	bne.n	80048c0 <USB_EPStartXfer+0xc98>
 80047d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80047dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	461a      	mov	r2, r3
 80047ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047f0:	4413      	add	r3, r2
 80047f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80047f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	011a      	lsls	r2, r3, #4
 8004802:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004804:	4413      	add	r3, r2
 8004806:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800480a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800480c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	b29b      	uxth	r3, r3
 8004812:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004816:	b29a      	uxth	r2, r3
 8004818:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800481a:	801a      	strh	r2, [r3, #0]
 800481c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004820:	2b3e      	cmp	r3, #62	@ 0x3e
 8004822:	d921      	bls.n	8004868 <USB_EPStartXfer+0xc40>
 8004824:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004828:	095b      	lsrs	r3, r3, #5
 800482a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800482e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004832:	f003 031f 	and.w	r3, r3, #31
 8004836:	2b00      	cmp	r3, #0
 8004838:	d104      	bne.n	8004844 <USB_EPStartXfer+0xc1c>
 800483a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800483e:	3b01      	subs	r3, #1
 8004840:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004844:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	b29a      	uxth	r2, r3
 800484a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800484e:	b29b      	uxth	r3, r3
 8004850:	029b      	lsls	r3, r3, #10
 8004852:	b29b      	uxth	r3, r3
 8004854:	4313      	orrs	r3, r2
 8004856:	b29b      	uxth	r3, r3
 8004858:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800485c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004860:	b29a      	uxth	r2, r3
 8004862:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004864:	801a      	strh	r2, [r3, #0]
 8004866:	e05c      	b.n	8004922 <USB_EPStartXfer+0xcfa>
 8004868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10a      	bne.n	8004886 <USB_EPStartXfer+0xc5e>
 8004870:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004872:	881b      	ldrh	r3, [r3, #0]
 8004874:	b29b      	uxth	r3, r3
 8004876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800487a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800487e:	b29a      	uxth	r2, r3
 8004880:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004882:	801a      	strh	r2, [r3, #0]
 8004884:	e04d      	b.n	8004922 <USB_EPStartXfer+0xcfa>
 8004886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800488a:	085b      	lsrs	r3, r3, #1
 800488c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d004      	beq.n	80048a6 <USB_EPStartXfer+0xc7e>
 800489c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80048a0:	3301      	adds	r3, #1
 80048a2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80048a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	029b      	lsls	r3, r3, #10
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	4313      	orrs	r3, r2
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048bc:	801a      	strh	r2, [r3, #0]
 80048be:	e030      	b.n	8004922 <USB_EPStartXfer+0xcfa>
 80048c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	785b      	ldrb	r3, [r3, #1]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d128      	bne.n	8004922 <USB_EPStartXfer+0xcfa>
 80048d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80048de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	461a      	mov	r2, r3
 80048f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80048f4:	4413      	add	r3, r2
 80048f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80048fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	011a      	lsls	r2, r3, #4
 8004908:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800490c:	4413      	add	r3, r2
 800490e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004912:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800491a:	b29a      	uxth	r2, r3
 800491c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004920:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004922:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004926:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	891b      	ldrh	r3, [r3, #8]
 800492e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004932:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004936:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6959      	ldr	r1, [r3, #20]
 800493e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004942:	b29b      	uxth	r3, r3
 8004944:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004948:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800494c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004950:	6800      	ldr	r0, [r0, #0]
 8004952:	f000 fe58 	bl	8005606 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004956:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800495a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004964:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	881b      	ldrh	r3, [r3, #0]
 8004972:	b29b      	uxth	r3, r3
 8004974:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004978:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800497c:	817b      	strh	r3, [r7, #10]
 800497e:	897b      	ldrh	r3, [r7, #10]
 8004980:	f083 0310 	eor.w	r3, r3, #16
 8004984:	817b      	strh	r3, [r7, #10]
 8004986:	897b      	ldrh	r3, [r7, #10]
 8004988:	f083 0320 	eor.w	r3, r3, #32
 800498c:	817b      	strh	r3, [r7, #10]
 800498e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004992:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800499c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	441a      	add	r2, r3
 80049a8:	897b      	ldrh	r3, [r7, #10]
 80049aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	8013      	strh	r3, [r2, #0]
 80049be:	f000 bcde 	b.w	800537e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80049c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	7b1b      	ldrb	r3, [r3, #12]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f040 80bb 	bne.w	8004b4a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80049d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	699a      	ldr	r2, [r3, #24]
 80049e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d917      	bls.n	8004a20 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80049f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8004a00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	699a      	ldr	r2, [r3, #24]
 8004a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a10:	1ad2      	subs	r2, r2, r3
 8004a12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	619a      	str	r2, [r3, #24]
 8004a1e:	e00e      	b.n	8004a3e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8004a20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8004a30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004a3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004a62:	4413      	add	r3, r2
 8004a64:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	011a      	lsls	r2, r3, #4
 8004a76:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004a80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004a84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a96:	801a      	strh	r2, [r3, #0]
 8004a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a9c:	2b3e      	cmp	r3, #62	@ 0x3e
 8004a9e:	d924      	bls.n	8004aea <USB_EPStartXfer+0xec2>
 8004aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aa4:	095b      	lsrs	r3, r3, #5
 8004aa6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aae:	f003 031f 	and.w	r3, r3, #31
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d104      	bne.n	8004ac0 <USB_EPStartXfer+0xe98>
 8004ab6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004aba:	3b01      	subs	r3, #1
 8004abc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004ac0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	029b      	lsls	r3, r3, #10
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ada:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ae4:	801a      	strh	r2, [r3, #0]
 8004ae6:	f000 bc10 	b.w	800530a <USB_EPStartXfer+0x16e2>
 8004aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10c      	bne.n	8004b0c <USB_EPStartXfer+0xee4>
 8004af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004af6:	881b      	ldrh	r3, [r3, #0]
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004afe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b08:	801a      	strh	r2, [r3, #0]
 8004b0a:	e3fe      	b.n	800530a <USB_EPStartXfer+0x16e2>
 8004b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b10:	085b      	lsrs	r3, r3, #1
 8004b12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d004      	beq.n	8004b2c <USB_EPStartXfer+0xf04>
 8004b22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004b26:	3301      	adds	r3, #1
 8004b28:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	029b      	lsls	r3, r3, #10
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b46:	801a      	strh	r2, [r3, #0]
 8004b48:	e3df      	b.n	800530a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004b4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	78db      	ldrb	r3, [r3, #3]
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	f040 8218 	bne.w	8004f8c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	785b      	ldrb	r3, [r3, #1]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f040 809d 	bne.w	8004ca8 <USB_EPStartXfer+0x1080>
 8004b6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b92:	4413      	add	r3, r2
 8004b94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	011a      	lsls	r2, r3, #4
 8004ba6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004baa:	4413      	add	r3, r2
 8004bac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004bb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004bb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004bc6:	801a      	strh	r2, [r3, #0]
 8004bc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	2b3e      	cmp	r3, #62	@ 0x3e
 8004bd6:	d92b      	bls.n	8004c30 <USB_EPStartXfer+0x1008>
 8004bd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	095b      	lsrs	r3, r3, #5
 8004be6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004bea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	f003 031f 	and.w	r3, r3, #31
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d104      	bne.n	8004c08 <USB_EPStartXfer+0xfe0>
 8004bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c02:	3b01      	subs	r3, #1
 8004c04:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004c0c:	881b      	ldrh	r3, [r3, #0]
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	029b      	lsls	r3, r3, #10
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004c2c:	801a      	strh	r2, [r3, #0]
 8004c2e:	e070      	b.n	8004d12 <USB_EPStartXfer+0x10ea>
 8004c30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10c      	bne.n	8004c5a <USB_EPStartXfer+0x1032>
 8004c40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004c44:	881b      	ldrh	r3, [r3, #0]
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004c56:	801a      	strh	r2, [r3, #0]
 8004c58:	e05b      	b.n	8004d12 <USB_EPStartXfer+0x10ea>
 8004c5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	085b      	lsrs	r3, r3, #1
 8004c68:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d004      	beq.n	8004c8a <USB_EPStartXfer+0x1062>
 8004c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c84:	3301      	adds	r3, #1
 8004c86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004c8e:	881b      	ldrh	r3, [r3, #0]
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	029b      	lsls	r3, r3, #10
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004ca4:	801a      	strh	r2, [r3, #0]
 8004ca6:	e034      	b.n	8004d12 <USB_EPStartXfer+0x10ea>
 8004ca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	785b      	ldrb	r3, [r3, #1]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d12c      	bne.n	8004d12 <USB_EPStartXfer+0x10ea>
 8004cb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004cc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004cdc:	4413      	add	r3, r2
 8004cde:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ce6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	011a      	lsls	r2, r3, #4
 8004cf0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004cfa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004cfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004d10:	801a      	strh	r2, [r3, #0]
 8004d12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004d20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	785b      	ldrb	r3, [r3, #1]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f040 809d 	bne.w	8004e6c <USB_EPStartXfer+0x1244>
 8004d32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004d40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	461a      	mov	r2, r3
 8004d52:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004d56:	4413      	add	r3, r2
 8004d58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004d5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	011a      	lsls	r2, r3, #4
 8004d6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004d6e:	4413      	add	r3, r2
 8004d70:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004d74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004d78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d7c:	881b      	ldrh	r3, [r3, #0]
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d8a:	801a      	strh	r2, [r3, #0]
 8004d8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	2b3e      	cmp	r3, #62	@ 0x3e
 8004d9a:	d92b      	bls.n	8004df4 <USB_EPStartXfer+0x11cc>
 8004d9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004da0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	095b      	lsrs	r3, r3, #5
 8004daa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004dae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004db2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	f003 031f 	and.w	r3, r3, #31
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d104      	bne.n	8004dcc <USB_EPStartXfer+0x11a4>
 8004dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004dcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	029b      	lsls	r3, r3, #10
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	4313      	orrs	r3, r2
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004df0:	801a      	strh	r2, [r3, #0]
 8004df2:	e069      	b.n	8004ec8 <USB_EPStartXfer+0x12a0>
 8004df4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004df8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10c      	bne.n	8004e1e <USB_EPStartXfer+0x11f6>
 8004e04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e1a:	801a      	strh	r2, [r3, #0]
 8004e1c:	e054      	b.n	8004ec8 <USB_EPStartXfer+0x12a0>
 8004e1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	085b      	lsrs	r3, r3, #1
 8004e2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d004      	beq.n	8004e4e <USB_EPStartXfer+0x1226>
 8004e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e48:	3301      	adds	r3, #1
 8004e4a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e52:	881b      	ldrh	r3, [r3, #0]
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	029b      	lsls	r3, r3, #10
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	4313      	orrs	r3, r2
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e68:	801a      	strh	r2, [r3, #0]
 8004e6a:	e02d      	b.n	8004ec8 <USB_EPStartXfer+0x12a0>
 8004e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	785b      	ldrb	r3, [r3, #1]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d125      	bne.n	8004ec8 <USB_EPStartXfer+0x12a0>
 8004e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004e92:	4413      	add	r3, r2
 8004e94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004e98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	011a      	lsls	r2, r3, #4
 8004ea6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004eaa:	4413      	add	r3, r2
 8004eac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004eb0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004eb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004ec6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004ec8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ecc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f000 8218 	beq.w	800530a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004eda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ede:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ee8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	881b      	ldrh	r3, [r3, #0]
 8004ef6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004efa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004efe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d005      	beq.n	8004f12 <USB_EPStartXfer+0x12ea>
 8004f06:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10d      	bne.n	8004f2e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004f12:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004f16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f040 81f5 	bne.w	800530a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004f20:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f040 81ee 	bne.w	800530a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8004f2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f54:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004f58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	441a      	add	r2, r3
 8004f72:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004f76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f82:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	8013      	strh	r3, [r2, #0]
 8004f8a:	e1be      	b.n	800530a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004f8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	78db      	ldrb	r3, [r3, #3]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	f040 81b4 	bne.w	8005306 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004f9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	699a      	ldr	r2, [r3, #24]
 8004faa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d917      	bls.n	8004fea <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8004fba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8004fca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699a      	ldr	r2, [r3, #24]
 8004fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fda:	1ad2      	subs	r2, r2, r3
 8004fdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fe0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	619a      	str	r2, [r3, #24]
 8004fe8:	e00e      	b.n	8005008 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8004fea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8004ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ffe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2200      	movs	r2, #0
 8005006:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800500c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	785b      	ldrb	r3, [r3, #1]
 8005014:	2b00      	cmp	r3, #0
 8005016:	f040 8085 	bne.w	8005124 <USB_EPStartXfer+0x14fc>
 800501a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800501e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800502c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005036:	b29b      	uxth	r3, r3
 8005038:	461a      	mov	r2, r3
 800503a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800503e:	4413      	add	r3, r2
 8005040:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005048:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	011a      	lsls	r2, r3, #4
 8005052:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005056:	4413      	add	r3, r2
 8005058:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800505c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005060:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	b29b      	uxth	r3, r3
 8005068:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800506c:	b29a      	uxth	r2, r3
 800506e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005072:	801a      	strh	r2, [r3, #0]
 8005074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005078:	2b3e      	cmp	r3, #62	@ 0x3e
 800507a:	d923      	bls.n	80050c4 <USB_EPStartXfer+0x149c>
 800507c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005080:	095b      	lsrs	r3, r3, #5
 8005082:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800508a:	f003 031f 	and.w	r3, r3, #31
 800508e:	2b00      	cmp	r3, #0
 8005090:	d104      	bne.n	800509c <USB_EPStartXfer+0x1474>
 8005092:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005096:	3b01      	subs	r3, #1
 8005098:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800509c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	029b      	lsls	r3, r3, #10
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	4313      	orrs	r3, r2
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80050c0:	801a      	strh	r2, [r3, #0]
 80050c2:	e060      	b.n	8005186 <USB_EPStartXfer+0x155e>
 80050c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10c      	bne.n	80050e6 <USB_EPStartXfer+0x14be>
 80050cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80050d0:	881b      	ldrh	r3, [r3, #0]
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050dc:	b29a      	uxth	r2, r3
 80050de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80050e2:	801a      	strh	r2, [r3, #0]
 80050e4:	e04f      	b.n	8005186 <USB_EPStartXfer+0x155e>
 80050e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ea:	085b      	lsrs	r3, r3, #1
 80050ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80050f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d004      	beq.n	8005106 <USB_EPStartXfer+0x14de>
 80050fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005100:	3301      	adds	r3, #1
 8005102:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005106:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	b29a      	uxth	r2, r3
 800510e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005112:	b29b      	uxth	r3, r3
 8005114:	029b      	lsls	r3, r3, #10
 8005116:	b29b      	uxth	r3, r3
 8005118:	4313      	orrs	r3, r2
 800511a:	b29a      	uxth	r2, r3
 800511c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005120:	801a      	strh	r2, [r3, #0]
 8005122:	e030      	b.n	8005186 <USB_EPStartXfer+0x155e>
 8005124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005128:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	785b      	ldrb	r3, [r3, #1]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d128      	bne.n	8005186 <USB_EPStartXfer+0x155e>
 8005134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005138:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005146:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005150:	b29b      	uxth	r3, r3
 8005152:	461a      	mov	r2, r3
 8005154:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005158:	4413      	add	r3, r2
 800515a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800515e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005162:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	011a      	lsls	r2, r3, #4
 800516c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005170:	4413      	add	r3, r2
 8005172:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005176:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800517a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800517e:	b29a      	uxth	r2, r3
 8005180:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005184:	801a      	strh	r2, [r3, #0]
 8005186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800518a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005198:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	785b      	ldrb	r3, [r3, #1]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f040 8085 	bne.w	80052b0 <USB_EPStartXfer+0x1688>
 80051a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80051b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	461a      	mov	r2, r3
 80051c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80051ca:	4413      	add	r3, r2
 80051cc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80051d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	011a      	lsls	r2, r3, #4
 80051de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80051e2:	4413      	add	r3, r2
 80051e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80051e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80051fe:	801a      	strh	r2, [r3, #0]
 8005200:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005204:	2b3e      	cmp	r3, #62	@ 0x3e
 8005206:	d923      	bls.n	8005250 <USB_EPStartXfer+0x1628>
 8005208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800520c:	095b      	lsrs	r3, r3, #5
 800520e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005216:	f003 031f 	and.w	r3, r3, #31
 800521a:	2b00      	cmp	r3, #0
 800521c:	d104      	bne.n	8005228 <USB_EPStartXfer+0x1600>
 800521e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005222:	3b01      	subs	r3, #1
 8005224:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005228:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800522c:	881b      	ldrh	r3, [r3, #0]
 800522e:	b29a      	uxth	r2, r3
 8005230:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005234:	b29b      	uxth	r3, r3
 8005236:	029b      	lsls	r3, r3, #10
 8005238:	b29b      	uxth	r3, r3
 800523a:	4313      	orrs	r3, r2
 800523c:	b29b      	uxth	r3, r3
 800523e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005242:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005246:	b29a      	uxth	r2, r3
 8005248:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800524c:	801a      	strh	r2, [r3, #0]
 800524e:	e05c      	b.n	800530a <USB_EPStartXfer+0x16e2>
 8005250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10c      	bne.n	8005272 <USB_EPStartXfer+0x164a>
 8005258:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	b29b      	uxth	r3, r3
 8005260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005268:	b29a      	uxth	r2, r3
 800526a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800526e:	801a      	strh	r2, [r3, #0]
 8005270:	e04b      	b.n	800530a <USB_EPStartXfer+0x16e2>
 8005272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005276:	085b      	lsrs	r3, r3, #1
 8005278:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800527c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	2b00      	cmp	r3, #0
 8005286:	d004      	beq.n	8005292 <USB_EPStartXfer+0x166a>
 8005288:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800528c:	3301      	adds	r3, #1
 800528e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005292:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005296:	881b      	ldrh	r3, [r3, #0]
 8005298:	b29a      	uxth	r2, r3
 800529a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800529e:	b29b      	uxth	r3, r3
 80052a0:	029b      	lsls	r3, r3, #10
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	4313      	orrs	r3, r2
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80052ac:	801a      	strh	r2, [r3, #0]
 80052ae:	e02c      	b.n	800530a <USB_EPStartXfer+0x16e2>
 80052b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	785b      	ldrb	r3, [r3, #1]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d124      	bne.n	800530a <USB_EPStartXfer+0x16e2>
 80052c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	461a      	mov	r2, r3
 80052d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80052d6:	4413      	add	r3, r2
 80052d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80052dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	011a      	lsls	r2, r3, #4
 80052ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80052ee:	4413      	add	r3, r2
 80052f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80052f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80052f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005302:	801a      	strh	r2, [r3, #0]
 8005304:	e001      	b.n	800530a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e03a      	b.n	8005380 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800530a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800530e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	881b      	ldrh	r3, [r3, #0]
 8005326:	b29b      	uxth	r3, r3
 8005328:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800532c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005330:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005334:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005338:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800533c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005340:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005344:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005348:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800534c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005350:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800535a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	441a      	add	r2, r3
 8005366:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800536a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800536e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005372:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005376:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800537a:	b29b      	uxth	r3, r3
 800537c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800538a:	b480      	push	{r7}
 800538c:	b085      	sub	sp, #20
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
 8005392:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	785b      	ldrb	r3, [r3, #1]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d020      	beq.n	80053de <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4413      	add	r3, r2
 80053a6:	881b      	ldrh	r3, [r3, #0]
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053b2:	81bb      	strh	r3, [r7, #12]
 80053b4:	89bb      	ldrh	r3, [r7, #12]
 80053b6:	f083 0310 	eor.w	r3, r3, #16
 80053ba:	81bb      	strh	r3, [r7, #12]
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	441a      	add	r2, r3
 80053c6:	89bb      	ldrh	r3, [r7, #12]
 80053c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053d8:	b29b      	uxth	r3, r3
 80053da:	8013      	strh	r3, [r2, #0]
 80053dc:	e01f      	b.n	800541e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	881b      	ldrh	r3, [r3, #0]
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053f4:	81fb      	strh	r3, [r7, #14]
 80053f6:	89fb      	ldrh	r3, [r7, #14]
 80053f8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80053fc:	81fb      	strh	r3, [r7, #14]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	441a      	add	r2, r3
 8005408:	89fb      	ldrh	r3, [r7, #14]
 800540a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800540e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005412:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800541a:	b29b      	uxth	r3, r3
 800541c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3714      	adds	r7, #20
 8005424:	46bd      	mov	sp, r7
 8005426:	bc80      	pop	{r7}
 8005428:	4770      	bx	lr

0800542a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800542a:	b480      	push	{r7}
 800542c:	b087      	sub	sp, #28
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
 8005432:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	7b1b      	ldrb	r3, [r3, #12]
 8005438:	2b00      	cmp	r3, #0
 800543a:	f040 809d 	bne.w	8005578 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	785b      	ldrb	r3, [r3, #1]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d04c      	beq.n	80054e0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	823b      	strh	r3, [r7, #16]
 8005454:	8a3b      	ldrh	r3, [r7, #16]
 8005456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800545a:	2b00      	cmp	r3, #0
 800545c:	d01b      	beq.n	8005496 <USB_EPClearStall+0x6c>
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	881b      	ldrh	r3, [r3, #0]
 800546a:	b29b      	uxth	r3, r3
 800546c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005470:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005474:	81fb      	strh	r3, [r7, #14]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	441a      	add	r2, r3
 8005480:	89fb      	ldrh	r3, [r7, #14]
 8005482:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005486:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800548a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800548e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005492:	b29b      	uxth	r3, r3
 8005494:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	78db      	ldrb	r3, [r3, #3]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d06c      	beq.n	8005578 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054b4:	81bb      	strh	r3, [r7, #12]
 80054b6:	89bb      	ldrh	r3, [r7, #12]
 80054b8:	f083 0320 	eor.w	r3, r3, #32
 80054bc:	81bb      	strh	r3, [r7, #12]
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	441a      	add	r2, r3
 80054c8:	89bb      	ldrh	r3, [r7, #12]
 80054ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054da:	b29b      	uxth	r3, r3
 80054dc:	8013      	strh	r3, [r2, #0]
 80054de:	e04b      	b.n	8005578 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	82fb      	strh	r3, [r7, #22]
 80054ee:	8afb      	ldrh	r3, [r7, #22]
 80054f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d01b      	beq.n	8005530 <USB_EPClearStall+0x106>
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	881b      	ldrh	r3, [r3, #0]
 8005504:	b29b      	uxth	r3, r3
 8005506:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800550a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800550e:	82bb      	strh	r3, [r7, #20]
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	441a      	add	r2, r3
 800551a:	8abb      	ldrh	r3, [r7, #20]
 800551c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005520:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005524:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005528:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800552c:	b29b      	uxth	r3, r3
 800552e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	881b      	ldrh	r3, [r3, #0]
 800553c:	b29b      	uxth	r3, r3
 800553e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005546:	827b      	strh	r3, [r7, #18]
 8005548:	8a7b      	ldrh	r3, [r7, #18]
 800554a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800554e:	827b      	strh	r3, [r7, #18]
 8005550:	8a7b      	ldrh	r3, [r7, #18]
 8005552:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005556:	827b      	strh	r3, [r7, #18]
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	441a      	add	r2, r3
 8005562:	8a7b      	ldrh	r3, [r7, #18]
 8005564:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005568:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800556c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005570:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005574:	b29b      	uxth	r3, r3
 8005576:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	371c      	adds	r7, #28
 800557e:	46bd      	mov	sp, r7
 8005580:	bc80      	pop	{r7}
 8005582:	4770      	bx	lr

08005584 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	460b      	mov	r3, r1
 800558e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005590:	78fb      	ldrb	r3, [r7, #3]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d103      	bne.n	800559e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2280      	movs	r2, #128	@ 0x80
 800559a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bc80      	pop	{r7}
 80055a8:	4770      	bx	lr

080055aa <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b083      	sub	sp, #12
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bc80      	pop	{r7}
 80055bc:	4770      	bx	lr

080055be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80055be:	b480      	push	{r7}
 80055c0:	b083      	sub	sp, #12
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bc80      	pop	{r7}
 80055d0:	4770      	bx	lr

080055d2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b085      	sub	sp, #20
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80055e4:	68fb      	ldr	r3, [r7, #12]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bc80      	pop	{r7}
 80055ee:	4770      	bx	lr

080055f0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	bc80      	pop	{r7}
 8005604:	4770      	bx	lr

08005606 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005606:	b480      	push	{r7}
 8005608:	b08b      	sub	sp, #44	@ 0x2c
 800560a:	af00      	add	r7, sp, #0
 800560c:	60f8      	str	r0, [r7, #12]
 800560e:	60b9      	str	r1, [r7, #8]
 8005610:	4611      	mov	r1, r2
 8005612:	461a      	mov	r2, r3
 8005614:	460b      	mov	r3, r1
 8005616:	80fb      	strh	r3, [r7, #6]
 8005618:	4613      	mov	r3, r2
 800561a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800561c:	88bb      	ldrh	r3, [r7, #4]
 800561e:	3301      	adds	r3, #1
 8005620:	085b      	lsrs	r3, r3, #1
 8005622:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800562c:	88fb      	ldrh	r3, [r7, #6]
 800562e:	005a      	lsls	r2, r3, #1
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	4413      	add	r3, r2
 8005634:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005638:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	627b      	str	r3, [r7, #36]	@ 0x24
 800563e:	e01f      	b.n	8005680 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	3301      	adds	r3, #1
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	b21b      	sxth	r3, r3
 800564e:	021b      	lsls	r3, r3, #8
 8005650:	b21a      	sxth	r2, r3
 8005652:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005656:	4313      	orrs	r3, r2
 8005658:	b21b      	sxth	r3, r3
 800565a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800565c:	6a3b      	ldr	r3, [r7, #32]
 800565e:	8a7a      	ldrh	r2, [r7, #18]
 8005660:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	3302      	adds	r3, #2
 8005666:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005668:	6a3b      	ldr	r3, [r7, #32]
 800566a:	3302      	adds	r3, #2
 800566c:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	3301      	adds	r3, #1
 8005672:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	3301      	adds	r3, #1
 8005678:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800567a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567c:	3b01      	subs	r3, #1
 800567e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1dc      	bne.n	8005640 <USB_WritePMA+0x3a>
  }
}
 8005686:	bf00      	nop
 8005688:	bf00      	nop
 800568a:	372c      	adds	r7, #44	@ 0x2c
 800568c:	46bd      	mov	sp, r7
 800568e:	bc80      	pop	{r7}
 8005690:	4770      	bx	lr

08005692 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005692:	b480      	push	{r7}
 8005694:	b08b      	sub	sp, #44	@ 0x2c
 8005696:	af00      	add	r7, sp, #0
 8005698:	60f8      	str	r0, [r7, #12]
 800569a:	60b9      	str	r1, [r7, #8]
 800569c:	4611      	mov	r1, r2
 800569e:	461a      	mov	r2, r3
 80056a0:	460b      	mov	r3, r1
 80056a2:	80fb      	strh	r3, [r7, #6]
 80056a4:	4613      	mov	r3, r2
 80056a6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80056a8:	88bb      	ldrh	r3, [r7, #4]
 80056aa:	085b      	lsrs	r3, r3, #1
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80056b8:	88fb      	ldrh	r3, [r7, #6]
 80056ba:	005a      	lsls	r2, r3, #1
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	4413      	add	r3, r2
 80056c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80056c4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80056ca:	e01b      	b.n	8005704 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	881b      	ldrh	r3, [r3, #0]
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80056d4:	6a3b      	ldr	r3, [r7, #32]
 80056d6:	3302      	adds	r3, #2
 80056d8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	3301      	adds	r3, #1
 80056e6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	0a1b      	lsrs	r3, r3, #8
 80056ec:	b2da      	uxtb	r2, r3
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	3301      	adds	r3, #1
 80056f6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80056f8:	6a3b      	ldr	r3, [r7, #32]
 80056fa:	3302      	adds	r3, #2
 80056fc:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80056fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005700:	3b01      	subs	r3, #1
 8005702:	627b      	str	r3, [r7, #36]	@ 0x24
 8005704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1e0      	bne.n	80056cc <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800570a:	88bb      	ldrh	r3, [r7, #4]
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	b29b      	uxth	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d007      	beq.n	8005726 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8005716:	6a3b      	ldr	r3, [r7, #32]
 8005718:	881b      	ldrh	r3, [r3, #0]
 800571a:	b29b      	uxth	r3, r3
 800571c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	b2da      	uxtb	r2, r3
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	701a      	strb	r2, [r3, #0]
  }
}
 8005726:	bf00      	nop
 8005728:	372c      	adds	r7, #44	@ 0x2c
 800572a:	46bd      	mov	sp, r7
 800572c:	bc80      	pop	{r7}
 800572e:	4770      	bx	lr

08005730 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	460b      	mov	r3, r1
 800573a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800573c:	2300      	movs	r3, #0
 800573e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	7c1b      	ldrb	r3, [r3, #16]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d115      	bne.n	8005774 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005748:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800574c:	2202      	movs	r2, #2
 800574e:	2181      	movs	r1, #129	@ 0x81
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f001 fe2c 	bl	80073ae <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800575c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005760:	2202      	movs	r2, #2
 8005762:	2101      	movs	r1, #1
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f001 fe22 	bl	80073ae <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8005772:	e012      	b.n	800579a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005774:	2340      	movs	r3, #64	@ 0x40
 8005776:	2202      	movs	r2, #2
 8005778:	2181      	movs	r1, #129	@ 0x81
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f001 fe17 	bl	80073ae <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005786:	2340      	movs	r3, #64	@ 0x40
 8005788:	2202      	movs	r2, #2
 800578a:	2101      	movs	r1, #1
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f001 fe0e 	bl	80073ae <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800579a:	2308      	movs	r3, #8
 800579c:	2203      	movs	r2, #3
 800579e:	2182      	movs	r1, #130	@ 0x82
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f001 fe04 	bl	80073ae <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80057ac:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80057b0:	f001 ff24 	bl	80075fc <USBD_static_malloc>
 80057b4:	4602      	mov	r2, r0
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d102      	bne.n	80057cc <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80057c6:	2301      	movs	r3, #1
 80057c8:	73fb      	strb	r3, [r7, #15]
 80057ca:	e026      	b.n	800581a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80057d2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	7c1b      	ldrb	r3, [r3, #16]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d109      	bne.n	800580a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80057fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005800:	2101      	movs	r1, #1
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f001 fec3 	bl	800758e <USBD_LL_PrepareReceive>
 8005808:	e007      	b.n	800581a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005810:	2340      	movs	r3, #64	@ 0x40
 8005812:	2101      	movs	r1, #1
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f001 feba 	bl	800758e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800581a:	7bfb      	ldrb	r3, [r7, #15]
}
 800581c:	4618      	mov	r0, r3
 800581e:	3710      	adds	r7, #16
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	460b      	mov	r3, r1
 800582e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005834:	2181      	movs	r1, #129	@ 0x81
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f001 fddf 	bl	80073fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005842:	2101      	movs	r1, #1
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f001 fdd8 	bl	80073fa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005852:	2182      	movs	r1, #130	@ 0x82
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f001 fdd0 	bl	80073fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00e      	beq.n	8005888 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800587a:	4618      	mov	r0, r3
 800587c:	f001 feca 	bl	8007614 <USBD_static_free>
    pdev->pClassData = NULL;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8005888:	7bfb      	ldrb	r3, [r7, #15]
}
 800588a:	4618      	mov	r0, r3
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b086      	sub	sp, #24
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
 800589a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80058a2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80058a4:	2300      	movs	r3, #0
 80058a6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80058a8:	2300      	movs	r3, #0
 80058aa:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80058ac:	2300      	movs	r3, #0
 80058ae:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d039      	beq.n	8005930 <USBD_CDC_Setup+0x9e>
 80058bc:	2b20      	cmp	r3, #32
 80058be:	d17f      	bne.n	80059c0 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	88db      	ldrh	r3, [r3, #6]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d029      	beq.n	800591c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	b25b      	sxtb	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	da11      	bge.n	80058f6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80058de:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	88d2      	ldrh	r2, [r2, #6]
 80058e4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80058e6:	6939      	ldr	r1, [r7, #16]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	88db      	ldrh	r3, [r3, #6]
 80058ec:	461a      	mov	r2, r3
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f001 f9d6 	bl	8006ca0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80058f4:	e06b      	b.n	80059ce <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	785a      	ldrb	r2, [r3, #1]
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	88db      	ldrh	r3, [r3, #6]
 8005904:	b2da      	uxtb	r2, r3
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800590c:	6939      	ldr	r1, [r7, #16]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	88db      	ldrh	r3, [r3, #6]
 8005912:	461a      	mov	r2, r3
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f001 f9f1 	bl	8006cfc <USBD_CtlPrepareRx>
      break;
 800591a:	e058      	b.n	80059ce <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	7850      	ldrb	r0, [r2, #1]
 8005928:	2200      	movs	r2, #0
 800592a:	6839      	ldr	r1, [r7, #0]
 800592c:	4798      	blx	r3
      break;
 800592e:	e04e      	b.n	80059ce <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	785b      	ldrb	r3, [r3, #1]
 8005934:	2b0b      	cmp	r3, #11
 8005936:	d02e      	beq.n	8005996 <USBD_CDC_Setup+0x104>
 8005938:	2b0b      	cmp	r3, #11
 800593a:	dc38      	bgt.n	80059ae <USBD_CDC_Setup+0x11c>
 800593c:	2b00      	cmp	r3, #0
 800593e:	d002      	beq.n	8005946 <USBD_CDC_Setup+0xb4>
 8005940:	2b0a      	cmp	r3, #10
 8005942:	d014      	beq.n	800596e <USBD_CDC_Setup+0xdc>
 8005944:	e033      	b.n	80059ae <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800594c:	2b03      	cmp	r3, #3
 800594e:	d107      	bne.n	8005960 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005950:	f107 030c 	add.w	r3, r7, #12
 8005954:	2202      	movs	r2, #2
 8005956:	4619      	mov	r1, r3
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f001 f9a1 	bl	8006ca0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800595e:	e02e      	b.n	80059be <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005960:	6839      	ldr	r1, [r7, #0]
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f001 f932 	bl	8006bcc <USBD_CtlError>
            ret = USBD_FAIL;
 8005968:	2302      	movs	r3, #2
 800596a:	75fb      	strb	r3, [r7, #23]
          break;
 800596c:	e027      	b.n	80059be <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005974:	2b03      	cmp	r3, #3
 8005976:	d107      	bne.n	8005988 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005978:	f107 030f 	add.w	r3, r7, #15
 800597c:	2201      	movs	r2, #1
 800597e:	4619      	mov	r1, r3
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f001 f98d 	bl	8006ca0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005986:	e01a      	b.n	80059be <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005988:	6839      	ldr	r1, [r7, #0]
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f001 f91e 	bl	8006bcc <USBD_CtlError>
            ret = USBD_FAIL;
 8005990:	2302      	movs	r3, #2
 8005992:	75fb      	strb	r3, [r7, #23]
          break;
 8005994:	e013      	b.n	80059be <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800599c:	2b03      	cmp	r3, #3
 800599e:	d00d      	beq.n	80059bc <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80059a0:	6839      	ldr	r1, [r7, #0]
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f001 f912 	bl	8006bcc <USBD_CtlError>
            ret = USBD_FAIL;
 80059a8:	2302      	movs	r3, #2
 80059aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80059ac:	e006      	b.n	80059bc <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80059ae:	6839      	ldr	r1, [r7, #0]
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f001 f90b 	bl	8006bcc <USBD_CtlError>
          ret = USBD_FAIL;
 80059b6:	2302      	movs	r3, #2
 80059b8:	75fb      	strb	r3, [r7, #23]
          break;
 80059ba:	e000      	b.n	80059be <USBD_CDC_Setup+0x12c>
          break;
 80059bc:	bf00      	nop
      }
      break;
 80059be:	e006      	b.n	80059ce <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80059c0:	6839      	ldr	r1, [r7, #0]
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f001 f902 	bl	8006bcc <USBD_CtlError>
      ret = USBD_FAIL;
 80059c8:	2302      	movs	r3, #2
 80059ca:	75fb      	strb	r3, [r7, #23]
      break;
 80059cc:	bf00      	nop
  }

  return ret;
 80059ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3718      	adds	r7, #24
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	460b      	mov	r3, r1
 80059e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80059ea:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80059f2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d03a      	beq.n	8005a74 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80059fe:	78fa      	ldrb	r2, [r7, #3]
 8005a00:	6879      	ldr	r1, [r7, #4]
 8005a02:	4613      	mov	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	440b      	add	r3, r1
 8005a0c:	331c      	adds	r3, #28
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d029      	beq.n	8005a68 <USBD_CDC_DataIn+0x90>
 8005a14:	78fa      	ldrb	r2, [r7, #3]
 8005a16:	6879      	ldr	r1, [r7, #4]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	440b      	add	r3, r1
 8005a22:	331c      	adds	r3, #28
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	78f9      	ldrb	r1, [r7, #3]
 8005a28:	68b8      	ldr	r0, [r7, #8]
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	440b      	add	r3, r1
 8005a30:	00db      	lsls	r3, r3, #3
 8005a32:	4403      	add	r3, r0
 8005a34:	3320      	adds	r3, #32
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	fbb2 f1f3 	udiv	r1, r2, r3
 8005a3c:	fb01 f303 	mul.w	r3, r1, r3
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d110      	bne.n	8005a68 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005a46:	78fa      	ldrb	r2, [r7, #3]
 8005a48:	6879      	ldr	r1, [r7, #4]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	440b      	add	r3, r1
 8005a54:	331c      	adds	r3, #28
 8005a56:	2200      	movs	r2, #0
 8005a58:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005a5a:	78f9      	ldrb	r1, [r7, #3]
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	2200      	movs	r2, #0
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f001 fd71 	bl	8007548 <USBD_LL_Transmit>
 8005a66:	e003      	b.n	8005a70 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8005a70:	2300      	movs	r3, #0
 8005a72:	e000      	b.n	8005a76 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005a74:	2302      	movs	r3, #2
  }
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b084      	sub	sp, #16
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	460b      	mov	r3, r1
 8005a88:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a90:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005a92:	78fb      	ldrb	r3, [r7, #3]
 8005a94:	4619      	mov	r1, r3
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f001 fd9c 	bl	80075d4 <USBD_LL_GetRxDataSize>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00d      	beq.n	8005aca <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005ac2:	4611      	mov	r1, r2
 8005ac4:	4798      	blx	r3

    return USBD_OK;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	e000      	b.n	8005acc <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005aca:	2302      	movs	r3, #2
  }
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ae2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d014      	beq.n	8005b18 <USBD_CDC_EP0_RxReady+0x44>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005af4:	2bff      	cmp	r3, #255	@ 0xff
 8005af6:	d00f      	beq.n	8005b18 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005b06:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005b0e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	22ff      	movs	r2, #255	@ 0xff
 8005b14:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
	...

08005b24 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2243      	movs	r2, #67	@ 0x43
 8005b30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005b32:	4b03      	ldr	r3, [pc, #12]	@ (8005b40 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bc80      	pop	{r7}
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	20000094 	.word	0x20000094

08005b44 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2243      	movs	r2, #67	@ 0x43
 8005b50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005b52:	4b03      	ldr	r3, [pc, #12]	@ (8005b60 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bc80      	pop	{r7}
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	20000050 	.word	0x20000050

08005b64 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2243      	movs	r2, #67	@ 0x43
 8005b70:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005b72:	4b03      	ldr	r3, [pc, #12]	@ (8005b80 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bc80      	pop	{r7}
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	200000d8 	.word	0x200000d8

08005b84 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	220a      	movs	r2, #10
 8005b90:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005b92:	4b03      	ldr	r3, [pc, #12]	@ (8005ba0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bc80      	pop	{r7}
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	2000000c 	.word	0x2000000c

08005ba4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005bae:	2302      	movs	r3, #2
 8005bb0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d005      	beq.n	8005bc4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3714      	adds	r7, #20
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bc80      	pop	{r7}
 8005bce:	4770      	bx	lr

08005bd0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005be4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005bee:	88fa      	ldrh	r2, [r7, #6]
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	371c      	adds	r7, #28
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bc80      	pop	{r7}
 8005c00:	4770      	bx	lr

08005c02 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b085      	sub	sp, #20
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c12:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3714      	adds	r7, #20
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bc80      	pop	{r7}
 8005c26:	4770      	bx	lr

08005c28 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d017      	beq.n	8005c72 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	7c1b      	ldrb	r3, [r3, #16]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d109      	bne.n	8005c5e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005c50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005c54:	2101      	movs	r1, #1
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f001 fc99 	bl	800758e <USBD_LL_PrepareReceive>
 8005c5c:	e007      	b.n	8005c6e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005c64:	2340      	movs	r3, #64	@ 0x40
 8005c66:	2101      	movs	r1, #1
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f001 fc90 	bl	800758e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	e000      	b.n	8005c74 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005c72:	2302      	movs	r3, #2
  }
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	4613      	mov	r3, r2
 8005c88:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005c90:	2302      	movs	r3, #2
 8005c92:	e01a      	b.n	8005cca <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d003      	beq.n	8005cb4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	79fa      	ldrb	r2, [r7, #7]
 8005cc0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f001 fafe 	bl	80072c4 <USBD_LL_Init>

  return USBD_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b085      	sub	sp, #20
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
 8005cda:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d006      	beq.n	8005cf4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	683a      	ldr	r2, [r7, #0]
 8005cea:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	73fb      	strb	r3, [r7, #15]
 8005cf2:	e001      	b.n	8005cf8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bc80      	pop	{r7}
 8005d02:	4770      	bx	lr

08005d04 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f001 fb33 	bl	8007378 <USBD_LL_Start>

  return USBD_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3708      	adds	r7, #8
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bc80      	pop	{r7}
 8005d2e:	4770      	bx	lr

08005d30 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	460b      	mov	r3, r1
 8005d3a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00c      	beq.n	8005d64 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	78fa      	ldrb	r2, [r7, #3]
 8005d54:	4611      	mov	r1, r2
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	4798      	blx	r3
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005d60:	2300      	movs	r3, #0
 8005d62:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b082      	sub	sp, #8
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
 8005d76:	460b      	mov	r3, r1
 8005d78:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	78fa      	ldrb	r2, [r7, #3]
 8005d84:	4611      	mov	r1, r2
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	4798      	blx	r3

  return USBD_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8005da4:	6839      	ldr	r1, [r7, #0]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 fed7 	bl	8006b5a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005dba:	461a      	mov	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005dc8:	f003 031f 	and.w	r3, r3, #31
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d016      	beq.n	8005dfe <USBD_LL_SetupStage+0x6a>
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d81c      	bhi.n	8005e0e <USBD_LL_SetupStage+0x7a>
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d002      	beq.n	8005dde <USBD_LL_SetupStage+0x4a>
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d008      	beq.n	8005dee <USBD_LL_SetupStage+0x5a>
 8005ddc:	e017      	b.n	8005e0e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8005de4:	4619      	mov	r1, r3
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f9ca 	bl	8006180 <USBD_StdDevReq>
      break;
 8005dec:	e01a      	b.n	8005e24 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8005df4:	4619      	mov	r1, r3
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 fa2c 	bl	8006254 <USBD_StdItfReq>
      break;
 8005dfc:	e012      	b.n	8005e24 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8005e04:	4619      	mov	r1, r3
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fa6c 	bl	80062e4 <USBD_StdEPReq>
      break;
 8005e0c:	e00a      	b.n	8005e24 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005e14:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f001 fb0b 	bl	8007438 <USBD_LL_StallEP>
      break;
 8005e22:	bf00      	nop
  }

  return USBD_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b086      	sub	sp, #24
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	60f8      	str	r0, [r7, #12]
 8005e36:	460b      	mov	r3, r1
 8005e38:	607a      	str	r2, [r7, #4]
 8005e3a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005e3c:	7afb      	ldrb	r3, [r7, #11]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d14b      	bne.n	8005eda <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005e48:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005e50:	2b03      	cmp	r3, #3
 8005e52:	d134      	bne.n	8005ebe <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	68da      	ldr	r2, [r3, #12]
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d919      	bls.n	8005e94 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	68da      	ldr	r2, [r3, #12]
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	1ad2      	subs	r2, r2, r3
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	68da      	ldr	r2, [r3, #12]
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d203      	bcs.n	8005e82 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	e002      	b.n	8005e88 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	461a      	mov	r2, r3
 8005e8a:	6879      	ldr	r1, [r7, #4]
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f000 ff53 	bl	8006d38 <USBD_CtlContinueRx>
 8005e92:	e038      	b.n	8005f06 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00a      	beq.n	8005eb6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005ea6:	2b03      	cmp	r3, #3
 8005ea8:	d105      	bne.n	8005eb6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f000 ff50 	bl	8006d5c <USBD_CtlSendStatus>
 8005ebc:	e023      	b.n	8005f06 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005ec4:	2b05      	cmp	r3, #5
 8005ec6:	d11e      	bne.n	8005f06 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005ed0:	2100      	movs	r1, #0
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	f001 fab0 	bl	8007438 <USBD_LL_StallEP>
 8005ed8:	e015      	b.n	8005f06 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00d      	beq.n	8005f02 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005eec:	2b03      	cmp	r3, #3
 8005eee:	d108      	bne.n	8005f02 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	7afa      	ldrb	r2, [r7, #11]
 8005efa:	4611      	mov	r1, r2
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	4798      	blx	r3
 8005f00:	e001      	b.n	8005f06 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005f02:	2302      	movs	r3, #2
 8005f04:	e000      	b.n	8005f08 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3718      	adds	r7, #24
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	460b      	mov	r3, r1
 8005f1a:	607a      	str	r2, [r7, #4]
 8005f1c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005f1e:	7afb      	ldrb	r3, [r7, #11]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d17f      	bne.n	8006024 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	3314      	adds	r3, #20
 8005f28:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d15c      	bne.n	8005fee <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	68da      	ldr	r2, [r3, #12]
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d915      	bls.n	8005f6c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	68da      	ldr	r2, [r3, #12]
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	1ad2      	subs	r2, r2, r3
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	461a      	mov	r2, r3
 8005f56:	6879      	ldr	r1, [r7, #4]
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 febd 	bl	8006cd8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f5e:	2300      	movs	r3, #0
 8005f60:	2200      	movs	r2, #0
 8005f62:	2100      	movs	r1, #0
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f001 fb12 	bl	800758e <USBD_LL_PrepareReceive>
 8005f6a:	e04e      	b.n	800600a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	6912      	ldr	r2, [r2, #16]
 8005f74:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f78:	fb01 f202 	mul.w	r2, r1, r2
 8005f7c:	1a9b      	subs	r3, r3, r2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d11c      	bne.n	8005fbc <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	689a      	ldr	r2, [r3, #8]
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d316      	bcc.n	8005fbc <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	689a      	ldr	r2, [r3, #8]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d20f      	bcs.n	8005fbc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f000 fe99 	bl	8006cd8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005fae:	2300      	movs	r3, #0
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f001 faea 	bl	800758e <USBD_LL_PrepareReceive>
 8005fba:	e026      	b.n	800600a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00a      	beq.n	8005fde <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005fce:	2b03      	cmp	r3, #3
 8005fd0:	d105      	bne.n	8005fde <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005fde:	2180      	movs	r1, #128	@ 0x80
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f001 fa29 	bl	8007438 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f000 fecb 	bl	8006d82 <USBD_CtlReceiveStatus>
 8005fec:	e00d      	b.n	800600a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005ff4:	2b04      	cmp	r3, #4
 8005ff6:	d004      	beq.n	8006002 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d103      	bne.n	800600a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006002:	2180      	movs	r1, #128	@ 0x80
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f001 fa17 	bl	8007438 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006010:	2b01      	cmp	r3, #1
 8006012:	d11d      	bne.n	8006050 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f7ff fe81 	bl	8005d1c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006022:	e015      	b.n	8006050 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800602a:	695b      	ldr	r3, [r3, #20]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00d      	beq.n	800604c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006036:	2b03      	cmp	r3, #3
 8006038:	d108      	bne.n	800604c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	7afa      	ldrb	r2, [r7, #11]
 8006044:	4611      	mov	r1, r2
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	4798      	blx	r3
 800604a:	e001      	b.n	8006050 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800604c:	2302      	movs	r3, #2
 800604e:	e000      	b.n	8006052 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3718      	adds	r7, #24
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800605a:	b580      	push	{r7, lr}
 800605c:	b082      	sub	sp, #8
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006062:	2340      	movs	r3, #64	@ 0x40
 8006064:	2200      	movs	r2, #0
 8006066:	2100      	movs	r1, #0
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f001 f9a0 	bl	80073ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2240      	movs	r2, #64	@ 0x40
 800607a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800607e:	2340      	movs	r3, #64	@ 0x40
 8006080:	2200      	movs	r2, #0
 8006082:	2180      	movs	r1, #128	@ 0x80
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f001 f992 	bl	80073ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2240      	movs	r2, #64	@ 0x40
 8006094:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d009      	beq.n	80060d2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	6852      	ldr	r2, [r2, #4]
 80060ca:	b2d2      	uxtb	r2, r2
 80060cc:	4611      	mov	r1, r2
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	4798      	blx	r3
  }

  return USBD_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3708      	adds	r7, #8
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	460b      	mov	r3, r1
 80060e6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	78fa      	ldrb	r2, [r7, #3]
 80060ec:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bc80      	pop	{r7}
 80060f8:	4770      	bx	lr

080060fa <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80060fa:	b480      	push	{r7}
 80060fc:	b083      	sub	sp, #12
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2204      	movs	r2, #4
 8006112:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	bc80      	pop	{r7}
 8006120:	4770      	bx	lr

08006122 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006122:	b480      	push	{r7}
 8006124:	b083      	sub	sp, #12
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006130:	2b04      	cmp	r3, #4
 8006132:	d105      	bne.n	8006140 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	370c      	adds	r7, #12
 8006146:	46bd      	mov	sp, r7
 8006148:	bc80      	pop	{r7}
 800614a:	4770      	bx	lr

0800614c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800615a:	2b03      	cmp	r3, #3
 800615c:	d10b      	bne.n	8006176 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d005      	beq.n	8006176 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800618a:	2300      	movs	r3, #0
 800618c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006196:	2b40      	cmp	r3, #64	@ 0x40
 8006198:	d005      	beq.n	80061a6 <USBD_StdDevReq+0x26>
 800619a:	2b40      	cmp	r3, #64	@ 0x40
 800619c:	d84f      	bhi.n	800623e <USBD_StdDevReq+0xbe>
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d009      	beq.n	80061b6 <USBD_StdDevReq+0x36>
 80061a2:	2b20      	cmp	r3, #32
 80061a4:	d14b      	bne.n	800623e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	6839      	ldr	r1, [r7, #0]
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	4798      	blx	r3
      break;
 80061b4:	e048      	b.n	8006248 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	785b      	ldrb	r3, [r3, #1]
 80061ba:	2b09      	cmp	r3, #9
 80061bc:	d839      	bhi.n	8006232 <USBD_StdDevReq+0xb2>
 80061be:	a201      	add	r2, pc, #4	@ (adr r2, 80061c4 <USBD_StdDevReq+0x44>)
 80061c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c4:	08006215 	.word	0x08006215
 80061c8:	08006229 	.word	0x08006229
 80061cc:	08006233 	.word	0x08006233
 80061d0:	0800621f 	.word	0x0800621f
 80061d4:	08006233 	.word	0x08006233
 80061d8:	080061f7 	.word	0x080061f7
 80061dc:	080061ed 	.word	0x080061ed
 80061e0:	08006233 	.word	0x08006233
 80061e4:	0800620b 	.word	0x0800620b
 80061e8:	08006201 	.word	0x08006201
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80061ec:	6839      	ldr	r1, [r7, #0]
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f9dc 	bl	80065ac <USBD_GetDescriptor>
          break;
 80061f4:	e022      	b.n	800623c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80061f6:	6839      	ldr	r1, [r7, #0]
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fb3f 	bl	800687c <USBD_SetAddress>
          break;
 80061fe:	e01d      	b.n	800623c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006200:	6839      	ldr	r1, [r7, #0]
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fb7e 	bl	8006904 <USBD_SetConfig>
          break;
 8006208:	e018      	b.n	800623c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800620a:	6839      	ldr	r1, [r7, #0]
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 fc07 	bl	8006a20 <USBD_GetConfig>
          break;
 8006212:	e013      	b.n	800623c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006214:	6839      	ldr	r1, [r7, #0]
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fc37 	bl	8006a8a <USBD_GetStatus>
          break;
 800621c:	e00e      	b.n	800623c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800621e:	6839      	ldr	r1, [r7, #0]
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 fc65 	bl	8006af0 <USBD_SetFeature>
          break;
 8006226:	e009      	b.n	800623c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006228:	6839      	ldr	r1, [r7, #0]
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 fc74 	bl	8006b18 <USBD_ClrFeature>
          break;
 8006230:	e004      	b.n	800623c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006232:	6839      	ldr	r1, [r7, #0]
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 fcc9 	bl	8006bcc <USBD_CtlError>
          break;
 800623a:	bf00      	nop
      }
      break;
 800623c:	e004      	b.n	8006248 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800623e:	6839      	ldr	r1, [r7, #0]
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 fcc3 	bl	8006bcc <USBD_CtlError>
      break;
 8006246:	bf00      	nop
  }

  return ret;
 8006248:	7bfb      	ldrb	r3, [r7, #15]
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop

08006254 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800625e:	2300      	movs	r3, #0
 8006260:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800626a:	2b40      	cmp	r3, #64	@ 0x40
 800626c:	d005      	beq.n	800627a <USBD_StdItfReq+0x26>
 800626e:	2b40      	cmp	r3, #64	@ 0x40
 8006270:	d82e      	bhi.n	80062d0 <USBD_StdItfReq+0x7c>
 8006272:	2b00      	cmp	r3, #0
 8006274:	d001      	beq.n	800627a <USBD_StdItfReq+0x26>
 8006276:	2b20      	cmp	r3, #32
 8006278:	d12a      	bne.n	80062d0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006280:	3b01      	subs	r3, #1
 8006282:	2b02      	cmp	r3, #2
 8006284:	d81d      	bhi.n	80062c2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	889b      	ldrh	r3, [r3, #4]
 800628a:	b2db      	uxtb	r3, r3
 800628c:	2b01      	cmp	r3, #1
 800628e:	d813      	bhi.n	80062b8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	6839      	ldr	r1, [r7, #0]
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	4798      	blx	r3
 800629e:	4603      	mov	r3, r0
 80062a0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	88db      	ldrh	r3, [r3, #6]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d110      	bne.n	80062cc <USBD_StdItfReq+0x78>
 80062aa:	7bfb      	ldrb	r3, [r7, #15]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d10d      	bne.n	80062cc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 fd53 	bl	8006d5c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80062b6:	e009      	b.n	80062cc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80062b8:	6839      	ldr	r1, [r7, #0]
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fc86 	bl	8006bcc <USBD_CtlError>
          break;
 80062c0:	e004      	b.n	80062cc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80062c2:	6839      	ldr	r1, [r7, #0]
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 fc81 	bl	8006bcc <USBD_CtlError>
          break;
 80062ca:	e000      	b.n	80062ce <USBD_StdItfReq+0x7a>
          break;
 80062cc:	bf00      	nop
      }
      break;
 80062ce:	e004      	b.n	80062da <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80062d0:	6839      	ldr	r1, [r7, #0]
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 fc7a 	bl	8006bcc <USBD_CtlError>
      break;
 80062d8:	bf00      	nop
  }

  return USBD_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80062ee:	2300      	movs	r3, #0
 80062f0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	889b      	ldrh	r3, [r3, #4]
 80062f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006300:	2b40      	cmp	r3, #64	@ 0x40
 8006302:	d007      	beq.n	8006314 <USBD_StdEPReq+0x30>
 8006304:	2b40      	cmp	r3, #64	@ 0x40
 8006306:	f200 8146 	bhi.w	8006596 <USBD_StdEPReq+0x2b2>
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00a      	beq.n	8006324 <USBD_StdEPReq+0x40>
 800630e:	2b20      	cmp	r3, #32
 8006310:	f040 8141 	bne.w	8006596 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	6839      	ldr	r1, [r7, #0]
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	4798      	blx	r3
      break;
 8006322:	e13d      	b.n	80065a0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800632c:	2b20      	cmp	r3, #32
 800632e:	d10a      	bne.n	8006346 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	6839      	ldr	r1, [r7, #0]
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	4798      	blx	r3
 800633e:	4603      	mov	r3, r0
 8006340:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006342:	7bfb      	ldrb	r3, [r7, #15]
 8006344:	e12d      	b.n	80065a2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	785b      	ldrb	r3, [r3, #1]
 800634a:	2b03      	cmp	r3, #3
 800634c:	d007      	beq.n	800635e <USBD_StdEPReq+0x7a>
 800634e:	2b03      	cmp	r3, #3
 8006350:	f300 811b 	bgt.w	800658a <USBD_StdEPReq+0x2a6>
 8006354:	2b00      	cmp	r3, #0
 8006356:	d072      	beq.n	800643e <USBD_StdEPReq+0x15a>
 8006358:	2b01      	cmp	r3, #1
 800635a:	d03a      	beq.n	80063d2 <USBD_StdEPReq+0xee>
 800635c:	e115      	b.n	800658a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006364:	2b02      	cmp	r3, #2
 8006366:	d002      	beq.n	800636e <USBD_StdEPReq+0x8a>
 8006368:	2b03      	cmp	r3, #3
 800636a:	d015      	beq.n	8006398 <USBD_StdEPReq+0xb4>
 800636c:	e02b      	b.n	80063c6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800636e:	7bbb      	ldrb	r3, [r7, #14]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00c      	beq.n	800638e <USBD_StdEPReq+0xaa>
 8006374:	7bbb      	ldrb	r3, [r7, #14]
 8006376:	2b80      	cmp	r3, #128	@ 0x80
 8006378:	d009      	beq.n	800638e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800637a:	7bbb      	ldrb	r3, [r7, #14]
 800637c:	4619      	mov	r1, r3
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f001 f85a 	bl	8007438 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006384:	2180      	movs	r1, #128	@ 0x80
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f001 f856 	bl	8007438 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800638c:	e020      	b.n	80063d0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800638e:	6839      	ldr	r1, [r7, #0]
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 fc1b 	bl	8006bcc <USBD_CtlError>
              break;
 8006396:	e01b      	b.n	80063d0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	885b      	ldrh	r3, [r3, #2]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10e      	bne.n	80063be <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80063a0:	7bbb      	ldrb	r3, [r7, #14]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00b      	beq.n	80063be <USBD_StdEPReq+0xda>
 80063a6:	7bbb      	ldrb	r3, [r7, #14]
 80063a8:	2b80      	cmp	r3, #128	@ 0x80
 80063aa:	d008      	beq.n	80063be <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	88db      	ldrh	r3, [r3, #6]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d104      	bne.n	80063be <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80063b4:	7bbb      	ldrb	r3, [r7, #14]
 80063b6:	4619      	mov	r1, r3
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f001 f83d 	bl	8007438 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 fccc 	bl	8006d5c <USBD_CtlSendStatus>

              break;
 80063c4:	e004      	b.n	80063d0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80063c6:	6839      	ldr	r1, [r7, #0]
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 fbff 	bl	8006bcc <USBD_CtlError>
              break;
 80063ce:	bf00      	nop
          }
          break;
 80063d0:	e0e0      	b.n	8006594 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d002      	beq.n	80063e2 <USBD_StdEPReq+0xfe>
 80063dc:	2b03      	cmp	r3, #3
 80063de:	d015      	beq.n	800640c <USBD_StdEPReq+0x128>
 80063e0:	e026      	b.n	8006430 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063e2:	7bbb      	ldrb	r3, [r7, #14]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00c      	beq.n	8006402 <USBD_StdEPReq+0x11e>
 80063e8:	7bbb      	ldrb	r3, [r7, #14]
 80063ea:	2b80      	cmp	r3, #128	@ 0x80
 80063ec:	d009      	beq.n	8006402 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80063ee:	7bbb      	ldrb	r3, [r7, #14]
 80063f0:	4619      	mov	r1, r3
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f001 f820 	bl	8007438 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80063f8:	2180      	movs	r1, #128	@ 0x80
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f001 f81c 	bl	8007438 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006400:	e01c      	b.n	800643c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006402:	6839      	ldr	r1, [r7, #0]
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 fbe1 	bl	8006bcc <USBD_CtlError>
              break;
 800640a:	e017      	b.n	800643c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	885b      	ldrh	r3, [r3, #2]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d112      	bne.n	800643a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006414:	7bbb      	ldrb	r3, [r7, #14]
 8006416:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800641a:	2b00      	cmp	r3, #0
 800641c:	d004      	beq.n	8006428 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800641e:	7bbb      	ldrb	r3, [r7, #14]
 8006420:	4619      	mov	r1, r3
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f001 f827 	bl	8007476 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 fc97 	bl	8006d5c <USBD_CtlSendStatus>
              }
              break;
 800642e:	e004      	b.n	800643a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006430:	6839      	ldr	r1, [r7, #0]
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 fbca 	bl	8006bcc <USBD_CtlError>
              break;
 8006438:	e000      	b.n	800643c <USBD_StdEPReq+0x158>
              break;
 800643a:	bf00      	nop
          }
          break;
 800643c:	e0aa      	b.n	8006594 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006444:	2b02      	cmp	r3, #2
 8006446:	d002      	beq.n	800644e <USBD_StdEPReq+0x16a>
 8006448:	2b03      	cmp	r3, #3
 800644a:	d032      	beq.n	80064b2 <USBD_StdEPReq+0x1ce>
 800644c:	e097      	b.n	800657e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800644e:	7bbb      	ldrb	r3, [r7, #14]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d007      	beq.n	8006464 <USBD_StdEPReq+0x180>
 8006454:	7bbb      	ldrb	r3, [r7, #14]
 8006456:	2b80      	cmp	r3, #128	@ 0x80
 8006458:	d004      	beq.n	8006464 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800645a:	6839      	ldr	r1, [r7, #0]
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fbb5 	bl	8006bcc <USBD_CtlError>
                break;
 8006462:	e091      	b.n	8006588 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006464:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006468:	2b00      	cmp	r3, #0
 800646a:	da0b      	bge.n	8006484 <USBD_StdEPReq+0x1a0>
 800646c:	7bbb      	ldrb	r3, [r7, #14]
 800646e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006472:	4613      	mov	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4413      	add	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	3310      	adds	r3, #16
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	4413      	add	r3, r2
 8006480:	3304      	adds	r3, #4
 8006482:	e00b      	b.n	800649c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006484:	7bbb      	ldrb	r3, [r7, #14]
 8006486:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800648a:	4613      	mov	r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	4413      	add	r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	4413      	add	r3, r2
 800649a:	3304      	adds	r3, #4
 800649c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	2200      	movs	r2, #0
 80064a2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	2202      	movs	r2, #2
 80064a8:	4619      	mov	r1, r3
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fbf8 	bl	8006ca0 <USBD_CtlSendData>
              break;
 80064b0:	e06a      	b.n	8006588 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80064b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	da11      	bge.n	80064de <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80064ba:	7bbb      	ldrb	r3, [r7, #14]
 80064bc:	f003 020f 	and.w	r2, r3, #15
 80064c0:	6879      	ldr	r1, [r7, #4]
 80064c2:	4613      	mov	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	440b      	add	r3, r1
 80064cc:	3318      	adds	r3, #24
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d117      	bne.n	8006504 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80064d4:	6839      	ldr	r1, [r7, #0]
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 fb78 	bl	8006bcc <USBD_CtlError>
                  break;
 80064dc:	e054      	b.n	8006588 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80064de:	7bbb      	ldrb	r3, [r7, #14]
 80064e0:	f003 020f 	and.w	r2, r3, #15
 80064e4:	6879      	ldr	r1, [r7, #4]
 80064e6:	4613      	mov	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	4413      	add	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	440b      	add	r3, r1
 80064f0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d104      	bne.n	8006504 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80064fa:	6839      	ldr	r1, [r7, #0]
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 fb65 	bl	8006bcc <USBD_CtlError>
                  break;
 8006502:	e041      	b.n	8006588 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006504:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006508:	2b00      	cmp	r3, #0
 800650a:	da0b      	bge.n	8006524 <USBD_StdEPReq+0x240>
 800650c:	7bbb      	ldrb	r3, [r7, #14]
 800650e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006512:	4613      	mov	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4413      	add	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	3310      	adds	r3, #16
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	4413      	add	r3, r2
 8006520:	3304      	adds	r3, #4
 8006522:	e00b      	b.n	800653c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006524:	7bbb      	ldrb	r3, [r7, #14]
 8006526:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800652a:	4613      	mov	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	4413      	add	r3, r2
 800653a:	3304      	adds	r3, #4
 800653c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800653e:	7bbb      	ldrb	r3, [r7, #14]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d002      	beq.n	800654a <USBD_StdEPReq+0x266>
 8006544:	7bbb      	ldrb	r3, [r7, #14]
 8006546:	2b80      	cmp	r3, #128	@ 0x80
 8006548:	d103      	bne.n	8006552 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	2200      	movs	r2, #0
 800654e:	601a      	str	r2, [r3, #0]
 8006550:	e00e      	b.n	8006570 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006552:	7bbb      	ldrb	r3, [r7, #14]
 8006554:	4619      	mov	r1, r3
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 ffac 	bl	80074b4 <USBD_LL_IsStallEP>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d003      	beq.n	800656a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	2201      	movs	r2, #1
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	e002      	b.n	8006570 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	2200      	movs	r2, #0
 800656e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	2202      	movs	r2, #2
 8006574:	4619      	mov	r1, r3
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fb92 	bl	8006ca0 <USBD_CtlSendData>
              break;
 800657c:	e004      	b.n	8006588 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800657e:	6839      	ldr	r1, [r7, #0]
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fb23 	bl	8006bcc <USBD_CtlError>
              break;
 8006586:	bf00      	nop
          }
          break;
 8006588:	e004      	b.n	8006594 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800658a:	6839      	ldr	r1, [r7, #0]
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fb1d 	bl	8006bcc <USBD_CtlError>
          break;
 8006592:	bf00      	nop
      }
      break;
 8006594:	e004      	b.n	80065a0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006596:	6839      	ldr	r1, [r7, #0]
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 fb17 	bl	8006bcc <USBD_CtlError>
      break;
 800659e:	bf00      	nop
  }

  return ret;
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
	...

080065ac <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80065b6:	2300      	movs	r3, #0
 80065b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80065ba:	2300      	movs	r3, #0
 80065bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80065be:	2300      	movs	r3, #0
 80065c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	885b      	ldrh	r3, [r3, #2]
 80065c6:	0a1b      	lsrs	r3, r3, #8
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	3b01      	subs	r3, #1
 80065cc:	2b06      	cmp	r3, #6
 80065ce:	f200 8128 	bhi.w	8006822 <USBD_GetDescriptor+0x276>
 80065d2:	a201      	add	r2, pc, #4	@ (adr r2, 80065d8 <USBD_GetDescriptor+0x2c>)
 80065d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d8:	080065f5 	.word	0x080065f5
 80065dc:	0800660d 	.word	0x0800660d
 80065e0:	0800664d 	.word	0x0800664d
 80065e4:	08006823 	.word	0x08006823
 80065e8:	08006823 	.word	0x08006823
 80065ec:	080067c3 	.word	0x080067c3
 80065f0:	080067ef 	.word	0x080067ef
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	7c12      	ldrb	r2, [r2, #16]
 8006600:	f107 0108 	add.w	r1, r7, #8
 8006604:	4610      	mov	r0, r2
 8006606:	4798      	blx	r3
 8006608:	60f8      	str	r0, [r7, #12]
      break;
 800660a:	e112      	b.n	8006832 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	7c1b      	ldrb	r3, [r3, #16]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10d      	bne.n	8006630 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800661a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800661c:	f107 0208 	add.w	r2, r7, #8
 8006620:	4610      	mov	r0, r2
 8006622:	4798      	blx	r3
 8006624:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	3301      	adds	r3, #1
 800662a:	2202      	movs	r2, #2
 800662c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800662e:	e100      	b.n	8006832 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006638:	f107 0208 	add.w	r2, r7, #8
 800663c:	4610      	mov	r0, r2
 800663e:	4798      	blx	r3
 8006640:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	3301      	adds	r3, #1
 8006646:	2202      	movs	r2, #2
 8006648:	701a      	strb	r2, [r3, #0]
      break;
 800664a:	e0f2      	b.n	8006832 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	885b      	ldrh	r3, [r3, #2]
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b05      	cmp	r3, #5
 8006654:	f200 80ac 	bhi.w	80067b0 <USBD_GetDescriptor+0x204>
 8006658:	a201      	add	r2, pc, #4	@ (adr r2, 8006660 <USBD_GetDescriptor+0xb4>)
 800665a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665e:	bf00      	nop
 8006660:	08006679 	.word	0x08006679
 8006664:	080066ad 	.word	0x080066ad
 8006668:	080066e1 	.word	0x080066e1
 800666c:	08006715 	.word	0x08006715
 8006670:	08006749 	.word	0x08006749
 8006674:	0800677d 	.word	0x0800677d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00b      	beq.n	800669c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	7c12      	ldrb	r2, [r2, #16]
 8006690:	f107 0108 	add.w	r1, r7, #8
 8006694:	4610      	mov	r0, r2
 8006696:	4798      	blx	r3
 8006698:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800669a:	e091      	b.n	80067c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800669c:	6839      	ldr	r1, [r7, #0]
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 fa94 	bl	8006bcc <USBD_CtlError>
            err++;
 80066a4:	7afb      	ldrb	r3, [r7, #11]
 80066a6:	3301      	adds	r3, #1
 80066a8:	72fb      	strb	r3, [r7, #11]
          break;
 80066aa:	e089      	b.n	80067c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00b      	beq.n	80066d0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	7c12      	ldrb	r2, [r2, #16]
 80066c4:	f107 0108 	add.w	r1, r7, #8
 80066c8:	4610      	mov	r0, r2
 80066ca:	4798      	blx	r3
 80066cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066ce:	e077      	b.n	80067c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066d0:	6839      	ldr	r1, [r7, #0]
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fa7a 	bl	8006bcc <USBD_CtlError>
            err++;
 80066d8:	7afb      	ldrb	r3, [r7, #11]
 80066da:	3301      	adds	r3, #1
 80066dc:	72fb      	strb	r3, [r7, #11]
          break;
 80066de:	e06f      	b.n	80067c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00b      	beq.n	8006704 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	7c12      	ldrb	r2, [r2, #16]
 80066f8:	f107 0108 	add.w	r1, r7, #8
 80066fc:	4610      	mov	r0, r2
 80066fe:	4798      	blx	r3
 8006700:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006702:	e05d      	b.n	80067c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006704:	6839      	ldr	r1, [r7, #0]
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 fa60 	bl	8006bcc <USBD_CtlError>
            err++;
 800670c:	7afb      	ldrb	r3, [r7, #11]
 800670e:	3301      	adds	r3, #1
 8006710:	72fb      	strb	r3, [r7, #11]
          break;
 8006712:	e055      	b.n	80067c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00b      	beq.n	8006738 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	7c12      	ldrb	r2, [r2, #16]
 800672c:	f107 0108 	add.w	r1, r7, #8
 8006730:	4610      	mov	r0, r2
 8006732:	4798      	blx	r3
 8006734:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006736:	e043      	b.n	80067c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006738:	6839      	ldr	r1, [r7, #0]
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 fa46 	bl	8006bcc <USBD_CtlError>
            err++;
 8006740:	7afb      	ldrb	r3, [r7, #11]
 8006742:	3301      	adds	r3, #1
 8006744:	72fb      	strb	r3, [r7, #11]
          break;
 8006746:	e03b      	b.n	80067c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800674e:	695b      	ldr	r3, [r3, #20]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00b      	beq.n	800676c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800675a:	695b      	ldr	r3, [r3, #20]
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	7c12      	ldrb	r2, [r2, #16]
 8006760:	f107 0108 	add.w	r1, r7, #8
 8006764:	4610      	mov	r0, r2
 8006766:	4798      	blx	r3
 8006768:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800676a:	e029      	b.n	80067c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800676c:	6839      	ldr	r1, [r7, #0]
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 fa2c 	bl	8006bcc <USBD_CtlError>
            err++;
 8006774:	7afb      	ldrb	r3, [r7, #11]
 8006776:	3301      	adds	r3, #1
 8006778:	72fb      	strb	r3, [r7, #11]
          break;
 800677a:	e021      	b.n	80067c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00b      	beq.n	80067a0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	7c12      	ldrb	r2, [r2, #16]
 8006794:	f107 0108 	add.w	r1, r7, #8
 8006798:	4610      	mov	r0, r2
 800679a:	4798      	blx	r3
 800679c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800679e:	e00f      	b.n	80067c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067a0:	6839      	ldr	r1, [r7, #0]
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fa12 	bl	8006bcc <USBD_CtlError>
            err++;
 80067a8:	7afb      	ldrb	r3, [r7, #11]
 80067aa:	3301      	adds	r3, #1
 80067ac:	72fb      	strb	r3, [r7, #11]
          break;
 80067ae:	e007      	b.n	80067c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80067b0:	6839      	ldr	r1, [r7, #0]
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 fa0a 	bl	8006bcc <USBD_CtlError>
          err++;
 80067b8:	7afb      	ldrb	r3, [r7, #11]
 80067ba:	3301      	adds	r3, #1
 80067bc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80067be:	e038      	b.n	8006832 <USBD_GetDescriptor+0x286>
 80067c0:	e037      	b.n	8006832 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	7c1b      	ldrb	r3, [r3, #16]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d109      	bne.n	80067de <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80067d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067d2:	f107 0208 	add.w	r2, r7, #8
 80067d6:	4610      	mov	r0, r2
 80067d8:	4798      	blx	r3
 80067da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067dc:	e029      	b.n	8006832 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067de:	6839      	ldr	r1, [r7, #0]
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 f9f3 	bl	8006bcc <USBD_CtlError>
        err++;
 80067e6:	7afb      	ldrb	r3, [r7, #11]
 80067e8:	3301      	adds	r3, #1
 80067ea:	72fb      	strb	r3, [r7, #11]
      break;
 80067ec:	e021      	b.n	8006832 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	7c1b      	ldrb	r3, [r3, #16]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10d      	bne.n	8006812 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80067fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067fe:	f107 0208 	add.w	r2, r7, #8
 8006802:	4610      	mov	r0, r2
 8006804:	4798      	blx	r3
 8006806:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	3301      	adds	r3, #1
 800680c:	2207      	movs	r2, #7
 800680e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006810:	e00f      	b.n	8006832 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006812:	6839      	ldr	r1, [r7, #0]
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 f9d9 	bl	8006bcc <USBD_CtlError>
        err++;
 800681a:	7afb      	ldrb	r3, [r7, #11]
 800681c:	3301      	adds	r3, #1
 800681e:	72fb      	strb	r3, [r7, #11]
      break;
 8006820:	e007      	b.n	8006832 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006822:	6839      	ldr	r1, [r7, #0]
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f9d1 	bl	8006bcc <USBD_CtlError>
      err++;
 800682a:	7afb      	ldrb	r3, [r7, #11]
 800682c:	3301      	adds	r3, #1
 800682e:	72fb      	strb	r3, [r7, #11]
      break;
 8006830:	bf00      	nop
  }

  if (err != 0U)
 8006832:	7afb      	ldrb	r3, [r7, #11]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d11c      	bne.n	8006872 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006838:	893b      	ldrh	r3, [r7, #8]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d011      	beq.n	8006862 <USBD_GetDescriptor+0x2b6>
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	88db      	ldrh	r3, [r3, #6]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00d      	beq.n	8006862 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	88da      	ldrh	r2, [r3, #6]
 800684a:	893b      	ldrh	r3, [r7, #8]
 800684c:	4293      	cmp	r3, r2
 800684e:	bf28      	it	cs
 8006850:	4613      	movcs	r3, r2
 8006852:	b29b      	uxth	r3, r3
 8006854:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006856:	893b      	ldrh	r3, [r7, #8]
 8006858:	461a      	mov	r2, r3
 800685a:	68f9      	ldr	r1, [r7, #12]
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 fa1f 	bl	8006ca0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	88db      	ldrh	r3, [r3, #6]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d104      	bne.n	8006874 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fa76 	bl	8006d5c <USBD_CtlSendStatus>
 8006870:	e000      	b.n	8006874 <USBD_GetDescriptor+0x2c8>
    return;
 8006872:	bf00      	nop
    }
  }
}
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop

0800687c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	889b      	ldrh	r3, [r3, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d130      	bne.n	80068f0 <USBD_SetAddress+0x74>
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	88db      	ldrh	r3, [r3, #6]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d12c      	bne.n	80068f0 <USBD_SetAddress+0x74>
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	885b      	ldrh	r3, [r3, #2]
 800689a:	2b7f      	cmp	r3, #127	@ 0x7f
 800689c:	d828      	bhi.n	80068f0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	885b      	ldrh	r3, [r3, #2]
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068b0:	2b03      	cmp	r3, #3
 80068b2:	d104      	bne.n	80068be <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80068b4:	6839      	ldr	r1, [r7, #0]
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f988 	bl	8006bcc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068bc:	e01d      	b.n	80068fa <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	7bfa      	ldrb	r2, [r7, #15]
 80068c2:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80068c6:	7bfb      	ldrb	r3, [r7, #15]
 80068c8:	4619      	mov	r1, r3
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fe1d 	bl	800750a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fa43 	bl	8006d5c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80068d6:	7bfb      	ldrb	r3, [r7, #15]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d004      	beq.n	80068e6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2202      	movs	r2, #2
 80068e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068e4:	e009      	b.n	80068fa <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2201      	movs	r2, #1
 80068ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ee:	e004      	b.n	80068fa <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80068f0:	6839      	ldr	r1, [r7, #0]
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f96a 	bl	8006bcc <USBD_CtlError>
  }
}
 80068f8:	bf00      	nop
 80068fa:	bf00      	nop
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
	...

08006904 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	885b      	ldrh	r3, [r3, #2]
 8006912:	b2da      	uxtb	r2, r3
 8006914:	4b41      	ldr	r3, [pc, #260]	@ (8006a1c <USBD_SetConfig+0x118>)
 8006916:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006918:	4b40      	ldr	r3, [pc, #256]	@ (8006a1c <USBD_SetConfig+0x118>)
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d904      	bls.n	800692a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006920:	6839      	ldr	r1, [r7, #0]
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f952 	bl	8006bcc <USBD_CtlError>
 8006928:	e075      	b.n	8006a16 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006930:	2b02      	cmp	r3, #2
 8006932:	d002      	beq.n	800693a <USBD_SetConfig+0x36>
 8006934:	2b03      	cmp	r3, #3
 8006936:	d023      	beq.n	8006980 <USBD_SetConfig+0x7c>
 8006938:	e062      	b.n	8006a00 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800693a:	4b38      	ldr	r3, [pc, #224]	@ (8006a1c <USBD_SetConfig+0x118>)
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d01a      	beq.n	8006978 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006942:	4b36      	ldr	r3, [pc, #216]	@ (8006a1c <USBD_SetConfig+0x118>)
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	461a      	mov	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2203      	movs	r2, #3
 8006950:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006954:	4b31      	ldr	r3, [pc, #196]	@ (8006a1c <USBD_SetConfig+0x118>)
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	4619      	mov	r1, r3
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f7ff f9e8 	bl	8005d30 <USBD_SetClassConfig>
 8006960:	4603      	mov	r3, r0
 8006962:	2b02      	cmp	r3, #2
 8006964:	d104      	bne.n	8006970 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006966:	6839      	ldr	r1, [r7, #0]
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 f92f 	bl	8006bcc <USBD_CtlError>
            return;
 800696e:	e052      	b.n	8006a16 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 f9f3 	bl	8006d5c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006976:	e04e      	b.n	8006a16 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 f9ef 	bl	8006d5c <USBD_CtlSendStatus>
        break;
 800697e:	e04a      	b.n	8006a16 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006980:	4b26      	ldr	r3, [pc, #152]	@ (8006a1c <USBD_SetConfig+0x118>)
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d112      	bne.n	80069ae <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2202      	movs	r2, #2
 800698c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8006990:	4b22      	ldr	r3, [pc, #136]	@ (8006a1c <USBD_SetConfig+0x118>)
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	461a      	mov	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800699a:	4b20      	ldr	r3, [pc, #128]	@ (8006a1c <USBD_SetConfig+0x118>)
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	4619      	mov	r1, r3
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f7ff f9e4 	bl	8005d6e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 f9d8 	bl	8006d5c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80069ac:	e033      	b.n	8006a16 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80069ae:	4b1b      	ldr	r3, [pc, #108]	@ (8006a1c <USBD_SetConfig+0x118>)
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	461a      	mov	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d01d      	beq.n	80069f8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	4619      	mov	r1, r3
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f7ff f9d2 	bl	8005d6e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80069ca:	4b14      	ldr	r3, [pc, #80]	@ (8006a1c <USBD_SetConfig+0x118>)
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	461a      	mov	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80069d4:	4b11      	ldr	r3, [pc, #68]	@ (8006a1c <USBD_SetConfig+0x118>)
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	4619      	mov	r1, r3
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f7ff f9a8 	bl	8005d30 <USBD_SetClassConfig>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d104      	bne.n	80069f0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80069e6:	6839      	ldr	r1, [r7, #0]
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 f8ef 	bl	8006bcc <USBD_CtlError>
            return;
 80069ee:	e012      	b.n	8006a16 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f9b3 	bl	8006d5c <USBD_CtlSendStatus>
        break;
 80069f6:	e00e      	b.n	8006a16 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f9af 	bl	8006d5c <USBD_CtlSendStatus>
        break;
 80069fe:	e00a      	b.n	8006a16 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006a00:	6839      	ldr	r1, [r7, #0]
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f8e2 	bl	8006bcc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006a08:	4b04      	ldr	r3, [pc, #16]	@ (8006a1c <USBD_SetConfig+0x118>)
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f7ff f9ad 	bl	8005d6e <USBD_ClrClassConfig>
        break;
 8006a14:	bf00      	nop
    }
  }
}
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	200001f4 	.word	0x200001f4

08006a20 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	88db      	ldrh	r3, [r3, #6]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d004      	beq.n	8006a3c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 f8c9 	bl	8006bcc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a3a:	e022      	b.n	8006a82 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	dc02      	bgt.n	8006a4c <USBD_GetConfig+0x2c>
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	dc03      	bgt.n	8006a52 <USBD_GetConfig+0x32>
 8006a4a:	e015      	b.n	8006a78 <USBD_GetConfig+0x58>
 8006a4c:	2b03      	cmp	r3, #3
 8006a4e:	d00b      	beq.n	8006a68 <USBD_GetConfig+0x48>
 8006a50:	e012      	b.n	8006a78 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	3308      	adds	r3, #8
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	4619      	mov	r1, r3
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f91d 	bl	8006ca0 <USBD_CtlSendData>
        break;
 8006a66:	e00c      	b.n	8006a82 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	4619      	mov	r1, r3
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f915 	bl	8006ca0 <USBD_CtlSendData>
        break;
 8006a76:	e004      	b.n	8006a82 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006a78:	6839      	ldr	r1, [r7, #0]
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 f8a6 	bl	8006bcc <USBD_CtlError>
        break;
 8006a80:	bf00      	nop
}
 8006a82:	bf00      	nop
 8006a84:	3708      	adds	r7, #8
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b082      	sub	sp, #8
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d81e      	bhi.n	8006ade <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	88db      	ldrh	r3, [r3, #6]
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d004      	beq.n	8006ab2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006aa8:	6839      	ldr	r1, [r7, #0]
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f88e 	bl	8006bcc <USBD_CtlError>
        break;
 8006ab0:	e01a      	b.n	8006ae8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d005      	beq.n	8006ace <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	f043 0202 	orr.w	r2, r3, #2
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	330c      	adds	r3, #12
 8006ad2:	2202      	movs	r2, #2
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f8e2 	bl	8006ca0 <USBD_CtlSendData>
      break;
 8006adc:	e004      	b.n	8006ae8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006ade:	6839      	ldr	r1, [r7, #0]
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f873 	bl	8006bcc <USBD_CtlError>
      break;
 8006ae6:	bf00      	nop
  }
}
 8006ae8:	bf00      	nop
 8006aea:	3708      	adds	r7, #8
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	885b      	ldrh	r3, [r3, #2]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d106      	bne.n	8006b10 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f926 	bl	8006d5c <USBD_CtlSendStatus>
  }
}
 8006b10:	bf00      	nop
 8006b12:	3708      	adds	r7, #8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d80b      	bhi.n	8006b46 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	885b      	ldrh	r3, [r3, #2]
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d10c      	bne.n	8006b50 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f90c 	bl	8006d5c <USBD_CtlSendStatus>
      }
      break;
 8006b44:	e004      	b.n	8006b50 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006b46:	6839      	ldr	r1, [r7, #0]
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 f83f 	bl	8006bcc <USBD_CtlError>
      break;
 8006b4e:	e000      	b.n	8006b52 <USBD_ClrFeature+0x3a>
      break;
 8006b50:	bf00      	nop
  }
}
 8006b52:	bf00      	nop
 8006b54:	3708      	adds	r7, #8
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b083      	sub	sp, #12
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
 8006b62:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	781a      	ldrb	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	785a      	ldrb	r2, [r3, #1]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	3302      	adds	r3, #2
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	3303      	adds	r3, #3
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	021b      	lsls	r3, r3, #8
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	4413      	add	r3, r2
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	3304      	adds	r3, #4
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	461a      	mov	r2, r3
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	3305      	adds	r3, #5
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	021b      	lsls	r3, r3, #8
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	4413      	add	r3, r2
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	3306      	adds	r3, #6
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	3307      	adds	r3, #7
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	021b      	lsls	r3, r3, #8
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	4413      	add	r3, r2
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	80da      	strh	r2, [r3, #6]

}
 8006bc2:	bf00      	nop
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bc80      	pop	{r7}
 8006bca:	4770      	bx	lr

08006bcc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006bd6:	2180      	movs	r1, #128	@ 0x80
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 fc2d 	bl	8007438 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006bde:	2100      	movs	r1, #0
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 fc29 	bl	8007438 <USBD_LL_StallEP>
}
 8006be6:	bf00      	nop
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b086      	sub	sp, #24
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	60f8      	str	r0, [r7, #12]
 8006bf6:	60b9      	str	r1, [r7, #8]
 8006bf8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d032      	beq.n	8006c6a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f000 f834 	bl	8006c72 <USBD_GetLen>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	005b      	lsls	r3, r3, #1
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006c18:	7dfb      	ldrb	r3, [r7, #23]
 8006c1a:	1c5a      	adds	r2, r3, #1
 8006c1c:	75fa      	strb	r2, [r7, #23]
 8006c1e:	461a      	mov	r2, r3
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	4413      	add	r3, r2
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	7812      	ldrb	r2, [r2, #0]
 8006c28:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006c2a:	7dfb      	ldrb	r3, [r7, #23]
 8006c2c:	1c5a      	adds	r2, r3, #1
 8006c2e:	75fa      	strb	r2, [r7, #23]
 8006c30:	461a      	mov	r2, r3
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	4413      	add	r3, r2
 8006c36:	2203      	movs	r2, #3
 8006c38:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006c3a:	e012      	b.n	8006c62 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	1c5a      	adds	r2, r3, #1
 8006c40:	60fa      	str	r2, [r7, #12]
 8006c42:	7dfa      	ldrb	r2, [r7, #23]
 8006c44:	1c51      	adds	r1, r2, #1
 8006c46:	75f9      	strb	r1, [r7, #23]
 8006c48:	4611      	mov	r1, r2
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	440a      	add	r2, r1
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006c52:	7dfb      	ldrb	r3, [r7, #23]
 8006c54:	1c5a      	adds	r2, r3, #1
 8006c56:	75fa      	strb	r2, [r7, #23]
 8006c58:	461a      	mov	r2, r3
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	2200      	movs	r2, #0
 8006c60:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1e8      	bne.n	8006c3c <USBD_GetString+0x4e>
    }
  }
}
 8006c6a:	bf00      	nop
 8006c6c:	3718      	adds	r7, #24
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006c72:	b480      	push	{r7}
 8006c74:	b085      	sub	sp, #20
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006c7e:	e005      	b.n	8006c8c <USBD_GetLen+0x1a>
  {
    len++;
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
 8006c82:	3301      	adds	r3, #1
 8006c84:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1f5      	bne.n	8006c80 <USBD_GetLen+0xe>
  }

  return len;
 8006c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bc80      	pop	{r7}
 8006c9e:	4770      	bx	lr

08006ca0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	4613      	mov	r3, r2
 8006cac:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2202      	movs	r2, #2
 8006cb2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006cb6:	88fa      	ldrh	r2, [r7, #6]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006cbc:	88fa      	ldrh	r2, [r7, #6]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006cc2:	88fb      	ldrh	r3, [r7, #6]
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	2100      	movs	r1, #0
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f000 fc3d 	bl	8007548 <USBD_LL_Transmit>

  return USBD_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ce6:	88fb      	ldrh	r3, [r7, #6]
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	2100      	movs	r1, #0
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f000 fc2b 	bl	8007548 <USBD_LL_Transmit>

  return USBD_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	4613      	mov	r3, r2
 8006d08:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2203      	movs	r2, #3
 8006d0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006d12:	88fa      	ldrh	r2, [r7, #6]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006d1a:	88fa      	ldrh	r2, [r7, #6]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d22:	88fb      	ldrh	r3, [r7, #6]
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	2100      	movs	r1, #0
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f000 fc30 	bl	800758e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	4613      	mov	r3, r2
 8006d44:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d46:	88fb      	ldrh	r3, [r7, #6]
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f000 fc1e 	bl	800758e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2204      	movs	r2, #4
 8006d68:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	2200      	movs	r2, #0
 8006d70:	2100      	movs	r1, #0
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 fbe8 	bl	8007548 <USBD_LL_Transmit>

  return USBD_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3708      	adds	r7, #8
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b082      	sub	sp, #8
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2205      	movs	r2, #5
 8006d8e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d92:	2300      	movs	r3, #0
 8006d94:	2200      	movs	r2, #0
 8006d96:	2100      	movs	r1, #0
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 fbf8 	bl	800758e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006dac:	2200      	movs	r2, #0
 8006dae:	4912      	ldr	r1, [pc, #72]	@ (8006df8 <MX_USB_DEVICE_Init+0x50>)
 8006db0:	4812      	ldr	r0, [pc, #72]	@ (8006dfc <MX_USB_DEVICE_Init+0x54>)
 8006db2:	f7fe ff63 	bl	8005c7c <USBD_Init>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006dbc:	f7f9 fac2 	bl	8000344 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006dc0:	490f      	ldr	r1, [pc, #60]	@ (8006e00 <MX_USB_DEVICE_Init+0x58>)
 8006dc2:	480e      	ldr	r0, [pc, #56]	@ (8006dfc <MX_USB_DEVICE_Init+0x54>)
 8006dc4:	f7fe ff85 	bl	8005cd2 <USBD_RegisterClass>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d001      	beq.n	8006dd2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006dce:	f7f9 fab9 	bl	8000344 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006dd2:	490c      	ldr	r1, [pc, #48]	@ (8006e04 <MX_USB_DEVICE_Init+0x5c>)
 8006dd4:	4809      	ldr	r0, [pc, #36]	@ (8006dfc <MX_USB_DEVICE_Init+0x54>)
 8006dd6:	f7fe fee5 	bl	8005ba4 <USBD_CDC_RegisterInterface>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d001      	beq.n	8006de4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006de0:	f7f9 fab0 	bl	8000344 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006de4:	4805      	ldr	r0, [pc, #20]	@ (8006dfc <MX_USB_DEVICE_Init+0x54>)
 8006de6:	f7fe ff8d 	bl	8005d04 <USBD_Start>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d001      	beq.n	8006df4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006df0:	f7f9 faa8 	bl	8000344 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006df4:	bf00      	nop
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	2000012c 	.word	0x2000012c
 8006dfc:	200001f8 	.word	0x200001f8
 8006e00:	20000018 	.word	0x20000018
 8006e04:	2000011c 	.word	0x2000011c

08006e08 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	4905      	ldr	r1, [pc, #20]	@ (8006e24 <CDC_Init_FS+0x1c>)
 8006e10:	4805      	ldr	r0, [pc, #20]	@ (8006e28 <CDC_Init_FS+0x20>)
 8006e12:	f7fe fedd 	bl	8005bd0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006e16:	4905      	ldr	r1, [pc, #20]	@ (8006e2c <CDC_Init_FS+0x24>)
 8006e18:	4803      	ldr	r0, [pc, #12]	@ (8006e28 <CDC_Init_FS+0x20>)
 8006e1a:	f7fe fef2 	bl	8005c02 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006e1e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	200008bc 	.word	0x200008bc
 8006e28:	200001f8 	.word	0x200001f8
 8006e2c:	200004bc 	.word	0x200004bc

08006e30 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006e30:	b480      	push	{r7}
 8006e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006e34:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bc80      	pop	{r7}
 8006e3c:	4770      	bx	lr
	...

08006e40 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	4603      	mov	r3, r0
 8006e48:	6039      	str	r1, [r7, #0]
 8006e4a:	71fb      	strb	r3, [r7, #7]
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006e50:	79fb      	ldrb	r3, [r7, #7]
 8006e52:	2b23      	cmp	r3, #35	@ 0x23
 8006e54:	d84a      	bhi.n	8006eec <CDC_Control_FS+0xac>
 8006e56:	a201      	add	r2, pc, #4	@ (adr r2, 8006e5c <CDC_Control_FS+0x1c>)
 8006e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5c:	08006eed 	.word	0x08006eed
 8006e60:	08006eed 	.word	0x08006eed
 8006e64:	08006eed 	.word	0x08006eed
 8006e68:	08006eed 	.word	0x08006eed
 8006e6c:	08006eed 	.word	0x08006eed
 8006e70:	08006eed 	.word	0x08006eed
 8006e74:	08006eed 	.word	0x08006eed
 8006e78:	08006eed 	.word	0x08006eed
 8006e7c:	08006eed 	.word	0x08006eed
 8006e80:	08006eed 	.word	0x08006eed
 8006e84:	08006eed 	.word	0x08006eed
 8006e88:	08006eed 	.word	0x08006eed
 8006e8c:	08006eed 	.word	0x08006eed
 8006e90:	08006eed 	.word	0x08006eed
 8006e94:	08006eed 	.word	0x08006eed
 8006e98:	08006eed 	.word	0x08006eed
 8006e9c:	08006eed 	.word	0x08006eed
 8006ea0:	08006eed 	.word	0x08006eed
 8006ea4:	08006eed 	.word	0x08006eed
 8006ea8:	08006eed 	.word	0x08006eed
 8006eac:	08006eed 	.word	0x08006eed
 8006eb0:	08006eed 	.word	0x08006eed
 8006eb4:	08006eed 	.word	0x08006eed
 8006eb8:	08006eed 	.word	0x08006eed
 8006ebc:	08006eed 	.word	0x08006eed
 8006ec0:	08006eed 	.word	0x08006eed
 8006ec4:	08006eed 	.word	0x08006eed
 8006ec8:	08006eed 	.word	0x08006eed
 8006ecc:	08006eed 	.word	0x08006eed
 8006ed0:	08006eed 	.word	0x08006eed
 8006ed4:	08006eed 	.word	0x08006eed
 8006ed8:	08006eed 	.word	0x08006eed
 8006edc:	08006eed 	.word	0x08006eed
 8006ee0:	08006eed 	.word	0x08006eed
 8006ee4:	08006eed 	.word	0x08006eed
 8006ee8:	08006eed 	.word	0x08006eed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006eec:	bf00      	nop
  }

  return (USBD_OK);
 8006eee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bc80      	pop	{r7}
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop

08006efc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006f06:	6879      	ldr	r1, [r7, #4]
 8006f08:	4805      	ldr	r0, [pc, #20]	@ (8006f20 <CDC_Receive_FS+0x24>)
 8006f0a:	f7fe fe7a 	bl	8005c02 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006f0e:	4804      	ldr	r0, [pc, #16]	@ (8006f20 <CDC_Receive_FS+0x24>)
 8006f10:	f7fe fe8a 	bl	8005c28 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006f14:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3708      	adds	r7, #8
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	200001f8 	.word	0x200001f8

08006f24 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	6039      	str	r1, [r7, #0]
 8006f2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	2212      	movs	r2, #18
 8006f34:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006f36:	4b03      	ldr	r3, [pc, #12]	@ (8006f44 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bc80      	pop	{r7}
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	20000148 	.word	0x20000148

08006f48 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	4603      	mov	r3, r0
 8006f50:	6039      	str	r1, [r7, #0]
 8006f52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	2204      	movs	r2, #4
 8006f58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006f5a:	4b03      	ldr	r3, [pc, #12]	@ (8006f68 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bc80      	pop	{r7}
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	2000015c 	.word	0x2000015c

08006f6c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	4603      	mov	r3, r0
 8006f74:	6039      	str	r1, [r7, #0]
 8006f76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f78:	79fb      	ldrb	r3, [r7, #7]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d105      	bne.n	8006f8a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	4907      	ldr	r1, [pc, #28]	@ (8006fa0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f82:	4808      	ldr	r0, [pc, #32]	@ (8006fa4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006f84:	f7ff fe33 	bl	8006bee <USBD_GetString>
 8006f88:	e004      	b.n	8006f94 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f8a:	683a      	ldr	r2, [r7, #0]
 8006f8c:	4904      	ldr	r1, [pc, #16]	@ (8006fa0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f8e:	4805      	ldr	r0, [pc, #20]	@ (8006fa4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006f90:	f7ff fe2d 	bl	8006bee <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f94:	4b02      	ldr	r3, [pc, #8]	@ (8006fa0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	20000cbc 	.word	0x20000cbc
 8006fa4:	08007704 	.word	0x08007704

08006fa8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	4603      	mov	r3, r0
 8006fb0:	6039      	str	r1, [r7, #0]
 8006fb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006fb4:	683a      	ldr	r2, [r7, #0]
 8006fb6:	4904      	ldr	r1, [pc, #16]	@ (8006fc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006fb8:	4804      	ldr	r0, [pc, #16]	@ (8006fcc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006fba:	f7ff fe18 	bl	8006bee <USBD_GetString>
  return USBD_StrDesc;
 8006fbe:	4b02      	ldr	r3, [pc, #8]	@ (8006fc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3708      	adds	r7, #8
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	20000cbc 	.word	0x20000cbc
 8006fcc:	0800771c 	.word	0x0800771c

08006fd0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	6039      	str	r1, [r7, #0]
 8006fda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	221a      	movs	r2, #26
 8006fe0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006fe2:	f000 f843 	bl	800706c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006fe6:	4b02      	ldr	r3, [pc, #8]	@ (8006ff0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3708      	adds	r7, #8
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	20000160 	.word	0x20000160

08006ff4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	6039      	str	r1, [r7, #0]
 8006ffe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007000:	79fb      	ldrb	r3, [r7, #7]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d105      	bne.n	8007012 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007006:	683a      	ldr	r2, [r7, #0]
 8007008:	4907      	ldr	r1, [pc, #28]	@ (8007028 <USBD_FS_ConfigStrDescriptor+0x34>)
 800700a:	4808      	ldr	r0, [pc, #32]	@ (800702c <USBD_FS_ConfigStrDescriptor+0x38>)
 800700c:	f7ff fdef 	bl	8006bee <USBD_GetString>
 8007010:	e004      	b.n	800701c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007012:	683a      	ldr	r2, [r7, #0]
 8007014:	4904      	ldr	r1, [pc, #16]	@ (8007028 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007016:	4805      	ldr	r0, [pc, #20]	@ (800702c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007018:	f7ff fde9 	bl	8006bee <USBD_GetString>
  }
  return USBD_StrDesc;
 800701c:	4b02      	ldr	r3, [pc, #8]	@ (8007028 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800701e:	4618      	mov	r0, r3
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	20000cbc 	.word	0x20000cbc
 800702c:	08007730 	.word	0x08007730

08007030 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	4603      	mov	r3, r0
 8007038:	6039      	str	r1, [r7, #0]
 800703a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800703c:	79fb      	ldrb	r3, [r7, #7]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d105      	bne.n	800704e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007042:	683a      	ldr	r2, [r7, #0]
 8007044:	4907      	ldr	r1, [pc, #28]	@ (8007064 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007046:	4808      	ldr	r0, [pc, #32]	@ (8007068 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007048:	f7ff fdd1 	bl	8006bee <USBD_GetString>
 800704c:	e004      	b.n	8007058 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	4904      	ldr	r1, [pc, #16]	@ (8007064 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007052:	4805      	ldr	r0, [pc, #20]	@ (8007068 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007054:	f7ff fdcb 	bl	8006bee <USBD_GetString>
  }
  return USBD_StrDesc;
 8007058:	4b02      	ldr	r3, [pc, #8]	@ (8007064 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800705a:	4618      	mov	r0, r3
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	20000cbc 	.word	0x20000cbc
 8007068:	0800773c 	.word	0x0800773c

0800706c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007072:	4b0f      	ldr	r3, [pc, #60]	@ (80070b0 <Get_SerialNum+0x44>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007078:	4b0e      	ldr	r3, [pc, #56]	@ (80070b4 <Get_SerialNum+0x48>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800707e:	4b0e      	ldr	r3, [pc, #56]	@ (80070b8 <Get_SerialNum+0x4c>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4413      	add	r3, r2
 800708a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d009      	beq.n	80070a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007092:	2208      	movs	r2, #8
 8007094:	4909      	ldr	r1, [pc, #36]	@ (80070bc <Get_SerialNum+0x50>)
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f000 f814 	bl	80070c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800709c:	2204      	movs	r2, #4
 800709e:	4908      	ldr	r1, [pc, #32]	@ (80070c0 <Get_SerialNum+0x54>)
 80070a0:	68b8      	ldr	r0, [r7, #8]
 80070a2:	f000 f80f 	bl	80070c4 <IntToUnicode>
  }
}
 80070a6:	bf00      	nop
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	1ffff7e8 	.word	0x1ffff7e8
 80070b4:	1ffff7ec 	.word	0x1ffff7ec
 80070b8:	1ffff7f0 	.word	0x1ffff7f0
 80070bc:	20000162 	.word	0x20000162
 80070c0:	20000172 	.word	0x20000172

080070c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b087      	sub	sp, #28
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	4613      	mov	r3, r2
 80070d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80070d2:	2300      	movs	r3, #0
 80070d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80070d6:	2300      	movs	r3, #0
 80070d8:	75fb      	strb	r3, [r7, #23]
 80070da:	e027      	b.n	800712c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	0f1b      	lsrs	r3, r3, #28
 80070e0:	2b09      	cmp	r3, #9
 80070e2:	d80b      	bhi.n	80070fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	0f1b      	lsrs	r3, r3, #28
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	7dfb      	ldrb	r3, [r7, #23]
 80070ec:	005b      	lsls	r3, r3, #1
 80070ee:	4619      	mov	r1, r3
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	440b      	add	r3, r1
 80070f4:	3230      	adds	r2, #48	@ 0x30
 80070f6:	b2d2      	uxtb	r2, r2
 80070f8:	701a      	strb	r2, [r3, #0]
 80070fa:	e00a      	b.n	8007112 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	0f1b      	lsrs	r3, r3, #28
 8007100:	b2da      	uxtb	r2, r3
 8007102:	7dfb      	ldrb	r3, [r7, #23]
 8007104:	005b      	lsls	r3, r3, #1
 8007106:	4619      	mov	r1, r3
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	440b      	add	r3, r1
 800710c:	3237      	adds	r2, #55	@ 0x37
 800710e:	b2d2      	uxtb	r2, r2
 8007110:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	011b      	lsls	r3, r3, #4
 8007116:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007118:	7dfb      	ldrb	r3, [r7, #23]
 800711a:	005b      	lsls	r3, r3, #1
 800711c:	3301      	adds	r3, #1
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	4413      	add	r3, r2
 8007122:	2200      	movs	r2, #0
 8007124:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007126:	7dfb      	ldrb	r3, [r7, #23]
 8007128:	3301      	adds	r3, #1
 800712a:	75fb      	strb	r3, [r7, #23]
 800712c:	7dfa      	ldrb	r2, [r7, #23]
 800712e:	79fb      	ldrb	r3, [r7, #7]
 8007130:	429a      	cmp	r2, r3
 8007132:	d3d3      	bcc.n	80070dc <IntToUnicode+0x18>
  }
}
 8007134:	bf00      	nop
 8007136:	bf00      	nop
 8007138:	371c      	adds	r7, #28
 800713a:	46bd      	mov	sp, r7
 800713c:	bc80      	pop	{r7}
 800713e:	4770      	bx	lr

08007140 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a0d      	ldr	r2, [pc, #52]	@ (8007184 <HAL_PCD_MspInit+0x44>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d113      	bne.n	800717a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007152:	4b0d      	ldr	r3, [pc, #52]	@ (8007188 <HAL_PCD_MspInit+0x48>)
 8007154:	69db      	ldr	r3, [r3, #28]
 8007156:	4a0c      	ldr	r2, [pc, #48]	@ (8007188 <HAL_PCD_MspInit+0x48>)
 8007158:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800715c:	61d3      	str	r3, [r2, #28]
 800715e:	4b0a      	ldr	r3, [pc, #40]	@ (8007188 <HAL_PCD_MspInit+0x48>)
 8007160:	69db      	ldr	r3, [r3, #28]
 8007162:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800716a:	2200      	movs	r2, #0
 800716c:	2100      	movs	r1, #0
 800716e:	2014      	movs	r0, #20
 8007170:	f7f9 fb05 	bl	800077e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007174:	2014      	movs	r0, #20
 8007176:	f7f9 fb1e 	bl	80007b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800717a:	bf00      	nop
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	40005c00 	.word	0x40005c00
 8007188:	40021000 	.word	0x40021000

0800718c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80071a0:	4619      	mov	r1, r3
 80071a2:	4610      	mov	r0, r2
 80071a4:	f7fe fdf6 	bl	8005d94 <USBD_LL_SetupStage>
}
 80071a8:	bf00      	nop
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	460b      	mov	r3, r1
 80071ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80071c2:	78fa      	ldrb	r2, [r7, #3]
 80071c4:	6879      	ldr	r1, [r7, #4]
 80071c6:	4613      	mov	r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	4413      	add	r3, r2
 80071cc:	00db      	lsls	r3, r3, #3
 80071ce:	440b      	add	r3, r1
 80071d0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	78fb      	ldrb	r3, [r7, #3]
 80071d8:	4619      	mov	r1, r3
 80071da:	f7fe fe28 	bl	8005e2e <USBD_LL_DataOutStage>
}
 80071de:	bf00      	nop
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b082      	sub	sp, #8
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	460b      	mov	r3, r1
 80071f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80071f8:	78fa      	ldrb	r2, [r7, #3]
 80071fa:	6879      	ldr	r1, [r7, #4]
 80071fc:	4613      	mov	r3, r2
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	00db      	lsls	r3, r3, #3
 8007204:	440b      	add	r3, r1
 8007206:	3324      	adds	r3, #36	@ 0x24
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	78fb      	ldrb	r3, [r7, #3]
 800720c:	4619      	mov	r1, r3
 800720e:	f7fe fe7f 	bl	8005f10 <USBD_LL_DataInStage>
}
 8007212:	bf00      	nop
 8007214:	3708      	adds	r7, #8
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b082      	sub	sp, #8
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007228:	4618      	mov	r0, r3
 800722a:	f7fe ff8f 	bl	800614c <USBD_LL_SOF>
}
 800722e:	bf00      	nop
 8007230:	3708      	adds	r7, #8
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b084      	sub	sp, #16
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800723e:	2301      	movs	r3, #1
 8007240:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	799b      	ldrb	r3, [r3, #6]
 8007246:	2b02      	cmp	r3, #2
 8007248:	d001      	beq.n	800724e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800724a:	f7f9 f87b 	bl	8000344 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007254:	7bfa      	ldrb	r2, [r7, #15]
 8007256:	4611      	mov	r1, r2
 8007258:	4618      	mov	r0, r3
 800725a:	f7fe ff3f 	bl	80060dc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007264:	4618      	mov	r0, r3
 8007266:	f7fe fef8 	bl	800605a <USBD_LL_Reset>
}
 800726a:	bf00      	nop
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
	...

08007274 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007282:	4618      	mov	r0, r3
 8007284:	f7fe ff39 	bl	80060fa <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	7a9b      	ldrb	r3, [r3, #10]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d005      	beq.n	800729c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007290:	4b04      	ldr	r3, [pc, #16]	@ (80072a4 <HAL_PCD_SuspendCallback+0x30>)
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	4a03      	ldr	r2, [pc, #12]	@ (80072a4 <HAL_PCD_SuspendCallback+0x30>)
 8007296:	f043 0306 	orr.w	r3, r3, #6
 800729a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800729c:	bf00      	nop
 800729e:	3708      	adds	r7, #8
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	e000ed00 	.word	0xe000ed00

080072a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7fe ff33 	bl	8006122 <USBD_LL_Resume>
}
 80072bc:	bf00      	nop
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80072cc:	4a28      	ldr	r2, [pc, #160]	@ (8007370 <USBD_LL_Init+0xac>)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a26      	ldr	r2, [pc, #152]	@ (8007370 <USBD_LL_Init+0xac>)
 80072d8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80072dc:	4b24      	ldr	r3, [pc, #144]	@ (8007370 <USBD_LL_Init+0xac>)
 80072de:	4a25      	ldr	r2, [pc, #148]	@ (8007374 <USBD_LL_Init+0xb0>)
 80072e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80072e2:	4b23      	ldr	r3, [pc, #140]	@ (8007370 <USBD_LL_Init+0xac>)
 80072e4:	2208      	movs	r2, #8
 80072e6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80072e8:	4b21      	ldr	r3, [pc, #132]	@ (8007370 <USBD_LL_Init+0xac>)
 80072ea:	2202      	movs	r2, #2
 80072ec:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80072ee:	4b20      	ldr	r3, [pc, #128]	@ (8007370 <USBD_LL_Init+0xac>)
 80072f0:	2200      	movs	r2, #0
 80072f2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80072f4:	4b1e      	ldr	r3, [pc, #120]	@ (8007370 <USBD_LL_Init+0xac>)
 80072f6:	2200      	movs	r2, #0
 80072f8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80072fa:	4b1d      	ldr	r3, [pc, #116]	@ (8007370 <USBD_LL_Init+0xac>)
 80072fc:	2200      	movs	r2, #0
 80072fe:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007300:	481b      	ldr	r0, [pc, #108]	@ (8007370 <USBD_LL_Init+0xac>)
 8007302:	f7f9 fc07 	bl	8000b14 <HAL_PCD_Init>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d001      	beq.n	8007310 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800730c:	f7f9 f81a 	bl	8000344 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007316:	2318      	movs	r3, #24
 8007318:	2200      	movs	r2, #0
 800731a:	2100      	movs	r1, #0
 800731c:	f7fb f918 	bl	8002550 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007326:	2358      	movs	r3, #88	@ 0x58
 8007328:	2200      	movs	r2, #0
 800732a:	2180      	movs	r1, #128	@ 0x80
 800732c:	f7fb f910 	bl	8002550 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007336:	23c0      	movs	r3, #192	@ 0xc0
 8007338:	2200      	movs	r2, #0
 800733a:	2181      	movs	r1, #129	@ 0x81
 800733c:	f7fb f908 	bl	8002550 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007346:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800734a:	2200      	movs	r2, #0
 800734c:	2101      	movs	r1, #1
 800734e:	f7fb f8ff 	bl	8002550 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007358:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800735c:	2200      	movs	r2, #0
 800735e:	2182      	movs	r1, #130	@ 0x82
 8007360:	f7fb f8f6 	bl	8002550 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3708      	adds	r7, #8
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	20000ebc 	.word	0x20000ebc
 8007374:	40005c00 	.word	0x40005c00

08007378 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007380:	2300      	movs	r3, #0
 8007382:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007384:	2300      	movs	r3, #0
 8007386:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800738e:	4618      	mov	r0, r3
 8007390:	f7f9 fcb6 	bl	8000d00 <HAL_PCD_Start>
 8007394:	4603      	mov	r3, r0
 8007396:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007398:	7bfb      	ldrb	r3, [r7, #15]
 800739a:	4618      	mov	r0, r3
 800739c:	f000 f94e 	bl	800763c <USBD_Get_USB_Status>
 80073a0:	4603      	mov	r3, r0
 80073a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b084      	sub	sp, #16
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
 80073b6:	4608      	mov	r0, r1
 80073b8:	4611      	mov	r1, r2
 80073ba:	461a      	mov	r2, r3
 80073bc:	4603      	mov	r3, r0
 80073be:	70fb      	strb	r3, [r7, #3]
 80073c0:	460b      	mov	r3, r1
 80073c2:	70bb      	strb	r3, [r7, #2]
 80073c4:	4613      	mov	r3, r2
 80073c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073c8:	2300      	movs	r3, #0
 80073ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073cc:	2300      	movs	r3, #0
 80073ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80073d6:	78bb      	ldrb	r3, [r7, #2]
 80073d8:	883a      	ldrh	r2, [r7, #0]
 80073da:	78f9      	ldrb	r1, [r7, #3]
 80073dc:	f7f9 fe0a 	bl	8000ff4 <HAL_PCD_EP_Open>
 80073e0:	4603      	mov	r3, r0
 80073e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
 80073e6:	4618      	mov	r0, r3
 80073e8:	f000 f928 	bl	800763c <USBD_Get_USB_Status>
 80073ec:	4603      	mov	r3, r0
 80073ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b084      	sub	sp, #16
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
 8007402:	460b      	mov	r3, r1
 8007404:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007406:	2300      	movs	r3, #0
 8007408:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800740a:	2300      	movs	r3, #0
 800740c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007414:	78fa      	ldrb	r2, [r7, #3]
 8007416:	4611      	mov	r1, r2
 8007418:	4618      	mov	r0, r3
 800741a:	f7f9 fe48 	bl	80010ae <HAL_PCD_EP_Close>
 800741e:	4603      	mov	r3, r0
 8007420:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007422:	7bfb      	ldrb	r3, [r7, #15]
 8007424:	4618      	mov	r0, r3
 8007426:	f000 f909 	bl	800763c <USBD_Get_USB_Status>
 800742a:	4603      	mov	r3, r0
 800742c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800742e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007430:	4618      	mov	r0, r3
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	460b      	mov	r3, r1
 8007442:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007444:	2300      	movs	r3, #0
 8007446:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007448:	2300      	movs	r3, #0
 800744a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007452:	78fa      	ldrb	r2, [r7, #3]
 8007454:	4611      	mov	r1, r2
 8007456:	4618      	mov	r0, r3
 8007458:	f7f9 fef0 	bl	800123c <HAL_PCD_EP_SetStall>
 800745c:	4603      	mov	r3, r0
 800745e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007460:	7bfb      	ldrb	r3, [r7, #15]
 8007462:	4618      	mov	r0, r3
 8007464:	f000 f8ea 	bl	800763c <USBD_Get_USB_Status>
 8007468:	4603      	mov	r3, r0
 800746a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800746c:	7bbb      	ldrb	r3, [r7, #14]
}
 800746e:	4618      	mov	r0, r3
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b084      	sub	sp, #16
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
 800747e:	460b      	mov	r3, r1
 8007480:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007486:	2300      	movs	r3, #0
 8007488:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007490:	78fa      	ldrb	r2, [r7, #3]
 8007492:	4611      	mov	r1, r2
 8007494:	4618      	mov	r0, r3
 8007496:	f7f9 ff31 	bl	80012fc <HAL_PCD_EP_ClrStall>
 800749a:	4603      	mov	r3, r0
 800749c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800749e:	7bfb      	ldrb	r3, [r7, #15]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f000 f8cb 	bl	800763c <USBD_Get_USB_Status>
 80074a6:	4603      	mov	r3, r0
 80074a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	460b      	mov	r3, r1
 80074be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80074c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80074c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	da0b      	bge.n	80074e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80074d0:	78fb      	ldrb	r3, [r7, #3]
 80074d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80074d6:	68f9      	ldr	r1, [r7, #12]
 80074d8:	4613      	mov	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4413      	add	r3, r2
 80074de:	00db      	lsls	r3, r3, #3
 80074e0:	440b      	add	r3, r1
 80074e2:	3312      	adds	r3, #18
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	e00b      	b.n	8007500 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80074e8:	78fb      	ldrb	r3, [r7, #3]
 80074ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80074ee:	68f9      	ldr	r1, [r7, #12]
 80074f0:	4613      	mov	r3, r2
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4413      	add	r3, r2
 80074f6:	00db      	lsls	r3, r3, #3
 80074f8:	440b      	add	r3, r1
 80074fa:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80074fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007500:	4618      	mov	r0, r3
 8007502:	3714      	adds	r7, #20
 8007504:	46bd      	mov	sp, r7
 8007506:	bc80      	pop	{r7}
 8007508:	4770      	bx	lr

0800750a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b084      	sub	sp, #16
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	460b      	mov	r3, r1
 8007514:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800751a:	2300      	movs	r3, #0
 800751c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007524:	78fa      	ldrb	r2, [r7, #3]
 8007526:	4611      	mov	r1, r2
 8007528:	4618      	mov	r0, r3
 800752a:	f7f9 fd3f 	bl	8000fac <HAL_PCD_SetAddress>
 800752e:	4603      	mov	r3, r0
 8007530:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007532:	7bfb      	ldrb	r3, [r7, #15]
 8007534:	4618      	mov	r0, r3
 8007536:	f000 f881 	bl	800763c <USBD_Get_USB_Status>
 800753a:	4603      	mov	r3, r0
 800753c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800753e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007540:	4618      	mov	r0, r3
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b086      	sub	sp, #24
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	607a      	str	r2, [r7, #4]
 8007552:	461a      	mov	r2, r3
 8007554:	460b      	mov	r3, r1
 8007556:	72fb      	strb	r3, [r7, #11]
 8007558:	4613      	mov	r3, r2
 800755a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800755c:	2300      	movs	r3, #0
 800755e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007560:	2300      	movs	r3, #0
 8007562:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800756a:	893b      	ldrh	r3, [r7, #8]
 800756c:	7af9      	ldrb	r1, [r7, #11]
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	f7f9 fe2d 	bl	80011ce <HAL_PCD_EP_Transmit>
 8007574:	4603      	mov	r3, r0
 8007576:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007578:	7dfb      	ldrb	r3, [r7, #23]
 800757a:	4618      	mov	r0, r3
 800757c:	f000 f85e 	bl	800763c <USBD_Get_USB_Status>
 8007580:	4603      	mov	r3, r0
 8007582:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007584:	7dbb      	ldrb	r3, [r7, #22]
}
 8007586:	4618      	mov	r0, r3
 8007588:	3718      	adds	r7, #24
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b086      	sub	sp, #24
 8007592:	af00      	add	r7, sp, #0
 8007594:	60f8      	str	r0, [r7, #12]
 8007596:	607a      	str	r2, [r7, #4]
 8007598:	461a      	mov	r2, r3
 800759a:	460b      	mov	r3, r1
 800759c:	72fb      	strb	r3, [r7, #11]
 800759e:	4613      	mov	r3, r2
 80075a0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075a2:	2300      	movs	r3, #0
 80075a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075a6:	2300      	movs	r3, #0
 80075a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80075b0:	893b      	ldrh	r3, [r7, #8]
 80075b2:	7af9      	ldrb	r1, [r7, #11]
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	f7f9 fdc2 	bl	800113e <HAL_PCD_EP_Receive>
 80075ba:	4603      	mov	r3, r0
 80075bc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075be:	7dfb      	ldrb	r3, [r7, #23]
 80075c0:	4618      	mov	r0, r3
 80075c2:	f000 f83b 	bl	800763c <USBD_Get_USB_Status>
 80075c6:	4603      	mov	r3, r0
 80075c8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80075ca:	7dbb      	ldrb	r3, [r7, #22]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3718      	adds	r7, #24
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	460b      	mov	r3, r1
 80075de:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80075e6:	78fa      	ldrb	r2, [r7, #3]
 80075e8:	4611      	mov	r1, r2
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7f9 fdd8 	bl	80011a0 <HAL_PCD_EP_GetRxCount>
 80075f0:	4603      	mov	r3, r0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3708      	adds	r7, #8
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
	...

080075fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007604:	4b02      	ldr	r3, [pc, #8]	@ (8007610 <USBD_static_malloc+0x14>)
}
 8007606:	4618      	mov	r0, r3
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	bc80      	pop	{r7}
 800760e:	4770      	bx	lr
 8007610:	20001194 	.word	0x20001194

08007614 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]

}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	bc80      	pop	{r7}
 8007624:	4770      	bx	lr

08007626 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007626:	b480      	push	{r7}
 8007628:	b083      	sub	sp, #12
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
 800762e:	460b      	mov	r3, r1
 8007630:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007632:	bf00      	nop
 8007634:	370c      	adds	r7, #12
 8007636:	46bd      	mov	sp, r7
 8007638:	bc80      	pop	{r7}
 800763a:	4770      	bx	lr

0800763c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	4603      	mov	r3, r0
 8007644:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007646:	2300      	movs	r3, #0
 8007648:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800764a:	79fb      	ldrb	r3, [r7, #7]
 800764c:	2b03      	cmp	r3, #3
 800764e:	d817      	bhi.n	8007680 <USBD_Get_USB_Status+0x44>
 8007650:	a201      	add	r2, pc, #4	@ (adr r2, 8007658 <USBD_Get_USB_Status+0x1c>)
 8007652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007656:	bf00      	nop
 8007658:	08007669 	.word	0x08007669
 800765c:	0800766f 	.word	0x0800766f
 8007660:	08007675 	.word	0x08007675
 8007664:	0800767b 	.word	0x0800767b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007668:	2300      	movs	r3, #0
 800766a:	73fb      	strb	r3, [r7, #15]
    break;
 800766c:	e00b      	b.n	8007686 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800766e:	2302      	movs	r3, #2
 8007670:	73fb      	strb	r3, [r7, #15]
    break;
 8007672:	e008      	b.n	8007686 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007674:	2301      	movs	r3, #1
 8007676:	73fb      	strb	r3, [r7, #15]
    break;
 8007678:	e005      	b.n	8007686 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800767a:	2302      	movs	r3, #2
 800767c:	73fb      	strb	r3, [r7, #15]
    break;
 800767e:	e002      	b.n	8007686 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007680:	2302      	movs	r3, #2
 8007682:	73fb      	strb	r3, [r7, #15]
    break;
 8007684:	bf00      	nop
  }
  return usb_status;
 8007686:	7bfb      	ldrb	r3, [r7, #15]
}
 8007688:	4618      	mov	r0, r3
 800768a:	3714      	adds	r7, #20
 800768c:	46bd      	mov	sp, r7
 800768e:	bc80      	pop	{r7}
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop

08007694 <memset>:
 8007694:	4603      	mov	r3, r0
 8007696:	4402      	add	r2, r0
 8007698:	4293      	cmp	r3, r2
 800769a:	d100      	bne.n	800769e <memset+0xa>
 800769c:	4770      	bx	lr
 800769e:	f803 1b01 	strb.w	r1, [r3], #1
 80076a2:	e7f9      	b.n	8007698 <memset+0x4>

080076a4 <__libc_init_array>:
 80076a4:	b570      	push	{r4, r5, r6, lr}
 80076a6:	2600      	movs	r6, #0
 80076a8:	4d0c      	ldr	r5, [pc, #48]	@ (80076dc <__libc_init_array+0x38>)
 80076aa:	4c0d      	ldr	r4, [pc, #52]	@ (80076e0 <__libc_init_array+0x3c>)
 80076ac:	1b64      	subs	r4, r4, r5
 80076ae:	10a4      	asrs	r4, r4, #2
 80076b0:	42a6      	cmp	r6, r4
 80076b2:	d109      	bne.n	80076c8 <__libc_init_array+0x24>
 80076b4:	f000 f81a 	bl	80076ec <_init>
 80076b8:	2600      	movs	r6, #0
 80076ba:	4d0a      	ldr	r5, [pc, #40]	@ (80076e4 <__libc_init_array+0x40>)
 80076bc:	4c0a      	ldr	r4, [pc, #40]	@ (80076e8 <__libc_init_array+0x44>)
 80076be:	1b64      	subs	r4, r4, r5
 80076c0:	10a4      	asrs	r4, r4, #2
 80076c2:	42a6      	cmp	r6, r4
 80076c4:	d105      	bne.n	80076d2 <__libc_init_array+0x2e>
 80076c6:	bd70      	pop	{r4, r5, r6, pc}
 80076c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80076cc:	4798      	blx	r3
 80076ce:	3601      	adds	r6, #1
 80076d0:	e7ee      	b.n	80076b0 <__libc_init_array+0xc>
 80076d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80076d6:	4798      	blx	r3
 80076d8:	3601      	adds	r6, #1
 80076da:	e7f2      	b.n	80076c2 <__libc_init_array+0x1e>
 80076dc:	08007770 	.word	0x08007770
 80076e0:	08007770 	.word	0x08007770
 80076e4:	08007770 	.word	0x08007770
 80076e8:	08007774 	.word	0x08007774

080076ec <_init>:
 80076ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ee:	bf00      	nop
 80076f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076f2:	bc08      	pop	{r3}
 80076f4:	469e      	mov	lr, r3
 80076f6:	4770      	bx	lr

080076f8 <_fini>:
 80076f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076fa:	bf00      	nop
 80076fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076fe:	bc08      	pop	{r3}
 8007700:	469e      	mov	lr, r3
 8007702:	4770      	bx	lr
